[
    {
        "id": "2bec743ed210214e",
        "type": "tab",
        "label": "2.9.1 - Missions",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7e68f645b28cd8fd",
        "type": "inject",
        "z": "2bec743ed210214e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 240,
        "wires": [
            [
                "6cc63c2c9b51c789"
            ]
        ]
    },
    {
        "id": "ee05e0b86214b873",
        "type": "inject",
        "z": "2bec743ed210214e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 380,
        "wires": [
            [
                "6ad70d3e73fff5e3"
            ]
        ]
    },
    {
        "id": "6a7da092445a4931",
        "type": "http request",
        "z": "2bec743ed210214e",
        "name": "Send Request to RCS",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://10.203.207.85:10081/mission",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 780,
        "y": 200,
        "wires": [
            [
                "43673a198d29fec4"
            ]
        ]
    },
    {
        "id": "43673a198d29fec4",
        "type": "debug",
        "z": "2bec743ed210214e",
        "name": "debug 68",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 200,
        "wires": []
    },
    {
        "id": "16050d9d81ca6ce6",
        "type": "function",
        "z": "2bec743ed210214e",
        "name": "Message Body",
        "func": "const hostId = \"HostID\" + flow.get(\"orderId\")\nconst pickId = \"PickID\" + flow.get(\"orderId\")\nconst waitId = \"WaitID\" + flow.get(\"orderId\")\nnode.warn(flow.get(\"orderId\"));\n// Create the payload object\nconst payload =\n{\n        \"MissionHostId\": hostId,\n        \"Priority\": 0,\n        \"Tasks\": [\n                {\n                        \"DeviceId\": \"CARRIER_1\",\n                        \"LoadTypeId\": \"EURO\",\n                        \"LocationStationId\": flow.get(\"startLocation\"),\n                        \"Sequence\": 0,\n                        \"TaskHostId\": pickId,\n                        \"TaskType\": \"Pick\"\n                },\n                {\n                        \"DeviceId\": \"CARRIER_1\",\n                        \"LoadTypeId\": \"EURO\",\n                        \"LocationStationId\": flow.get(\"startLocation\"),\n                        \"Sequence\": 1,\n                        \"TaskHostId\": waitId,\n                        \"TaskType\": \"Wait\"\n                }\n        ]\n};\n \n// Set the payload\nmsg.payload = payload;\n \n// Return the modified message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 200,
        "wires": [
            [
                "6a7da092445a4931"
            ]
        ]
    },
    {
        "id": "5b88a4349e691b5c",
        "type": "http request",
        "z": "2bec743ed210214e",
        "name": "Send Request to RCS",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://10.203.207.85:10081/mission/{{{topic}}}/append",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 660,
        "y": 380,
        "wires": [
            [
                "28328634be2c7ee5"
            ]
        ]
    },
    {
        "id": "28328634be2c7ee5",
        "type": "debug",
        "z": "2bec743ed210214e",
        "name": "debug 69",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 380,
        "wires": []
    },
    {
        "id": "6ad70d3e73fff5e3",
        "type": "function",
        "z": "2bec743ed210214e",
        "name": "Message Body",
        "func": "const dropId = \"DropId\"+flow.get(\"orderId\")\nconst finishId = \"FinishId\"+flow.get(\"orderId\")\n\n// Create the payload object\nconst payload =\n[\n  {\n    \"DeviceId\": \"CARRIER_1\",\n    \"LoadTypeId\": \"EURO\",\n    \"LocationStationId\": flow.get(\"endLocation\"),\n    \"Sequence\": 0,\n    \"TaskHostId\": dropId,\n    \"TaskType\": \"Drop\"\n  },\n  {\n    \"DeviceId\": \"CARRIER_1\",\n    \"LoadTypeId\": \"EURO\",\n    \"LocationStationId\": flow.get(\"endLocation\"),\n    \"Sequence\": 1,\n    \"TaskHostId\": finishId,\n    \"TaskType\": \"Finish\"\n  }\n];\n \n// Set the payload\nmsg.payload = payload;\n\nmsg.topic = \"HostID\" + flow.get(\"orderId\") \n\n// Return the modified message object\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 380,
        "wires": [
            [
                "5b88a4349e691b5c"
            ]
        ]
    },
    {
        "id": "6cc63c2c9b51c789",
        "type": "function",
        "z": "2bec743ed210214e",
        "name": "SetFlowVariables",
        "func": "const randomHex = Math.random().toString(16).slice(2, 10);\n\nflow.set(\"orderId\",randomHex)\nflow.set(\"startLocation\", \"KiKiwx\")\nflow.set(\"endLocation\", \"E3EwpK\")\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 200,
        "wires": [
            [
                "16050d9d81ca6ce6"
            ]
        ]
    }
]
