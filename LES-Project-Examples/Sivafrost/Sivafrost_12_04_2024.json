[
    {
        "id": "5980dbde181456f9",
        "type": "tab",
        "label": "Recieve Open/Close",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f8006bed1ee01646",
        "type": "tab",
        "label": "OPC Communication",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b1c8721696012a4d",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7eaa40a7bd02263d",
        "type": "tab",
        "label": "Handshake F2_Conveyor_Pick",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8e9ea22720f18ed3",
        "type": "tab",
        "label": "Handshake F2_Conveyor_Drop",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c451f3405f6aaa4f",
        "type": "tab",
        "label": "Fast Door",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5ec9ee5b05691a00",
        "type": "tab",
        "label": "Flow Simulation",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ebf886250cf52424",
        "type": "tab",
        "label": "Handshake WH_Conveyor_Drop",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bd2d9e87f698392e",
        "type": "tab",
        "label": "Traffic Light",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "42dfa7aa6508f4a9",
        "type": "tab",
        "label": "Handshake Packing Stand 5",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "851a07d714ca58e0",
        "type": "tab",
        "label": "Handshake Packing_Stand_1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d6eece90716f71c5",
        "type": "tab",
        "label": "Handshake Packing_Stand_2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7134b1a6f019b638",
        "type": "tab",
        "label": "Handshake Packing_Stand_3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5a6f939f0a632dfa",
        "type": "tab",
        "label": "Handshake Packing_Stand_4",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d07864b6b05aa4b1",
        "type": "tab",
        "label": "Handshake Packing_Stand_6",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1ba65e07f15af05c",
        "type": "tab",
        "label": "Handshake Packing_Stand_7",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "92e65491828266ec",
        "type": "tab",
        "label": "Handshake Packing_Stand_8",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "90605943bab2dc55",
        "type": "tab",
        "label": "Handshake Packing_Stand_9",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1984869b17cac090",
        "type": "tab",
        "label": "Handshake Packing_Stand_10",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ebd156bd64966870",
        "type": "tab",
        "label": "Heartbeat",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4f2c9a5f536c026c",
        "type": "tab",
        "label": "Handshake Packing_Stand_11",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b992f563126ed998",
        "type": "tab",
        "label": "Handshake Packing_Stand_12",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6b85e06aaa6fc609",
        "type": "tab",
        "label": "Handshake Packing_Stand_13",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "56e18617ca26db7a",
        "type": "tab",
        "label": "Handshake H2_Stand_1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "afa7c47f281fbb7a",
        "type": "tab",
        "label": "Handshake H2_Stand_2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "95bab59c27bec3b8",
        "type": "tab",
        "label": "Handshake H2_Stand_3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "eecba73489ce6eee",
        "type": "tab",
        "label": "Handshake H3_Stand_1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a6b2d1089103afac",
        "type": "tab",
        "label": "Handshake H3_Stand_2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0d66e8354a03cb9a",
        "type": "tab",
        "label": "Handshake H3_Stand_3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0645cb67f3ada93f",
        "type": "tab",
        "label": "Handshake H4_Stand_1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6b820bbb857ae99f",
        "type": "tab",
        "label": "Handshake H4_Stand_2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "426fd7d4581043d6",
        "type": "tab",
        "label": "Handshake H4_Stand_3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "518e595be799e7b3",
        "type": "tab",
        "label": "Handshake Reject_Stand_1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f5a695f692b3b5bf",
        "type": "tab",
        "label": "Handshake Reject_Stand_2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b4ab2a318db5acdb",
        "type": "tab",
        "label": "Handshake WH_Conveyor_Pick",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "36ead17ef1395222",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "cd9916258df7b0e6",
        "type": "tab",
        "label": "Area lock test",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "fb5d0743c5e0416a",
        "type": "subflow",
        "name": "TrafficLightArea_Modbus",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 240,
                "wires": [
                    {
                        "id": "f4f55f62b87d366a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 820,
                "y": 240,
                "wires": [
                    {
                        "id": "5965a53dd9514a63",
                        "port": 0
                    }
                ]
            },
            {
                "x": 810,
                "y": 540,
                "wires": [
                    {
                        "id": "5965a53dd9514a63",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Area_Name",
                "type": "str",
                "value": ""
            },
            {
                "name": "Modbus_IP",
                "type": "str",
                "value": ""
            },
            {
                "name": "Adress_Green_1",
                "type": "str",
                "value": ""
            },
            {
                "name": "Adress_Green_2",
                "type": "str",
                "value": ""
            },
            {
                "name": "Adress_Green_3",
                "type": "str",
                "value": ""
            },
            {
                "name": "Adress_Green_4",
                "type": "str",
                "value": ""
            },
            {
                "name": "Adress_Red_1",
                "type": "str",
                "value": ""
            },
            {
                "name": "Adress_Red_2",
                "type": "str",
                "value": ""
            },
            {
                "name": "Adress_Red_3",
                "type": "str",
                "value": ""
            },
            {
                "name": "Adress_Red_4",
                "type": "str",
                "value": ""
            },
            {
                "name": "Area_Name2",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#AAAA66",
        "inputLabels": [
            "Input Area_Name"
        ],
        "outputLabels": [
            "Output for debug node Green light",
            "Output for debug node Red light"
        ],
        "icon": "font-awesome/fa-lightbulb-o"
    },
    {
        "id": "c5522aa8079aa267",
        "type": "subflow",
        "name": "TrafficLightArea_OPC",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 120,
                "y": 200,
                "wires": [
                    {
                        "id": "0d141844e8cb8718"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 900,
                "y": 220,
                "wires": [
                    {
                        "id": "a5768e7220524ed6",
                        "port": 0
                    }
                ]
            },
            {
                "x": 890,
                "y": 480,
                "wires": [
                    {
                        "id": "a5768e7220524ed6",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Area_Name",
                "type": "str",
                "value": ""
            },
            {
                "name": "Adress_Green_1",
                "type": "str",
                "value": ""
            },
            {
                "name": "Adress_Green_2",
                "type": "str",
                "value": ""
            },
            {
                "name": "Adress_Green_3",
                "type": "str",
                "value": ""
            },
            {
                "name": "Adress_Green_4",
                "type": "str",
                "value": ""
            },
            {
                "name": "Adress_Red_1",
                "type": "str",
                "value": ""
            },
            {
                "name": "Adress_Red_2",
                "type": "str",
                "value": ""
            },
            {
                "name": "Adress_Red_3",
                "type": "str",
                "value": ""
            },
            {
                "name": "Adress_Red_4",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#AAAA66",
        "inputLabels": [
            "Area Input"
        ],
        "outputLabels": [
            "Output for debug node Green light",
            "Output for debug node Red light"
        ],
        "icon": "font-awesome/fa-lightbulb-o"
    },
    {
        "id": "b223082bb54781e4",
        "type": "subflow",
        "name": "PickHandshakeOpen",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 180,
                "wires": [
                    {
                        "id": "6bd56e71e33d5690"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "DeviceID",
                "type": "str",
                "value": ""
            },
            {
                "name": "modbusAdress",
                "type": "str",
                "value": ""
            },
            {
                "name": "modbusQuantity",
                "type": "str",
                "value": ""
            },
            {
                "name": "Modbus_IP",
                "type": "str",
                "value": ""
            },
            {
                "name": "locationCode",
                "type": "str",
                "value": ""
            },
            {
                "name": "pickBusy",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "b7fcf1af9d6748c3",
        "type": "subflow",
        "name": "PickHandshakeClose",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 200,
                "wires": [
                    {
                        "id": "243e0f911e311d76"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "DeviceID",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "b0964663ded4b2f3",
        "type": "subflow",
        "name": "Subflow 1",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 140,
                "y": 140,
                "wires": [
                    {
                        "id": "801cfb2e6123492b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 420,
                "y": 180,
                "wires": [
                    {
                        "id": "801cfb2e6123492b",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "DeviceID",
                "type": "str",
                "value": ""
            },
            {
                "name": "locationCode",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "f2ed34c2a4f393ef",
        "type": "subflow",
        "name": "TrafficLightArea_Modbus (2)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 240,
                "wires": [
                    {
                        "id": "6d737f46282b7a6c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1000,
                "y": 240,
                "wires": [
                    {
                        "id": "cde3b2989f0de091",
                        "port": 0
                    }
                ]
            },
            {
                "x": 990,
                "y": 540,
                "wires": [
                    {
                        "id": "cde3b2989f0de091",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Area_Name",
                "type": "str",
                "value": ""
            },
            {
                "name": "Modbus_IP",
                "type": "str",
                "value": ""
            },
            {
                "name": "Adress_Green_1",
                "type": "str",
                "value": ""
            },
            {
                "name": "Adress_Green_2",
                "type": "str",
                "value": ""
            },
            {
                "name": "Adress_Green_3",
                "type": "str",
                "value": ""
            },
            {
                "name": "Adress_Green_4",
                "type": "str",
                "value": ""
            },
            {
                "name": "Adress_Red_1",
                "type": "str",
                "value": ""
            },
            {
                "name": "Adress_Red_2",
                "type": "str",
                "value": ""
            },
            {
                "name": "Adress_Red_3",
                "type": "str",
                "value": ""
            },
            {
                "name": "Adress_Red_4",
                "type": "str",
                "value": ""
            },
            {
                "name": "Area_Name2",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#AAAA66",
        "inputLabels": [
            "Input Area_Name"
        ],
        "outputLabels": [
            "Output for debug node Green light",
            "Output for debug node Red light"
        ],
        "icon": "font-awesome/fa-lightbulb-o"
    },
    {
        "id": "06391e8f2c0303a0",
        "type": "subflow",
        "name": "PickHandshakeOpen (2)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 180,
                "wires": [
                    {
                        "id": "9f818c83c14ae198"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "DeviceID",
                "type": "str",
                "value": ""
            },
            {
                "name": "modbusAdress",
                "type": "str",
                "value": ""
            },
            {
                "name": "modbusQuantity",
                "type": "str",
                "value": ""
            },
            {
                "name": "Modbus_IP",
                "type": "str",
                "value": ""
            },
            {
                "name": "locationCode",
                "type": "str",
                "value": ""
            },
            {
                "name": "pickBusy",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "e72041092ee24115",
        "type": "subflow",
        "name": "Subflow 1 (2)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 140,
                "y": 140,
                "wires": [
                    {
                        "id": "646225c221ce8f24"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 420,
                "y": 180,
                "wires": [
                    {
                        "id": "646225c221ce8f24",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "DeviceID",
                "type": "str",
                "value": ""
            },
            {
                "name": "locationCode",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "5017beefdbb5374f",
        "type": "subflow",
        "name": "OpcUA Write",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 100,
                "wires": [
                    {
                        "id": "c58d25fdd34f2d84"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 700,
                "y": 100,
                "wires": [
                    {
                        "id": "9d469cbeb0a6f93d",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Value",
                "type": "str",
                "value": ""
            },
            {
                "name": "OpcUaItem",
                "type": "str",
                "value": ""
            },
            {
                "name": "DataType",
                "type": "str",
                "value": ""
            },
            {
                "name": "OPCUA_Endpoint",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "9e4aa79399f60d22",
        "type": "subflow",
        "name": "Subflow 2",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 100,
                "wires": [
                    {
                        "id": "1be2ad7e6f96a1d8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 800,
                "y": 100,
                "wires": [
                    {
                        "id": "f147fdda21fd79ad",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "OpcUaItem",
                "type": "str",
                "value": ""
            },
            {
                "name": "DataType",
                "type": "str",
                "value": ""
            },
            {
                "name": "OpcUA_Endpoint",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "4cc4a3bd7d66d150",
        "type": "subflow",
        "name": "Sensor Status to OPC",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 180,
                "y": 80,
                "wires": [
                    {
                        "id": "1141b019566f84fe"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 730,
                "y": 80,
                "wires": [
                    {
                        "id": "1141b019566f84fe",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "OPC_Item",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#3FADB5",
        "inputLabels": [
            "Sensor Input"
        ],
        "outputLabels": [
            "Link to OPC Write"
        ],
        "icon": "node-red/db.svg"
    },
    {
        "id": "002373ce227d5c67",
        "type": "subflow",
        "name": "Read Modbus Inputs",
        "info": "",
        "category": "",
        "in": [],
        "out": [
            {
                "x": 720,
                "y": 40,
                "wires": [
                    {
                        "id": "c353fe1192751e3c",
                        "port": 0
                    }
                ]
            },
            {
                "x": 720,
                "y": 100,
                "wires": [
                    {
                        "id": "c353fe1192751e3c",
                        "port": 1
                    }
                ]
            },
            {
                "x": 720,
                "y": 160,
                "wires": [
                    {
                        "id": "c353fe1192751e3c",
                        "port": 2
                    }
                ]
            },
            {
                "x": 720,
                "y": 220,
                "wires": [
                    {
                        "id": "c353fe1192751e3c",
                        "port": 3
                    }
                ]
            },
            {
                "x": 720,
                "y": 280,
                "wires": [
                    {
                        "id": "c353fe1192751e3c",
                        "port": 4
                    }
                ]
            },
            {
                "x": 720,
                "y": 340,
                "wires": [
                    {
                        "id": "c353fe1192751e3c",
                        "port": 5
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Modbus_IP",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "outputLabels": [
            "Status Input 1",
            "Status Input 2",
            "Status Input 3",
            "Status Input 4",
            "Status Input 5",
            "Status Input 5"
        ],
        "icon": "node-red-contrib-modbus/modbus-icon.png"
    },
    {
        "id": "55149d789023bfa6",
        "type": "modbus-client",
        "z": "fb5d0743c5e0416a",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "$(Modbus_IP)",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "8553a2f3.f365b8",
        "type": "modbus-client",
        "name": "FCB4 ADAM 1",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": false,
        "tcpHost": "10.10.221.25",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 5000,
        "parallelUnitIdsAllowed": false
    },
    {
        "id": "2c97944e3a670113",
        "type": "modbus-client",
        "z": "f2ed34c2a4f393ef",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "$(Modbus_IP)",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "8afe91b60295333b",
        "type": "modbus-client",
        "name": "FCB1 ADAM1",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "10.10.221.20",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "d395581b1150fb7e",
        "type": "modbus-client",
        "name": "FCB1 ADAM2",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "10.10.221.21",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "89a8d1f0ed1f4df2",
        "type": "modbus-client",
        "name": "FCB2 ADAM1",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "10.10.221.22",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "df80b980af8d4283",
        "type": "modbus-client",
        "name": "FCB2 ADAM2",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "10.10.221.23",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "43a0b4825a7b24f2",
        "type": "modbus-client",
        "name": "FCB3 ADAM1",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "10.10.221.24",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "b35ac684c5e83861",
        "type": "modbus-client",
        "name": "FCB5 ADAM1",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "10.10.221.26",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "08967caa27eb9505",
        "type": "modbus-client",
        "name": "FCK5 ADAM2",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "10.10.221.27",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "0fbb0cc388fcfae5",
        "type": "OpcUa-Endpoint",
        "endpoint": "$(OpcUA_Endpoint)",
        "secpol": "None",
        "secmode": "None",
        "none": true,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "230253e2265da00a",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "LES-LITE Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "a78145f6a526bfdc",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "99e332fa72c445c7",
        "type": "ui_tab",
        "name": "Test",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "ee08097582ed440c",
        "type": "ui_group",
        "name": "Traffick Light Crossroad",
        "tab": "99e332fa72c445c7",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "0e137b8a1d350609",
        "type": "ui_group",
        "name": "Traffick Light 3",
        "tab": "a78145f6a526bfdc",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b7133fdc3857d15a",
        "type": "ui_group",
        "name": "Traffic Light Freezer 2",
        "tab": "a78145f6a526bfdc",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "99a90c9c53b2f9c8",
        "type": "ui_group",
        "name": "Traffic Light Packing",
        "tab": "a78145f6a526bfdc",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "12ece35efb75aa92",
        "type": "ui_group",
        "name": "Hanshake Conveyor",
        "tab": "a78145f6a526bfdc",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "fe8473e1905b9b64",
        "type": "ui_group",
        "name": "PickBusy",
        "tab": "a78145f6a526bfdc",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ff05fb0cc2b0ae1e",
        "type": "ui_spacer",
        "z": "42dfa7aa6508f4a9",
        "name": "spacer",
        "group": "0e137b8a1d350609",
        "order": 2,
        "width": 1,
        "height": 1
    },
    {
        "id": "ab4d80ebf525b757",
        "type": "OpcUa-Endpoint",
        "z": "5017beefdbb5374f",
        "endpoint": "$(OPCUA_Endpoint)",
        "secpol": "None",
        "secmode": "None",
        "none": true,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "d7f765b554062f1e",
        "type": "OpcUa-Endpoint",
        "z": "5017beefdbb5374f",
        "endpoint": "$(OPCUA_Endpoint)",
        "secpol": "None",
        "secmode": "None",
        "none": true,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "91acb51cd428cdfe",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://10.10.111.190:4840",
        "secpol": "None",
        "secmode": "None",
        "none": true,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "e016ea226771b887",
        "type": "OpcUa-Endpoint",
        "z": "7eaa40a7bd02263d",
        "endpoint": "$(OPCUA_Endpoint)",
        "secpol": "None",
        "secmode": "None",
        "none": true,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "b428963a5d2a1933",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://10.10.111.10:4840",
        "secpol": "None",
        "secmode": "None",
        "none": true,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "3adca5432f8a885d",
        "type": "modbus-client",
        "z": "002373ce227d5c67",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "$(Modbus_IP)",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "d8e2ced1b63fc79b",
        "type": "ui_tab",
        "name": "Robot 4 ",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "6cf3159fc946b5bc",
        "type": "ui_group",
        "name": "QS",
        "tab": "d8e2ced1b63fc79b",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "102bfaeaf873eaac",
        "type": "comment",
        "z": "fb5d0743c5e0416a",
        "name": "Concept 2: Filter zone and controll separate IO ",
        "info": "This gives the possibility to create\nparametrized trafficlights in subflow:\n- zone name\n- green adress\n- red adress",
        "x": 310,
        "y": 180,
        "wires": []
    },
    {
        "id": "f4f55f62b87d366a",
        "type": "function",
        "z": "fb5d0743c5e0416a",
        "name": "function 3",
        "func": "// Assuming the incoming message object is stored in the variable 'msg'\n// You can access the input set of strings and the given set of strings using msg.payload\nconst givenName = env.get(\"Area_Name\");\nconst givenName2 = env.get(\"Area_Name2\");\ntry {\n    // Check if the required fields are present in the payload\n    if (!msg.payload) {\n        throw new Error(\"Invalid input payload\");\n    }\n\n    // Convert sets to arrays for easier comparison\n    const inputSet = Array.isArray(msg.payload) ? msg.payload : [];\n    //const givenSet = Array.isArray(TrafficLights) ? msg.payload.givenSet : [];\n\n    // Compare sets and create a list of booleans\n    const result = inputSet.includes(givenName) || inputSet.includes(givenName2);\n\n    // Create the output message with the list of booleans\n    msg.payload = result;\n\n    // Return the modified message object\n    return msg;\n\n} catch (error) {\n    // Handle errors\n    msg.payload = {\n        error: error.message || \"Error comparing sets\"\n    };\n\n    // Return the error message\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 240,
        "wires": [
            [
                "5965a53dd9514a63"
            ]
        ]
    },
    {
        "id": "5965a53dd9514a63",
        "type": "switch",
        "z": "fb5d0743c5e0416a",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "false",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "true",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 410,
        "y": 240,
        "wires": [
            [
                "b333a89d4f89e78e",
                "bb1cb032b70108e9",
                "38d5c79646fcc6b9",
                "68fe6a1696a20f7d"
            ],
            [
                "568827a06edcda8a",
                "5a2f9a01518ec04e",
                "f5d468def2120e95",
                "3a9faa6914e97841"
            ]
        ]
    },
    {
        "id": "c517c8681c8ece58",
        "type": "comment",
        "z": "fb5d0743c5e0416a",
        "name": "Output Green",
        "info": "",
        "x": 750,
        "y": 40,
        "wires": []
    },
    {
        "id": "2f8440ad6422edea",
        "type": "comment",
        "z": "fb5d0743c5e0416a",
        "name": "Output Red",
        "info": "",
        "x": 750,
        "y": 340,
        "wires": []
    },
    {
        "id": "b333a89d4f89e78e",
        "type": "modbus-write",
        "z": "fb5d0743c5e0416a",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "$(Adress_Green_1)",
        "quantity": "1",
        "server": "55149d789023bfa6",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 760,
        "y": 80,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "568827a06edcda8a",
        "type": "modbus-write",
        "z": "fb5d0743c5e0416a",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "$(Adress_Red_1)",
        "quantity": "1",
        "server": "55149d789023bfa6",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 760,
        "y": 380,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "68fe6a1696a20f7d",
        "type": "modbus-write",
        "z": "fb5d0743c5e0416a",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "$(Adress_Green_2)",
        "quantity": "1",
        "server": "55149d789023bfa6",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 760,
        "y": 120,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "38d5c79646fcc6b9",
        "type": "modbus-write",
        "z": "fb5d0743c5e0416a",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "$(Adress_Green_3)",
        "quantity": "1",
        "server": "55149d789023bfa6",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 760,
        "y": 160,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "bb1cb032b70108e9",
        "type": "modbus-write",
        "z": "fb5d0743c5e0416a",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "$(Adress_Green_4)",
        "quantity": "1",
        "server": "55149d789023bfa6",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 760,
        "y": 200,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "3a9faa6914e97841",
        "type": "modbus-write",
        "z": "fb5d0743c5e0416a",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "$(Adress_Red_2)",
        "quantity": "1",
        "server": "55149d789023bfa6",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 760,
        "y": 420,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "f5d468def2120e95",
        "type": "modbus-write",
        "z": "fb5d0743c5e0416a",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "$(Adress_Red_3)",
        "quantity": "1",
        "server": "55149d789023bfa6",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 760,
        "y": 460,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "5a2f9a01518ec04e",
        "type": "modbus-write",
        "z": "fb5d0743c5e0416a",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "$(Adress_Red_4)",
        "quantity": "1",
        "server": "55149d789023bfa6",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 760,
        "y": 500,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "9b27bdc8afb04f01",
        "type": "comment",
        "z": "c5522aa8079aa267",
        "name": "Concept 2: Filter zone and controll separate IO ",
        "info": "This gives the possibility to create\nparametrized trafficlights in subflow:\n- zone name\n- green adress\n- red adress",
        "x": 370,
        "y": 140,
        "wires": []
    },
    {
        "id": "0d141844e8cb8718",
        "type": "function",
        "z": "c5522aa8079aa267",
        "name": "function 5",
        "func": "// Assuming the incoming message object is stored in the variable 'msg'\n// You can access the input set of strings and the given set of strings using msg.payload\nconst givenName = env.get(\"Name\");\ntry {\n    // Check if the required fields are present in the payload\n    if (!msg.payload) {\n        throw new Error(\"Invalid input payload\");\n    }\n\n    // Convert sets to arrays for easier comparison\n    const inputSet = Array.isArray(msg.payload) ? msg.payload : [];\n    //const givenSet = Array.isArray(TrafficLights) ? msg.payload.givenSet : [];\n\n    // Compare sets and create a list of booleans\n    const result = inputSet.includes(givenName);\n\n    // Create the output message with the list of booleans\n    msg.payload = result;\n\n    // Return the modified message object\n    return msg;\n\n} catch (error) {\n    // Handle errors\n    msg.payload = {\n        error: error.message || \"Error comparing sets\"\n    };\n\n    // Return the error message\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 200,
        "wires": [
            [
                "a5768e7220524ed6"
            ]
        ]
    },
    {
        "id": "a5768e7220524ed6",
        "type": "switch",
        "z": "c5522aa8079aa267",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "false",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "true",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 200,
        "wires": [
            [
                "9e115eeab644fc7d",
                "ff3eac7d64f2f414",
                "e03c815e7f5891ac",
                "eda65fa9664d7c6c"
            ],
            [
                "55fa0174421cdc45",
                "825fa5f0eac3a99c",
                "0ae4f6058b161df9",
                "681cad88a895c351"
            ]
        ]
    },
    {
        "id": "b1a9da9b59b316ad",
        "type": "comment",
        "z": "c5522aa8079aa267",
        "name": "Output Green",
        "info": "",
        "x": 830,
        "y": 20,
        "wires": []
    },
    {
        "id": "c38ede499f59d7aa",
        "type": "comment",
        "z": "c5522aa8079aa267",
        "name": "Output Red",
        "info": "",
        "x": 830,
        "y": 280,
        "wires": []
    },
    {
        "id": "9e115eeab644fc7d",
        "type": "OpcUa-Item",
        "z": "c5522aa8079aa267",
        "item": "$(Adress_Green_1)",
        "datatype": "Int64",
        "value": "1",
        "name": "",
        "x": 840,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "ff3eac7d64f2f414",
        "type": "OpcUa-Item",
        "z": "c5522aa8079aa267",
        "item": "$(Adress_Green_2)",
        "datatype": "Int64",
        "value": "1",
        "name": "",
        "x": 840,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "e03c815e7f5891ac",
        "type": "OpcUa-Item",
        "z": "c5522aa8079aa267",
        "item": "$(Adress_Green_3)",
        "datatype": "Int64",
        "value": "1",
        "name": "",
        "x": 840,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "eda65fa9664d7c6c",
        "type": "OpcUa-Item",
        "z": "c5522aa8079aa267",
        "item": "$(Adress_Green_4)",
        "datatype": "Int64",
        "value": "1",
        "name": "",
        "x": 840,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "681cad88a895c351",
        "type": "OpcUa-Item",
        "z": "c5522aa8079aa267",
        "item": "$(Adress_Red_1)",
        "datatype": "Int64",
        "value": "1",
        "name": "",
        "x": 840,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "0ae4f6058b161df9",
        "type": "OpcUa-Item",
        "z": "c5522aa8079aa267",
        "item": "$(Adress_Red_2)",
        "datatype": "Int64",
        "value": "1",
        "name": "",
        "x": 840,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "825fa5f0eac3a99c",
        "type": "OpcUa-Item",
        "z": "c5522aa8079aa267",
        "item": "$(Adress_Red_3)",
        "datatype": "Int64",
        "value": "1",
        "name": "",
        "x": 840,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "55fa0174421cdc45",
        "type": "OpcUa-Item",
        "z": "c5522aa8079aa267",
        "item": "$(Adress_Red_4)",
        "datatype": "Int64",
        "value": "1",
        "name": "",
        "x": 840,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "8be5a5538e9095d0",
        "type": "function",
        "z": "c5522aa8079aa267",
        "name": "Data Type Select",
        "func": "// Example code for setting OPC data type based on payload value\nvar payloadValue = msg.payload; // Change this line based on your payload structure\nvar opcDataType;\n\n// Logic to determine OPC data type based on payload value\nif (payloadValue === 'int8') {\n    opcDataType = 'Int8';\n} else if (payloadValue === 'int16') {\n    opcDataType = 'Int16';\n} else {\n    // Default to a fallback data type if needed\n    opcDataType = 'DefaultType';\n}\n\n// Set the OPC data type in the message\nmsg.opcDataType = opcDataType;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "6bd56e71e33d5690",
        "type": "function",
        "z": "b223082bb54781e4",
        "name": "function 16",
        "func": "const givenName = env.get(\"DeviceID\");\n\nif (msg.payload.doorCode === givenName) {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 180,
        "wires": [
            [
                "1dd17b8ec1c8d140"
            ]
        ]
    },
    {
        "id": "279779eb3a2ae8c4",
        "type": "function",
        "z": "b223082bb54781e4",
        "name": "save request arg",
        "func": "\nvar response=msg.payload\nresponse.actionCode='OPEN'\nnode.warn(response)\n//151 IP\nif (response.doorCode != undefined && response.doorCode == \"DeviceID\"){\n    flow.set(\"openArg\", response)\n    return [msg,null,null,null,null,null,null,null,null]\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "1dd17b8ec1c8d140",
        "type": "function",
        "z": "b223082bb54781e4",
        "name": "save open door args",
        "func": "msg.parameter = msg.payload\nnode.warn(\"Send pick Request\");\n//node.warn(msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 180,
        "wires": [
            [
                "279779eb3a2ae8c4",
                "1476b0b0319e7be6"
            ]
        ]
    },
    {
        "id": "1476b0b0319e7be6",
        "type": "function",
        "z": "b223082bb54781e4",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 60,
        "wires": [
            [
                "362d61ffde777685"
            ]
        ]
    },
    {
        "id": "f9eae747c44e79f7",
        "type": "inject",
        "z": "b223082bb54781e4",
        "name": "monitor door open",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 340,
        "wires": [
            [
                "59f271c94afb02a2"
            ]
        ]
    },
    {
        "id": "59f271c94afb02a2",
        "type": "function",
        "z": "b223082bb54781e4",
        "name": "get saved request arg",
        "func": "//读取modbus的值,只有读到了1,并且有当前请求开门的参数的时候该流程继续往下走\nvar readData=msg.payload\nreadData=[true]\nnode.warn(\"PickEnable\");\nvar requestArg=flow.get(\"openArg\")\n\nif (requestArg != undefined && requestArg != null && requestArg.requestId!=undefined)\n{\n    //表明当前门开了\n    if (readData && readData != undefined && readData[0] == true) \n    {\n        //构造请求的参数\n        msg.payload=requestArg\n        return msg\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 300,
        "wires": [
            [
                "31c98b2648e2cb8b"
            ]
        ]
    },
    {
        "id": "6f8a6133619c4d83",
        "type": "modbus-read",
        "z": "b223082bb54781e4",
        "name": "",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Input",
        "adr": "$(modbusAdress)",
        "quantity": "$(modbusQuantity)",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "8553a2f3.f365b8",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 210,
        "y": 300,
        "wires": [
            [
                "59f271c94afb02a2"
            ],
            []
        ]
    },
    {
        "id": "85b10f4425d3b2ce",
        "type": "comment",
        "z": "b223082bb54781e4",
        "name": "Pick Request",
        "info": "",
        "x": 190,
        "y": 120,
        "wires": []
    },
    {
        "id": "4e35da85e8684969",
        "type": "comment",
        "z": "b223082bb54781e4",
        "name": "Pick Request Enable",
        "info": "",
        "x": 210,
        "y": 260,
        "wires": []
    },
    {
        "id": "886e47a47736fe39",
        "type": "inject",
        "z": "b223082bb54781e4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 480,
        "wires": [
            [
                "bbe1b1528e7e9ca3"
            ]
        ]
    },
    {
        "id": "bbe1b1528e7e9ca3",
        "type": "function",
        "z": "b223082bb54781e4",
        "name": "function 21",
        "func": "var pointCodes = global.get(\"pointCodes\") || [];\n\n// Static value to compare\nvar staticValue = env.get(\"locationCode\");\n\n// Check if the static value is in the pointCodes list\nif (pointCodes.includes(staticValue)) {\n    // If there's a match, return timestamp in msg.payload\n    msg.payload = new Date().toISOString();\n    return msg;\n} else {\n    // If there's no match, return an empty payload\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 480,
        "wires": [
            [
                "223a63b6046d441a"
            ]
        ]
    },
    {
        "id": "223a63b6046d441a",
        "type": "function",
        "z": "b223082bb54781e4",
        "name": "function 22",
        "func": "node.warn(\"PickBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 480,
        "wires": [
            [
                "67882d8945a4b344"
            ]
        ]
    },
    {
        "id": "67882d8945a4b344",
        "type": "modbus-write",
        "z": "b223082bb54781e4",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "$(pickBusy)",
        "quantity": "1",
        "server": "8553a2f3.f365b8",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 780,
        "y": 480,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "8473aaaee78e4a9b",
        "type": "comment",
        "z": "b223082bb54781e4",
        "name": "Write Pick Busy",
        "info": "",
        "x": 180,
        "y": 440,
        "wires": []
    },
    {
        "id": "31c98b2648e2cb8b",
        "type": "http request",
        "z": "b223082bb54781e4",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.203.207.87:9003/api/quicktron/door/command-finish",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 930,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "362d61ffde777685",
        "type": "http response",
        "z": "b223082bb54781e4",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 920,
        "y": 60,
        "wires": []
    },
    {
        "id": "243e0f911e311d76",
        "type": "function",
        "z": "b7fcf1af9d6748c3",
        "name": "function 17",
        "func": "const givenName = env.get(\"DeviceID\");\n\nif (msg.payload.doorCode === givenName) {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 200,
        "wires": [
            [
                "b5472e8618c25704"
            ]
        ]
    },
    {
        "id": "71e521c2a2d6cb37",
        "type": "comment",
        "z": "b7fcf1af9d6748c3",
        "name": "Pick Request",
        "info": "",
        "x": 190,
        "y": 140,
        "wires": []
    },
    {
        "id": "e60866ce1485014a",
        "type": "function",
        "z": "b7fcf1af9d6748c3",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nnode.log(msg);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 80,
        "wires": [
            [
                "d4ecb7370f747baa"
            ]
        ]
    },
    {
        "id": "be74fe576331d67a",
        "type": "function",
        "z": "b7fcf1af9d6748c3",
        "name": "save close door arg",
        "func": "msg.parameter=msg.payload\nglobal.set(\"closeArg\",msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 100,
        "wires": [
            [
                "e60866ce1485014a"
            ]
        ]
    },
    {
        "id": "b5472e8618c25704",
        "type": "function",
        "z": "b7fcf1af9d6748c3",
        "name": "save close door args",
        "func": "\nmsg.parameter = msg.payload\nnode.warn(\"close door request\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 200,
        "wires": [
            [
                "be74fe576331d67a",
                "a46d56a0e9290172"
            ]
        ]
    },
    {
        "id": "a46d56a0e9290172",
        "type": "function",
        "z": "b7fcf1af9d6748c3",
        "name": "write to modbus？？？",
        "func": "\nvar response=msg.payload\n//151 IP\nif (response.doorCode != undefined && response.doorCode == \"deviceID\"){\n    return [msg, null, null, null, null, null, null, null, null]\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "d4ecb7370f747baa",
        "type": "http response",
        "z": "b7fcf1af9d6748c3",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1060,
        "y": 80,
        "wires": []
    },
    {
        "id": "801cfb2e6123492b",
        "type": "function",
        "z": "b0964663ded4b2f3",
        "name": "function 24",
        "func": "const givenName = env.get(\"DeviceID\");\n\nif (msg.payload.doorCode === givenName) {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 140,
        "wires": [
            [
                "271f60397d4e5677"
            ]
        ]
    },
    {
        "id": "35531bc8ec53c825",
        "type": "comment",
        "z": "b0964663ded4b2f3",
        "name": "Pick Request",
        "info": "",
        "x": 310,
        "y": 100,
        "wires": []
    },
    {
        "id": "f0d99c480215ad12",
        "type": "function",
        "z": "b0964663ded4b2f3",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 40,
        "wires": [
            [
                "f68697756a05fc98"
            ]
        ]
    },
    {
        "id": "f68697756a05fc98",
        "type": "http response",
        "z": "b0964663ded4b2f3",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 900,
        "y": 40,
        "wires": []
    },
    {
        "id": "bf69d7b002e6ffea",
        "type": "function",
        "z": "b0964663ded4b2f3",
        "name": "save request arg",
        "func": "\nvar response=msg.payload\nresponse.actionCode='OPEN'\nnode.warn(response)\n//151 IP\nif (response.doorCode != undefined && response.doorCode == \"DeviceID\"){\n    flow.set(\"openArg\", response)\n    return [msg,null,null,null,null,null,null,null,null]\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "271f60397d4e5677",
        "type": "function",
        "z": "b0964663ded4b2f3",
        "name": "save open door args",
        "func": "msg.parameter = msg.payload\nnode.warn(\"receive open door args\");\nnode.warn(msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 140,
        "wires": [
            [
                "bf69d7b002e6ffea",
                "f0d99c480215ad12"
            ]
        ]
    },
    {
        "id": "99cc304a1f7153cb",
        "type": "inject",
        "z": "b0964663ded4b2f3",
        "name": "monitor door open",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 280,
        "wires": [
            [
                "1747ae37af01d4cf"
            ]
        ]
    },
    {
        "id": "138507be77f26e67",
        "type": "http request",
        "z": "b0964663ded4b2f3",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.203.207.87:9003/api/quicktron/door/command-finish",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 810,
        "y": 280,
        "wires": [
            [
                "1a7d8996d7ec6569"
            ]
        ]
    },
    {
        "id": "1747ae37af01d4cf",
        "type": "function",
        "z": "b0964663ded4b2f3",
        "name": "get saved request arg",
        "func": "//读取modbus的值,只有读到了1,并且有当前请求开门的参数的时候该流程继续往下走\nvar readData=msg.payload\nreadData=[true]\nvar requestArg=flow.get(\"openArg\")\n\nif (requestArg != undefined && requestArg != null && requestArg.requestId!=undefined)\n{\n    //表明当前门开了\n    if (readData && readData != undefined && readData[0] == true) \n    {\n        //构造请求的参数\n        msg.payload=requestArg\n        flow.set(\"openArg\", null)\n        return msg\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 280,
        "wires": [
            [
                "138507be77f26e67"
            ]
        ]
    },
    {
        "id": "1a7d8996d7ec6569",
        "type": "function",
        "z": "b0964663ded4b2f3",
        "name": "rcs response",
        "func": "var response=msg.payload\n//如果Rcs返回的值为true,表示已经接收了,清除掉当前的参数标识符\nnode.warn(\"门开151回报的参数:::\")\nnode.warn(response)\nif(response!=undefined && response!=null && response.success==true){\n    global.set(\"openArg\",null)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "c2d9df4c22eda8e8",
        "type": "function",
        "z": "b0964663ded4b2f3",
        "name": "function 36",
        "func": "//node.warn(\"auto out\");\nvar requestArg = flow.get(\"openArg\")\nvar staticValue = env.get(\"locationCode\");;\nvar pointCodes = global.get(\"pointCodes\") || [];\n\nif (requestArg != undefined && requestArg != null && requestArg.requestId != undefined) {\n    //表明当前门开了\n        if (staticValue && pointCodes.includes(staticValue)) {\n        //构造请求的参数\n        msg.payload = requestArg\n        return msg\n    }\n}\n//node.warn(requestArg);\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 340,
        "wires": [
            [
                "1747ae37af01d4cf"
            ]
        ]
    },
    {
        "id": "6fc0cfc80a1ef9e1",
        "type": "inject",
        "z": "b0964663ded4b2f3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 340,
        "wires": [
            [
                "c2d9df4c22eda8e8"
            ]
        ]
    },
    {
        "id": "1a8dcd5707683824",
        "type": "comment",
        "z": "f2ed34c2a4f393ef",
        "name": "Concept 2: Filter zone and controll separate IO ",
        "info": "This gives the possibility to create\nparametrized trafficlights in subflow:\n- zone name\n- green adress\n- red adress",
        "x": 310,
        "y": 180,
        "wires": []
    },
    {
        "id": "6d737f46282b7a6c",
        "type": "function",
        "z": "f2ed34c2a4f393ef",
        "name": "function 3",
        "func": "// Assuming the incoming message object is stored in the variable 'msg'\n// You can access the input set of strings and the given set of strings using msg.payload\nconst givenName = env.get(\"Area_Name\");\nconst givenName2 = env.get(\"Area_Name2\");\ntry {\n    // Check if the required fields are present in the payload\n    if (!msg.payload) {\n        throw new Error(\"Invalid input payload\");\n    }\n\n    // Convert sets to arrays for easier comparison\n    const inputSet = Array.isArray(msg.payload) ? msg.payload : [];\n    //const givenSet = Array.isArray(TrafficLights) ? msg.payload.givenSet : [];\n\n    // Compare sets and create a list of booleans\n    const result = inputSet.includes(givenName) || inputSet.includes(givenName2);\n\n    // Create the output message with the list of booleans\n    msg.payload = result;\n\n    // Return the modified message object\n    return msg;\n\n} catch (error) {\n    // Handle errors\n    msg.payload = {\n        error: error.message || \"Error comparing sets\"\n    };\n\n    // Return the error message\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 240,
        "wires": [
            [
                "cde3b2989f0de091"
            ]
        ]
    },
    {
        "id": "cde3b2989f0de091",
        "type": "switch",
        "z": "f2ed34c2a4f393ef",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "false",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "true",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 410,
        "y": 240,
        "wires": [
            [
                "fd8759f6e0844342",
                "d291419b42931e08"
            ],
            [
                "33736827795ddb7b",
                "3b6deab91c229fec"
            ]
        ]
    },
    {
        "id": "5477e3393ce07594",
        "type": "comment",
        "z": "f2ed34c2a4f393ef",
        "name": "Output Green",
        "info": "",
        "x": 930,
        "y": 40,
        "wires": []
    },
    {
        "id": "bc412a9bb6c58099",
        "type": "comment",
        "z": "f2ed34c2a4f393ef",
        "name": "Output Red",
        "info": "",
        "x": 930,
        "y": 340,
        "wires": []
    },
    {
        "id": "3734bf7dd7b09f4d",
        "type": "modbus-write",
        "z": "f2ed34c2a4f393ef",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "$(Adress_Green_1)",
        "quantity": "1",
        "server": "2c97944e3a670113",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 940,
        "y": 80,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "c1b964b2061d78f8",
        "type": "modbus-write",
        "z": "f2ed34c2a4f393ef",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "$(Adress_Red_1)",
        "quantity": "1",
        "server": "2c97944e3a670113",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 940,
        "y": 380,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "9e8c1df7db938380",
        "type": "modbus-write",
        "z": "f2ed34c2a4f393ef",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "$(Adress_Green_2)",
        "quantity": "1",
        "server": "2c97944e3a670113",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 940,
        "y": 120,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "2b2f256ae368b5a2",
        "type": "modbus-write",
        "z": "f2ed34c2a4f393ef",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "$(Adress_Green_3)",
        "quantity": "1",
        "server": "2c97944e3a670113",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 940,
        "y": 160,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "cf874d868ced6ba5",
        "type": "modbus-write",
        "z": "f2ed34c2a4f393ef",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "$(Adress_Green_4)",
        "quantity": "1",
        "server": "2c97944e3a670113",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 940,
        "y": 200,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "22c7b5524e4503c4",
        "type": "modbus-write",
        "z": "f2ed34c2a4f393ef",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "$(Adress_Red_2)",
        "quantity": "1",
        "server": "2c97944e3a670113",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 940,
        "y": 420,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "4930219e0fed12b4",
        "type": "modbus-write",
        "z": "f2ed34c2a4f393ef",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "$(Adress_Red_3)",
        "quantity": "1",
        "server": "2c97944e3a670113",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 940,
        "y": 460,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "1745c638459dbe59",
        "type": "modbus-write",
        "z": "f2ed34c2a4f393ef",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "$(Adress_Red_4)",
        "quantity": "1",
        "server": "2c97944e3a670113",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 940,
        "y": 500,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "33736827795ddb7b",
        "type": "function",
        "z": "f2ed34c2a4f393ef",
        "name": "function 74",
        "func": "// Example code for resetting a Modbus output\nmsg.payload = {\n    value: 0,  // Set the value you want to write to the Modbus address\n};\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 340,
        "wires": [
            [
                "3734bf7dd7b09f4d",
                "9e8c1df7db938380",
                "2b2f256ae368b5a2",
                "cf874d868ced6ba5"
            ]
        ]
    },
    {
        "id": "fd8759f6e0844342",
        "type": "function",
        "z": "f2ed34c2a4f393ef",
        "name": "function 73",
        "func": "msg.payload = {\n    value: 0,  // Set the value you want to write to the Modbus address\n};\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 180,
        "wires": [
            [
                "c1b964b2061d78f8",
                "22c7b5524e4503c4",
                "4930219e0fed12b4",
                "1745c638459dbe59"
            ]
        ]
    },
    {
        "id": "d291419b42931e08",
        "type": "function",
        "z": "f2ed34c2a4f393ef",
        "name": "function 75",
        "func": "msg.payload = {\n    value: 1,  // Set the value you want to write to the Modbus address\n};\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 140,
        "wires": [
            [
                "3734bf7dd7b09f4d",
                "9e8c1df7db938380",
                "2b2f256ae368b5a2",
                "cf874d868ced6ba5"
            ]
        ]
    },
    {
        "id": "3b6deab91c229fec",
        "type": "function",
        "z": "f2ed34c2a4f393ef",
        "name": "function 76",
        "func": "// Example code for resetting a Modbus output\nmsg.payload = {\n    value: 1,  // Set the value you want to write to the Modbus address\n};\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 300,
        "wires": [
            [
                "c1b964b2061d78f8",
                "22c7b5524e4503c4",
                "4930219e0fed12b4",
                "1745c638459dbe59"
            ]
        ]
    },
    {
        "id": "9f818c83c14ae198",
        "type": "function",
        "z": "06391e8f2c0303a0",
        "name": "function 16",
        "func": "const givenName = env.get(\"DeviceID\");\n\nif (msg.payload.doorCode === givenName) {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 180,
        "wires": [
            [
                "673a7ab14e03582f"
            ]
        ]
    },
    {
        "id": "ff56690ae3e26977",
        "type": "function",
        "z": "06391e8f2c0303a0",
        "name": "save request arg",
        "func": "\nvar response=msg.payload\nresponse.actionCode='OPEN'\nnode.warn(response)\n//151 IP\nif (response.doorCode != undefined && response.doorCode == \"DeviceID\"){\n    flow.set(\"openArg\", response)\n    return [msg,null,null,null,null,null,null,null,null]\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "673a7ab14e03582f",
        "type": "function",
        "z": "06391e8f2c0303a0",
        "name": "save open door args",
        "func": "msg.parameter = msg.payload\nnode.warn(\"Send pick Request\");\n//node.warn(msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 180,
        "wires": [
            [
                "ff56690ae3e26977",
                "f301c068809e9b61"
            ]
        ]
    },
    {
        "id": "f301c068809e9b61",
        "type": "function",
        "z": "06391e8f2c0303a0",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 60,
        "wires": [
            [
                "6734510f15aaec63"
            ]
        ]
    },
    {
        "id": "ff82325ab1667cf0",
        "type": "inject",
        "z": "06391e8f2c0303a0",
        "name": "monitor door open",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 340,
        "wires": [
            [
                "01bf853017bab034"
            ]
        ]
    },
    {
        "id": "01bf853017bab034",
        "type": "function",
        "z": "06391e8f2c0303a0",
        "name": "get saved request arg",
        "func": "//读取modbus的值,只有读到了1,并且有当前请求开门的参数的时候该流程继续往下走\nvar readData=msg.payload\nreadData=[true]\nnode.warn(\"PickEnable\");\nvar requestArg=flow.get(\"openArg\")\n\nif (requestArg != undefined && requestArg != null && requestArg.requestId!=undefined)\n{\n    //表明当前门开了\n    if (readData && readData != undefined && readData[0] == true) \n    {\n        //构造请求的参数\n        msg.payload=requestArg\n        return msg\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 300,
        "wires": [
            [
                "49521219383713c2"
            ]
        ]
    },
    {
        "id": "5038b9bc93c6604c",
        "type": "modbus-read",
        "z": "06391e8f2c0303a0",
        "name": "",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Input",
        "adr": "$(modbusAdress)",
        "quantity": "$(modbusQuantity)",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "8553a2f3.f365b8",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 210,
        "y": 300,
        "wires": [
            [
                "01bf853017bab034"
            ],
            []
        ]
    },
    {
        "id": "ff467a391882ebce",
        "type": "comment",
        "z": "06391e8f2c0303a0",
        "name": "Pick Request",
        "info": "",
        "x": 190,
        "y": 120,
        "wires": []
    },
    {
        "id": "a28d3a56553e17ed",
        "type": "comment",
        "z": "06391e8f2c0303a0",
        "name": "Pick Request Enable",
        "info": "",
        "x": 210,
        "y": 260,
        "wires": []
    },
    {
        "id": "654c5bfd075a2529",
        "type": "inject",
        "z": "06391e8f2c0303a0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 480,
        "wires": [
            [
                "4e2c3bb1a33ef53f"
            ]
        ]
    },
    {
        "id": "4e2c3bb1a33ef53f",
        "type": "function",
        "z": "06391e8f2c0303a0",
        "name": "function 21",
        "func": "var pointCodes = global.get(\"pointCodes\") || [];\n\n// Static value to compare\nvar staticValue = env.get(\"locationCode\");\n\n// Check if the static value is in the pointCodes list\nif (pointCodes.includes(staticValue)) {\n    // If there's a match, return timestamp in msg.payload\n    msg.payload = new Date().toISOString();\n    return msg;\n} else {\n    // If there's no match, return an empty payload\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 480,
        "wires": [
            [
                "522628159b5629f4"
            ]
        ]
    },
    {
        "id": "522628159b5629f4",
        "type": "function",
        "z": "06391e8f2c0303a0",
        "name": "function 22",
        "func": "node.warn(\"PickBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 480,
        "wires": [
            [
                "c25b98e46f02b603"
            ]
        ]
    },
    {
        "id": "c25b98e46f02b603",
        "type": "modbus-write",
        "z": "06391e8f2c0303a0",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "$(pickBusy)",
        "quantity": "1",
        "server": "8553a2f3.f365b8",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 780,
        "y": 480,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "4d016afc41a3e460",
        "type": "comment",
        "z": "06391e8f2c0303a0",
        "name": "Write Pick Busy",
        "info": "",
        "x": 180,
        "y": 440,
        "wires": []
    },
    {
        "id": "49521219383713c2",
        "type": "http request",
        "z": "06391e8f2c0303a0",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/door/command-finish",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 930,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "6734510f15aaec63",
        "type": "http response",
        "z": "06391e8f2c0303a0",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 920,
        "y": 60,
        "wires": []
    },
    {
        "id": "646225c221ce8f24",
        "type": "function",
        "z": "e72041092ee24115",
        "name": "function 24",
        "func": "const givenName = env.get(\"DeviceID\");\n\nif (msg.payload.doorCode === givenName) {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 140,
        "wires": [
            [
                "a349a204c95b2c40"
            ]
        ]
    },
    {
        "id": "982f0222f83a3b52",
        "type": "comment",
        "z": "e72041092ee24115",
        "name": "Pick Request",
        "info": "",
        "x": 310,
        "y": 100,
        "wires": []
    },
    {
        "id": "af9a7f33959803b1",
        "type": "function",
        "z": "e72041092ee24115",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 40,
        "wires": [
            [
                "643c13418760a3c4"
            ]
        ]
    },
    {
        "id": "643c13418760a3c4",
        "type": "http response",
        "z": "e72041092ee24115",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 900,
        "y": 40,
        "wires": []
    },
    {
        "id": "68d3db397ce3b27e",
        "type": "function",
        "z": "e72041092ee24115",
        "name": "save request arg",
        "func": "\nvar response=msg.payload\nresponse.actionCode='OPEN'\nnode.warn(response)\n//151 IP\nif (response.doorCode != undefined && response.doorCode == \"DeviceID\"){\n    flow.set(\"openArg\", response)\n    return [msg,null,null,null,null,null,null,null,null]\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "a349a204c95b2c40",
        "type": "function",
        "z": "e72041092ee24115",
        "name": "save open door args",
        "func": "msg.parameter = msg.payload\nnode.warn(\"receive open door args\");\nnode.warn(msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 140,
        "wires": [
            [
                "68d3db397ce3b27e",
                "af9a7f33959803b1"
            ]
        ]
    },
    {
        "id": "7033d820c4aa2796",
        "type": "inject",
        "z": "e72041092ee24115",
        "name": "monitor door open",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 280,
        "wires": [
            [
                "28735dbdab32b94b"
            ]
        ]
    },
    {
        "id": "c5266d8fe6897a01",
        "type": "http request",
        "z": "e72041092ee24115",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/door/command-finish",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 810,
        "y": 280,
        "wires": [
            [
                "8333ebef69572276"
            ]
        ]
    },
    {
        "id": "28735dbdab32b94b",
        "type": "function",
        "z": "e72041092ee24115",
        "name": "get saved request arg",
        "func": "//读取modbus的值,只有读到了1,并且有当前请求开门的参数的时候该流程继续往下走\nvar readData=msg.payload\nreadData=[true]\nvar requestArg=flow.get(\"openArg\")\n\nif (requestArg != undefined && requestArg != null && requestArg.requestId!=undefined)\n{\n    //表明当前门开了\n    if (readData && readData != undefined && readData[0] == true) \n    {\n        //构造请求的参数\n        msg.payload=requestArg\n        flow.set(\"openArg\", null)\n        return msg\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 280,
        "wires": [
            [
                "c5266d8fe6897a01"
            ]
        ]
    },
    {
        "id": "8333ebef69572276",
        "type": "function",
        "z": "e72041092ee24115",
        "name": "rcs response",
        "func": "var response=msg.payload\n//如果Rcs返回的值为true,表示已经接收了,清除掉当前的参数标识符\nnode.warn(\"门开151回报的参数:::\")\nnode.warn(response)\nif(response!=undefined && response!=null && response.success==true){\n    global.set(\"openArg\",null)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "7a719474ed607891",
        "type": "function",
        "z": "e72041092ee24115",
        "name": "function 36",
        "func": "//node.warn(\"auto out\");\nvar requestArg = flow.get(\"openArg\")\nvar staticValue = env.get(\"locationCode\");;\nvar pointCodes = global.get(\"pointCodes\") || [];\n\nif (requestArg != undefined && requestArg != null && requestArg.requestId != undefined) {\n    //表明当前门开了\n        if (staticValue && pointCodes.includes(staticValue)) {\n        //构造请求的参数\n        msg.payload = requestArg\n        return msg\n    }\n}\n//node.warn(requestArg);\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 340,
        "wires": [
            [
                "28735dbdab32b94b"
            ]
        ]
    },
    {
        "id": "3baaf51e1acff51c",
        "type": "inject",
        "z": "e72041092ee24115",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 340,
        "wires": [
            [
                "7a719474ed607891"
            ]
        ]
    },
    {
        "id": "c58d25fdd34f2d84",
        "type": "function",
        "z": "5017beefdbb5374f",
        "name": "function 82",
        "func": "// Set msg.payload to the environment value 'Value'\nmsg.payload = env.get('Value');\n\n// Set msg.topic to the environment value 'OpcUaItem'\nmsg.topic = env.get('OpcUaItem');\n\n// Set msg.datatype to the environment value 'DataType'\nmsg.datatype = env.get('DataType');\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 100,
        "wires": [
            [
                "9d469cbeb0a6f93d"
            ]
        ]
    },
    {
        "id": "9d469cbeb0a6f93d",
        "type": "OpcUa-Client",
        "z": "5017beefdbb5374f",
        "endpoint": "d7f765b554062f1e",
        "action": "write",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "useTransport": false,
        "maxChunkCount": 1,
        "maxMessageSize": 8192,
        "receiveBufferSize": 8192,
        "sendBufferSize": 8192,
        "name": "",
        "x": 500,
        "y": 100,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "1be2ad7e6f96a1d8",
        "type": "function",
        "z": "9e4aa79399f60d22",
        "name": "function 83",
        "func": "// Set msg.payload to the environment value 'Value'\nmsg.payload = env.get('Value');\n\n// Set msg.topic to the environment value 'OpcUaItem'\nmsg.topic = env.get('OpcUaItem');\n\n// Set msg.datatype to the environment value 'DataType'\nmsg.datatype = env.get('DataType');\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 100,
        "wires": [
            [
                "f147fdda21fd79ad"
            ]
        ]
    },
    {
        "id": "f147fdda21fd79ad",
        "type": "OpcUa-Client",
        "z": "9e4aa79399f60d22",
        "endpoint": "0fbb0cc388fcfae5",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "useTransport": false,
        "maxChunkCount": 1,
        "maxMessageSize": 8192,
        "receiveBufferSize": 8192,
        "sendBufferSize": 8192,
        "name": "",
        "x": 600,
        "y": 100,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "1141b019566f84fe",
        "type": "function",
        "z": "4cc4a3bd7d66d150",
        "name": "Write Sensor status to OPC",
        "func": "var firstValue = msg.payload[0];\nconst OPC_Item = env.get(\"OPC_Item\");\n\nif (firstValue === true) \n{\n// Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = OPC_Item;\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\nelse if (firstValue === false) {\n// Set msg.payload to true\n    msg.payload = false;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = OPC_Item;\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "c353fe1192751e3c",
        "type": "function",
        "z": "002373ce227d5c67",
        "name": "Input arrey parse",
        "func": "// Get the input array from the msg.payload\nvar inputArray = msg.payload;\n\n// Process the input array\nvar output = processArray(inputArray);\n\n\n// Define the function to process the input array\nfunction processArray(inputArray) {\n    var output = {\n        output1: inputArray[0],\n        output2: inputArray[1],\n        output3: inputArray[2],\n        output4: inputArray[3],\n        output5: inputArray[4],\n        output6: inputArray[5]\n    };\n    return output;\n}\n\n\n// Output the results to different output branches\nreturn [\n    { payload: output.output1 },\n    { payload: output.output2 },\n    { payload: output.output3 },\n    { payload: output.output4 },\n    { payload: output.output5 },\n    { payload: output.output6 }\n];\n",
        "outputs": 6,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 200,
        "wires": [
            [],
            [],
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "aa3273935386a6ad",
        "type": "modbus-read",
        "z": "002373ce227d5c67",
        "name": "",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Input",
        "adr": "0",
        "quantity": "6",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "3adca5432f8a885d",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 250,
        "y": 200,
        "wires": [
            [
                "c353fe1192751e3c"
            ],
            []
        ]
    },
    {
        "id": "7dbdcca5fbb93207",
        "type": "http in",
        "z": "5980dbde181456f9",
        "name": "",
        "url": "/door/command/open",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 180,
        "wires": [
            [
                "0d177a1335f2d93e",
                "6177ba761ff1128d",
                "5ca4c039cfe95482",
                "9d98a839b558d7a6",
                "d33ccbe5409fafd7",
                "b24b859454b69a81",
                "891501daa41d7bc5",
                "14d25f9623c754bf",
                "43e18ab88088249f",
                "9d586d681ce88e7c",
                "ed5d5fa5d40d4c52",
                "ac3ace49f97cd6f8",
                "209eb6e23634a2f7",
                "0863683cc12539a1",
                "238f646f927a85b8",
                "710ac571042e9a21",
                "5d96e27adbf33cd5",
                "ceaf0cc7e00778f2",
                "4cd041f3e7884bac",
                "4d2c46bf0d06264e",
                "92865d16bbd10ab8",
                "44093863ea7b3341",
                "313860cc836c6647",
                "9bef484c504216cf",
                "22c8319f41761e05",
                "a8b7e506e3780e38",
                "a5e04fe2e6428db8",
                "5b5ad52ee37ab34f",
                "91c5ecb7d506730b",
                "4f3d29f53e21dc35"
            ]
        ]
    },
    {
        "id": "090e89d64d4f4ee1",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Open_FastDoor_1",
        "mode": "link",
        "links": [
            "8e67fb24a3f44d4a"
        ],
        "x": 565,
        "y": 180,
        "wires": []
    },
    {
        "id": "0d177a1335f2d93e",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "FastDoor_1",
        "func": "if (msg.payload.doorCode === \"FastDoor_1\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 180,
        "wires": [
            [
                "090e89d64d4f4ee1"
            ]
        ]
    },
    {
        "id": "6177ba761ff1128d",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Packing_Stand_1",
        "func": "if (msg.payload.doorCode === \"Packing_Stand_1\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 240,
        "wires": [
            [
                "01cfcc26861078dd"
            ]
        ]
    },
    {
        "id": "01cfcc26861078dd",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Open_Packing_Stand_1",
        "mode": "link",
        "links": [
            "1f483212708e3d20",
            "0bfa9cd92453f4c7"
        ],
        "x": 565,
        "y": 240,
        "wires": []
    },
    {
        "id": "43e18ab88088249f",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Packing_Stand_2",
        "func": "if (msg.payload.doorCode === \"Packing_Stand_2\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 280,
        "wires": [
            [
                "4bcff48399977fae"
            ]
        ]
    },
    {
        "id": "9d586d681ce88e7c",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Packing_Stand_3",
        "func": "if (msg.payload.doorCode === \"Packing_Stand_3\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 320,
        "wires": [
            [
                "067169ba685a485c"
            ]
        ]
    },
    {
        "id": "14d25f9623c754bf",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Packing_Stand_4",
        "func": "if (msg.payload.doorCode === \"Packing_Stand_4\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 360,
        "wires": [
            [
                "2d514df988e38ce2"
            ]
        ]
    },
    {
        "id": "209eb6e23634a2f7",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Packing_Stand_5",
        "func": "if (msg.payload.doorCode === \"Packing_Stand_5\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 400,
        "wires": [
            [
                "ddc51d3b86818d48"
            ]
        ]
    },
    {
        "id": "891501daa41d7bc5",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Packing_Stand_6",
        "func": "if (msg.payload.doorCode === \"Packing_Stand_6\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 440,
        "wires": [
            [
                "0b408d01abd02635"
            ]
        ]
    },
    {
        "id": "ed5d5fa5d40d4c52",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Packing_Stand_7",
        "func": "if (msg.payload.doorCode === \"Packing_Stand_7\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 480,
        "wires": [
            [
                "bf8107bad85036e0"
            ]
        ]
    },
    {
        "id": "ac3ace49f97cd6f8",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Packing_Stand_8",
        "func": "if (msg.payload.doorCode === \"Packing_Stand_8\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 520,
        "wires": [
            [
                "98e5fc1a2d6bef8a"
            ]
        ]
    },
    {
        "id": "b24b859454b69a81",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Packing_Stand_9",
        "func": "if (msg.payload.doorCode === \"Packing_Stand_9\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 560,
        "wires": [
            [
                "bb0e2a3cb8488ebd"
            ]
        ]
    },
    {
        "id": "22c8319f41761e05",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Packing_Stand_10",
        "func": "if (msg.payload.doorCode === \"Packing_Stand_10\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 600,
        "wires": [
            [
                "ceafc53737a30571"
            ]
        ]
    },
    {
        "id": "d33ccbe5409fafd7",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Packing_Stand_11",
        "func": "if (msg.payload.doorCode === \"Packing_Stand_11\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 640,
        "wires": [
            [
                "9bed9e5036306917"
            ]
        ]
    },
    {
        "id": "9d98a839b558d7a6",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Packing_Stand_12",
        "func": "if (msg.payload.doorCode === \"Packing_Stand_12\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 680,
        "wires": [
            [
                "22dc5224a2588380"
            ]
        ]
    },
    {
        "id": "5ca4c039cfe95482",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Packing_Stand_13",
        "func": "if (msg.payload.doorCode === \"Packing_Stand_13\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 720,
        "wires": [
            [
                "64cd36c299562c22"
            ]
        ]
    },
    {
        "id": "4bcff48399977fae",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Open_Packing_Stand_2",
        "mode": "link",
        "links": [
            "6c1c00793735b387",
            "35759cb536f08924"
        ],
        "x": 565,
        "y": 280,
        "wires": []
    },
    {
        "id": "067169ba685a485c",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Open_Packing_Stand_3",
        "mode": "link",
        "links": [
            "7d4435b27b35a290",
            "49e1cd91192d6e3e",
            "9cdc81599a4749f5"
        ],
        "x": 565,
        "y": 320,
        "wires": []
    },
    {
        "id": "2d514df988e38ce2",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Open_Packing_Stand_4",
        "mode": "link",
        "links": [
            "fbf3ddddd0421bac",
            "3e2a85f2e4766b16"
        ],
        "x": 565,
        "y": 360,
        "wires": []
    },
    {
        "id": "ddc51d3b86818d48",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Open_Packing_Stand_5",
        "mode": "link",
        "links": [
            "e41af5c47c80ebbb",
            "4ece77e50997ee70"
        ],
        "x": 565,
        "y": 400,
        "wires": []
    },
    {
        "id": "0b408d01abd02635",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Open_Packing_Stand_6",
        "mode": "link",
        "links": [
            "5fa5d20c577a29ec"
        ],
        "x": 565,
        "y": 440,
        "wires": []
    },
    {
        "id": "bf8107bad85036e0",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Open_Packing_Stand_7",
        "mode": "link",
        "links": [
            "dbf77e5b0fb71f6a",
            "6d2cfb9542279541"
        ],
        "x": 565,
        "y": 480,
        "wires": []
    },
    {
        "id": "98e5fc1a2d6bef8a",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Open_Packing_Stand_8",
        "mode": "link",
        "links": [
            "67d9b8c0f8732ed0",
            "0c0b8c4a40f08f25"
        ],
        "x": 565,
        "y": 520,
        "wires": []
    },
    {
        "id": "bb0e2a3cb8488ebd",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Open_Packing_Stand_9",
        "mode": "link",
        "links": [
            "7908bf1d568ba7d2",
            "9ce9175dd6964b26"
        ],
        "x": 565,
        "y": 560,
        "wires": []
    },
    {
        "id": "ceafc53737a30571",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Open_Packing_Stand_10",
        "mode": "link",
        "links": [
            "563539f86570a30b",
            "4a0f3db490a8d125"
        ],
        "x": 565,
        "y": 600,
        "wires": []
    },
    {
        "id": "9bed9e5036306917",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Open_Packing_Stand_11",
        "mode": "link",
        "links": [
            "8dfeafe23b640cdd"
        ],
        "x": 565,
        "y": 640,
        "wires": []
    },
    {
        "id": "22dc5224a2588380",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Open_Packing_Stand_12",
        "mode": "link",
        "links": [
            "18e1c58ed32b8c83"
        ],
        "x": 565,
        "y": 680,
        "wires": []
    },
    {
        "id": "64cd36c299562c22",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Open_Packing_Stand_13",
        "mode": "link",
        "links": [
            "7689a32b9306ad1b"
        ],
        "x": 565,
        "y": 720,
        "wires": []
    },
    {
        "id": "0863683cc12539a1",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "H2_Stand_1",
        "func": "if (msg.payload.doorCode === \"H2_Stand_1\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 760,
        "wires": [
            [
                "e12f8ff2b62f949f"
            ]
        ]
    },
    {
        "id": "238f646f927a85b8",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "H2_Stand_2",
        "func": "if (msg.payload.doorCode === \"H2_Stand_2\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 800,
        "wires": [
            [
                "cd26ebd578d204df"
            ]
        ]
    },
    {
        "id": "710ac571042e9a21",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "H2_Stand_3",
        "func": "if (msg.payload.doorCode === \"H2_Stand_3\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 840,
        "wires": [
            [
                "238e642fbb4b8b41"
            ]
        ]
    },
    {
        "id": "5d96e27adbf33cd5",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "H3_Stand_1",
        "func": "if (msg.payload.doorCode === \"H3_Stand_1\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 880,
        "wires": [
            [
                "5c1757fe31c10863"
            ]
        ]
    },
    {
        "id": "ceaf0cc7e00778f2",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "H3_Stand_2",
        "func": "if (msg.payload.doorCode === \"H3_Stand_2\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 920,
        "wires": [
            [
                "83dd0c15a8e2ca9d"
            ]
        ]
    },
    {
        "id": "4cd041f3e7884bac",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "H3_Stand_3",
        "func": "if (msg.payload.doorCode === \"H3_Stand_3\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 960,
        "wires": [
            [
                "4e4488af87518de5"
            ]
        ]
    },
    {
        "id": "4d2c46bf0d06264e",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "H4_Stand_1",
        "func": "if (msg.payload.doorCode === \"H4_Stand_1\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1000,
        "wires": [
            [
                "12df99ba217134be"
            ]
        ]
    },
    {
        "id": "92865d16bbd10ab8",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "H4_Stand_2",
        "func": "if (msg.payload.doorCode === \"H4_Stand_2\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1040,
        "wires": [
            [
                "73ea489b022df65b"
            ]
        ]
    },
    {
        "id": "44093863ea7b3341",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "H4_Stand_3",
        "func": "if (msg.payload.doorCode === \"H4_Stand_3\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1080,
        "wires": [
            [
                "9eaf25c73dfa5b47"
            ]
        ]
    },
    {
        "id": "313860cc836c6647",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Reject_Stand_1",
        "func": "if (msg.payload.doorCode === \"Reject_Stand_1\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1120,
        "wires": [
            [
                "a79fe197a1eeb27d"
            ]
        ]
    },
    {
        "id": "9bef484c504216cf",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Reject_Stand_2",
        "func": "if (msg.payload.doorCode === \"Reject_Stand_2\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1160,
        "wires": [
            [
                "84883caa62607aef"
            ]
        ]
    },
    {
        "id": "a8b7e506e3780e38",
        "type": "debug",
        "z": "5980dbde181456f9",
        "name": "Receive E-Notify",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 140,
        "wires": []
    },
    {
        "id": "e12f8ff2b62f949f",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Open_H2_Stand_1",
        "mode": "link",
        "links": [
            "f98799542217ff78",
            "bd99ee7270d81fdd",
            "5406b03cc03236c3"
        ],
        "x": 565,
        "y": 760,
        "wires": []
    },
    {
        "id": "cd26ebd578d204df",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Open_H2_Stand_2",
        "mode": "link",
        "links": [
            "3e8b5226826f9dec"
        ],
        "x": 565,
        "y": 800,
        "wires": []
    },
    {
        "id": "238e642fbb4b8b41",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Open_H2_Stand_3",
        "mode": "link",
        "links": [
            "6bdef08ec90dfc45"
        ],
        "x": 565,
        "y": 840,
        "wires": []
    },
    {
        "id": "5c1757fe31c10863",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Open_H3_Stand_1",
        "mode": "link",
        "links": [
            "9080e758da681dbb"
        ],
        "x": 565,
        "y": 880,
        "wires": []
    },
    {
        "id": "83dd0c15a8e2ca9d",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Open_H3_Stand_2",
        "mode": "link",
        "links": [
            "18935fc7bc1dd2e5"
        ],
        "x": 565,
        "y": 920,
        "wires": []
    },
    {
        "id": "4e4488af87518de5",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Open_H3_Stand_3",
        "mode": "link",
        "links": [
            "4ae7c811192bdf0f"
        ],
        "x": 565,
        "y": 960,
        "wires": []
    },
    {
        "id": "12df99ba217134be",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Open_H4_Stand_1",
        "mode": "link",
        "links": [
            "68cc2a83cb645e2c",
            "18bc0bba38f4c443"
        ],
        "x": 565,
        "y": 1000,
        "wires": []
    },
    {
        "id": "73ea489b022df65b",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Open_H4_Stand_2",
        "mode": "link",
        "links": [
            "0c98bbb25f20fc38",
            "6aac1f171e6c751b",
            "c51d5601ae853d5a"
        ],
        "x": 565,
        "y": 1040,
        "wires": []
    },
    {
        "id": "9eaf25c73dfa5b47",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Open_H4_Stand_3",
        "mode": "link",
        "links": [
            "ec51cc3a333f90cb",
            "b0e61f0a1ae8ce68"
        ],
        "x": 565,
        "y": 1080,
        "wires": []
    },
    {
        "id": "a79fe197a1eeb27d",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Open_Reject_Stand_1",
        "mode": "link",
        "links": [
            "12052eaf849897e5",
            "f20b828cd5f5f444"
        ],
        "x": 565,
        "y": 1120,
        "wires": []
    },
    {
        "id": "84883caa62607aef",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Open_Reject_Stand_2",
        "mode": "link",
        "links": [
            "2446a77d4a4e65f7",
            "38f46be90c5fda19"
        ],
        "x": 565,
        "y": 1160,
        "wires": []
    },
    {
        "id": "a5e04fe2e6428db8",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "WH_Conveyor_Pick",
        "func": "if (msg.payload.doorCode === \"WH_Conveyor_Pick\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1200,
        "wires": [
            [
                "d01311d450b8d201"
            ]
        ]
    },
    {
        "id": "5b5ad52ee37ab34f",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "WH_Conveyor_Drop",
        "func": "if (msg.payload.doorCode === \"WH_Conveyor_Drop\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1240,
        "wires": [
            [
                "2e98f9aae88d485d"
            ]
        ]
    },
    {
        "id": "91c5ecb7d506730b",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "F2_Conveyor_Pick",
        "func": "if (msg.payload.doorCode === \"F2_Conveyor_Pick\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1280,
        "wires": [
            [
                "a852881eb5a3c73c"
            ]
        ]
    },
    {
        "id": "4f3d29f53e21dc35",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "F2_Conveyor_Drop",
        "func": "if (msg.payload.doorCode === \"F2_Conveyor_Drop\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1320,
        "wires": [
            [
                "9610573f0f81ae3e"
            ]
        ]
    },
    {
        "id": "d01311d450b8d201",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Open_WH_Conveyor_Pick",
        "mode": "link",
        "links": [
            "1180544a3f571a42",
            "742dec791e440a5b"
        ],
        "x": 575,
        "y": 1200,
        "wires": []
    },
    {
        "id": "2e98f9aae88d485d",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Open_WH_Conveyor_Drop",
        "mode": "link",
        "links": [
            "0d84a334d68cfcfc",
            "bb394856c145086e"
        ],
        "x": 575,
        "y": 1240,
        "wires": []
    },
    {
        "id": "a852881eb5a3c73c",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Open_F2_Conveyor_Pick",
        "mode": "link",
        "links": [
            "d1d25334c87311a5",
            "de83876c9e60897f"
        ],
        "x": 575,
        "y": 1280,
        "wires": []
    },
    {
        "id": "9610573f0f81ae3e",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Open_F2_Conveyor_Drop",
        "mode": "link",
        "links": [
            "048678cfca90db64"
        ],
        "x": 575,
        "y": 1320,
        "wires": []
    },
    {
        "id": "fa8868635190d604",
        "type": "http in",
        "z": "5980dbde181456f9",
        "name": "",
        "url": "/equipment/notify",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 800,
        "y": 180,
        "wires": [
            [
                "d87da06ac817b212",
                "053d6b70eeb5f85a",
                "5c2c3cc1cdb3d5c1",
                "2be1bdb7948b5171",
                "462ec5c00a4f8489",
                "90f2f10f16242106",
                "bb0ab2df036d16ce",
                "e6ac2c5cac0a81ec",
                "24245c42ddd35569",
                "3d0f3a98d0dd7b11",
                "80a8692457b1801c",
                "cac2f326adc1d57a",
                "dae8de8773d3cb32",
                "f424faa8b91d64c9",
                "22b5a1124c5d76fa",
                "3160ab764cf891bd",
                "8aa44b01abe8e1f7",
                "ba18e73c173ace07",
                "85e2e3816d35a786",
                "b88e9da27a4df6c8",
                "5b74a343f84dd69c",
                "be5a73dbf5534d51",
                "31a4cc0f9a22c111",
                "9039a995813a6ad7",
                "b3d8bd2f8a2e932b",
                "d63a2f5bb3ff88ae",
                "97eff04f9c3fb7fa",
                "0a0b5a5ea7b9b0df",
                "f00d996cb38c5dc6",
                "2053d6af547b94bb",
                "358fe81857fa4607",
                "f49d30768308abdf",
                "73898cdd38c61aa4",
                "0d8a39046160f1fb",
                "d8ca92b293bd50e3"
            ]
        ]
    },
    {
        "id": "d87da06ac817b212",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Packing_Stand_1_Status",
        "func": "if (msg.payload.command === \"Packing_Stand_1_Status\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 240,
        "wires": [
            [
                "e56062d20b105e0b"
            ]
        ]
    },
    {
        "id": "053d6b70eeb5f85a",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Packing_Stand_2_Status",
        "func": "if (msg.payload.command === \"Packing_Stand_2_Status\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 280,
        "wires": [
            [
                "f596d9bfe7d80cb4"
            ]
        ]
    },
    {
        "id": "5c2c3cc1cdb3d5c1",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Packing_Stand_3_Status",
        "func": "if (msg.payload.command === \"Packing_Stand_3_Status\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 320,
        "wires": [
            [
                "03e24b118b2f2b21"
            ]
        ]
    },
    {
        "id": "2be1bdb7948b5171",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Packing_Stand_4_Status",
        "func": "if (msg.payload.command === \"Packing_Stand_4_Status\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 360,
        "wires": [
            [
                "b6f6c187a7cee1d0"
            ]
        ]
    },
    {
        "id": "462ec5c00a4f8489",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Packing_Stand_5_Status",
        "func": "if (msg.payload.command === \"Packing_Stand_5_Status\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 400,
        "wires": [
            [
                "c5957809d9b0e623"
            ]
        ]
    },
    {
        "id": "90f2f10f16242106",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Packing_Stand_6_Status",
        "func": "if (msg.payload.command === \"Packing_Stand_6_Status\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 440,
        "wires": [
            [
                "4ddd7ca9d1e3f810"
            ]
        ]
    },
    {
        "id": "e6ac2c5cac0a81ec",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Packing_Stand_7_Status",
        "func": "if (msg.payload.command === \"Packing_Stand_7_Status\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 480,
        "wires": [
            [
                "ed2021948ebe473c"
            ]
        ]
    },
    {
        "id": "bb0ab2df036d16ce",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Packing_Stand_8_Status",
        "func": "if (msg.payload.command === \"Packing_Stand_8_Status\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 520,
        "wires": [
            [
                "c19e2c49a97174fb"
            ]
        ]
    },
    {
        "id": "24245c42ddd35569",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Packing_Stand_9_Status",
        "func": "if (msg.payload.command === \"Packing_Stand_9_Status\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 560,
        "wires": [
            [
                "1e0aa3d9b93ee963"
            ]
        ]
    },
    {
        "id": "3d0f3a98d0dd7b11",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Packing_Stand_10_Status",
        "func": "if (msg.payload.command === \"Packing_Stand_10_Status\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 600,
        "wires": [
            [
                "f36647a4e6811b2d"
            ]
        ]
    },
    {
        "id": "80a8692457b1801c",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Packing_Stand_11_Status",
        "func": "if (msg.payload.command === \"Packing_Stand_11_Status\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 640,
        "wires": [
            [
                "3d8fd5f136c133be"
            ]
        ]
    },
    {
        "id": "cac2f326adc1d57a",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Packing_Stand_12_Status",
        "func": "if (msg.payload.command === \"Packing_Stand_12_Status\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 680,
        "wires": [
            [
                "b24555ae818d58ea"
            ]
        ]
    },
    {
        "id": "dae8de8773d3cb32",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Packing_Stand_13_Status",
        "func": "if (msg.payload.command === \"Packing_Stand_13_Status\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 720,
        "wires": [
            [
                "2a39e2cacbbdbb08"
            ]
        ]
    },
    {
        "id": "e56062d20b105e0b",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Status_Packing_Stand_1",
        "mode": "link",
        "links": [
            "228c6afc75179045"
        ],
        "x": 1255,
        "y": 240,
        "wires": []
    },
    {
        "id": "f596d9bfe7d80cb4",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Status_Packing_Stand_2",
        "mode": "link",
        "links": [
            "5748557e8faaeea9"
        ],
        "x": 1255,
        "y": 280,
        "wires": []
    },
    {
        "id": "03e24b118b2f2b21",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Status_Packing_Stand_3",
        "mode": "link",
        "links": [
            "58ec417181423edd",
            "c2835b2b0bf3acf9"
        ],
        "x": 1255,
        "y": 320,
        "wires": []
    },
    {
        "id": "b6f6c187a7cee1d0",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Status_Packing_Stand_4",
        "mode": "link",
        "links": [
            "5b2b59d09324a113"
        ],
        "x": 1255,
        "y": 360,
        "wires": []
    },
    {
        "id": "c5957809d9b0e623",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Status_Packing_Stand_5",
        "mode": "link",
        "links": [
            "bb910567d1b9e6ba"
        ],
        "x": 1255,
        "y": 400,
        "wires": []
    },
    {
        "id": "4ddd7ca9d1e3f810",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Status_Packing_Stand_6",
        "mode": "link",
        "links": [
            "4021724cf3f31dbf",
            "7b26fa7b95517af0"
        ],
        "x": 1255,
        "y": 440,
        "wires": []
    },
    {
        "id": "ed2021948ebe473c",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Status_Packing_Stand_7",
        "mode": "link",
        "links": [
            "f7565a7e17292718"
        ],
        "x": 1255,
        "y": 480,
        "wires": []
    },
    {
        "id": "c19e2c49a97174fb",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Status_Packing_Stand_8",
        "mode": "link",
        "links": [
            "a73b8b086fb3aca4"
        ],
        "x": 1255,
        "y": 520,
        "wires": []
    },
    {
        "id": "1e0aa3d9b93ee963",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Status_Packing_Stand_9",
        "mode": "link",
        "links": [
            "d7c3f4182324b0a2"
        ],
        "x": 1255,
        "y": 560,
        "wires": []
    },
    {
        "id": "f36647a4e6811b2d",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Status_Packing_Stand_10",
        "mode": "link",
        "links": [
            "2abcf61162a958c3"
        ],
        "x": 1255,
        "y": 600,
        "wires": []
    },
    {
        "id": "3d8fd5f136c133be",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Status_Packing_Stand_11",
        "mode": "link",
        "links": [
            "4a89dc48510d56d5"
        ],
        "x": 1255,
        "y": 640,
        "wires": []
    },
    {
        "id": "b24555ae818d58ea",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Status_Packing_Stand_12",
        "mode": "link",
        "links": [
            "b4c4bf83ecb8eadd"
        ],
        "x": 1255,
        "y": 680,
        "wires": []
    },
    {
        "id": "2a39e2cacbbdbb08",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Status_Packing_Stand_13",
        "mode": "link",
        "links": [
            "894cc1615087a534"
        ],
        "x": 1255,
        "y": 720,
        "wires": []
    },
    {
        "id": "f424faa8b91d64c9",
        "type": "debug",
        "z": "5980dbde181456f9",
        "name": "debug 38",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 140,
        "wires": []
    },
    {
        "id": "3b3e4732ea3d8c21",
        "type": "http in",
        "z": "5980dbde181456f9",
        "name": "",
        "url": "/door/command/close",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1580,
        "y": 180,
        "wires": [
            [
                "a8b44e5dac916b7f",
                "76d0c620015c778f",
                "5fc38b94f55d9760",
                "ee42018b67490ee5",
                "f2a239a7ef8ec56f",
                "31f1a6fbdc1e3611",
                "e1d53cbf4f8bb15f",
                "4412f53f27e49152",
                "ad28de9711827c42",
                "70230fc5095654f1",
                "eac4132e9241ae9d",
                "320a6380a9ceed70",
                "3a9f0f0842474334",
                "27582c370b876e96",
                "87c2e986064565f4",
                "a813186043122aca",
                "6b69fa3a724f113c",
                "cf1d82b505d20920",
                "55a5af87595b066d",
                "636a37d12779838a",
                "a7dc4fe61c8df4c4",
                "58ae827e5c5e6822",
                "046e2192db54310b",
                "7975b923cac93b56",
                "f34ae114cfeb89ce",
                "196130cbf08ac770",
                "952705d2dd171ae8",
                "d970c40b4a334d52",
                "a1f1427f14443ff2",
                "d767a0c8273221d8"
            ]
        ]
    },
    {
        "id": "2040030dd0b19c0b",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Close_FastDoor_1",
        "mode": "link",
        "links": [
            "380ae2f01fc89255"
        ],
        "x": 1965,
        "y": 180,
        "wires": []
    },
    {
        "id": "a8b44e5dac916b7f",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "FastDoor_1",
        "func": "if (msg.payload.doorCode === \"FastDoor_1\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 180,
        "wires": [
            [
                "2040030dd0b19c0b"
            ]
        ]
    },
    {
        "id": "22b5a1124c5d76fa",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "F2_Conveyor_Pick_Status",
        "func": "if (msg.payload.command === \"F2_Conveyor_Pick_Status\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 1280,
        "wires": [
            [
                "5c3c8166a44107f6"
            ]
        ]
    },
    {
        "id": "5c3c8166a44107f6",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "F2_Conveyor_Pick_Status",
        "mode": "link",
        "links": [
            "30e454af2593fdcd"
        ],
        "x": 1255,
        "y": 1280,
        "wires": []
    },
    {
        "id": "76d0c620015c778f",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "F2_Conveyor_Pick",
        "func": "if (msg.payload.doorCode === \"F2_Conveyor_Pick\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 1280,
        "wires": [
            [
                "d0428b37d8dbdaf0"
            ]
        ]
    },
    {
        "id": "d0428b37d8dbdaf0",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Close_F2_Conveyor_Pick",
        "mode": "link",
        "links": [
            "392610ac49699888"
        ],
        "x": 1965,
        "y": 1280,
        "wires": []
    },
    {
        "id": "5fc38b94f55d9760",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "F2_Conveyor_Drop",
        "func": "if (msg.payload.doorCode === \"F2_Conveyor_Drop\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 1320,
        "wires": [
            [
                "6a012176094c94af"
            ]
        ]
    },
    {
        "id": "6a012176094c94af",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Close_F2_Conveyor_Drop",
        "mode": "link",
        "links": [
            "257b9a57bbee9311"
        ],
        "x": 1975,
        "y": 1320,
        "wires": []
    },
    {
        "id": "3160ab764cf891bd",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "F2_Conveyor_Drop_Status",
        "func": "if (msg.payload.command === \"F2_Conveyor_Drop_Status\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 1320,
        "wires": [
            [
                "1bcf745b87066337"
            ]
        ]
    },
    {
        "id": "1bcf745b87066337",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "F2_Conveyor_Drop_Status",
        "mode": "link",
        "links": [
            "827173056a5e5b4f"
        ],
        "x": 1255,
        "y": 1320,
        "wires": []
    },
    {
        "id": "ee42018b67490ee5",
        "type": "debug",
        "z": "5980dbde181456f9",
        "name": "debug 66",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1800,
        "y": 140,
        "wires": []
    },
    {
        "id": "f2a239a7ef8ec56f",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Packing_Stand_1",
        "func": "if (msg.payload.doorCode === \"Packing_Stand_1\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 240,
        "wires": [
            [
                "33d6f3922f20210b"
            ]
        ]
    },
    {
        "id": "33d6f3922f20210b",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Close_Packing_Stand_1",
        "mode": "link",
        "links": [
            "6de1e6cd79f65933"
        ],
        "x": 1965,
        "y": 240,
        "wires": []
    },
    {
        "id": "31f1a6fbdc1e3611",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Packing_Stand_2",
        "func": "if (msg.payload.doorCode === \"Packing_Stand_2\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 280,
        "wires": [
            [
                "48b7abd5b6e97d40"
            ]
        ]
    },
    {
        "id": "e1d53cbf4f8bb15f",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Packing_Stand_3",
        "func": "if (msg.payload.doorCode === \"Packing_Stand_3\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 320,
        "wires": [
            [
                "3f7a7de39e3edfa7"
            ]
        ]
    },
    {
        "id": "4412f53f27e49152",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Packing_Stand_4",
        "func": "if (msg.payload.doorCode === \"Packing_Stand_4\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 360,
        "wires": [
            [
                "7b04236d2806fe52"
            ]
        ]
    },
    {
        "id": "ad28de9711827c42",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Packing_Stand_5",
        "func": "if (msg.payload.doorCode === \"Packing_Stand_5\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 400,
        "wires": [
            [
                "d1244da4326448e1"
            ]
        ]
    },
    {
        "id": "70230fc5095654f1",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Packing_Stand_6",
        "func": "if (msg.payload.doorCode === \"Packing_Stand_6\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 440,
        "wires": [
            [
                "ccbb0e3a1b9f8009"
            ]
        ]
    },
    {
        "id": "eac4132e9241ae9d",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Packing_Stand_7",
        "func": "if (msg.payload.doorCode === \"Packing_Stand_7\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 480,
        "wires": [
            [
                "53669cc25449e084"
            ]
        ]
    },
    {
        "id": "320a6380a9ceed70",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Packing_Stand_8",
        "func": "if (msg.payload.doorCode === \"Packing_Stand_8\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 520,
        "wires": [
            [
                "db36d6675bba0ee2"
            ]
        ]
    },
    {
        "id": "3a9f0f0842474334",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Packing_Stand_9",
        "func": "if (msg.payload.doorCode === \"Packing_Stand_9\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 560,
        "wires": [
            [
                "6421c1d4f1b0ec1b"
            ]
        ]
    },
    {
        "id": "27582c370b876e96",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Packing_Stand_10",
        "func": "if (msg.payload.doorCode === \"Packing_Stand_10\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 600,
        "wires": [
            [
                "4deb682832e52fef"
            ]
        ]
    },
    {
        "id": "87c2e986064565f4",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Packing_Stand_11",
        "func": "if (msg.payload.doorCode === \"Packing_Stand_11\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 640,
        "wires": [
            [
                "ce310c140816e172"
            ]
        ]
    },
    {
        "id": "a813186043122aca",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Packing_Stand_12",
        "func": "if (msg.payload.doorCode === \"Packing_Stand_12\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 680,
        "wires": [
            [
                "f4de65e26efa958e"
            ]
        ]
    },
    {
        "id": "6b69fa3a724f113c",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Packing_Stand_13",
        "func": "if (msg.payload.doorCode === \"Packing_Stand_13\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 720,
        "wires": [
            [
                "b837156845c4dc30"
            ]
        ]
    },
    {
        "id": "48b7abd5b6e97d40",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Close_Packing_Stand_2",
        "mode": "link",
        "links": [
            "e1162d1aa9b89176",
            "a6ed00d1313410ce"
        ],
        "x": 1965,
        "y": 280,
        "wires": []
    },
    {
        "id": "3f7a7de39e3edfa7",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Close_Packing_Stand_3",
        "mode": "link",
        "links": [
            "94e8937d5f8f7c46",
            "650bbfca368bc33d",
            "eac0a03baf0e065f"
        ],
        "x": 1965,
        "y": 320,
        "wires": []
    },
    {
        "id": "7b04236d2806fe52",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Close_Packing_Stand_4",
        "mode": "link",
        "links": [
            "0262414405c0c5b2",
            "f3b5c2b923fd7243"
        ],
        "x": 1965,
        "y": 360,
        "wires": []
    },
    {
        "id": "d1244da4326448e1",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Close_Packing_Stand_5",
        "mode": "link",
        "links": [
            "a3899fd84512b246",
            "8d0d975f55288958"
        ],
        "x": 1965,
        "y": 400,
        "wires": []
    },
    {
        "id": "ccbb0e3a1b9f8009",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Close_Packing_Stand_6",
        "mode": "link",
        "links": [
            "ac53e794c2ac48af"
        ],
        "x": 1965,
        "y": 440,
        "wires": []
    },
    {
        "id": "53669cc25449e084",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Close_Packing_Stand_7",
        "mode": "link",
        "links": [
            "d5d45e8c81f41e33",
            "76e3734442049ea7"
        ],
        "x": 1965,
        "y": 480,
        "wires": []
    },
    {
        "id": "db36d6675bba0ee2",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Close_Packing_Stand_8",
        "mode": "link",
        "links": [
            "0e2838728fbce45a",
            "e4bab36ede5cc582"
        ],
        "x": 1965,
        "y": 520,
        "wires": []
    },
    {
        "id": "6421c1d4f1b0ec1b",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Close_Packing_Stand_9",
        "mode": "link",
        "links": [
            "415f1285549e72eb",
            "1febe34f727e351b"
        ],
        "x": 1965,
        "y": 560,
        "wires": []
    },
    {
        "id": "4deb682832e52fef",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Close_Packing_Stand_10",
        "mode": "link",
        "links": [
            "9a5eeefa7a575e82",
            "4807f6efd17e1cf0"
        ],
        "x": 1965,
        "y": 600,
        "wires": []
    },
    {
        "id": "ce310c140816e172",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Close_Packing_Stand_11",
        "mode": "link",
        "links": [
            "b391eba196a46d61"
        ],
        "x": 1965,
        "y": 640,
        "wires": []
    },
    {
        "id": "f4de65e26efa958e",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Close_Packing_Stand_12",
        "mode": "link",
        "links": [
            "fa084ca5e95737d9",
            "a4747d33ad8008e9"
        ],
        "x": 1965,
        "y": 680,
        "wires": []
    },
    {
        "id": "b837156845c4dc30",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Close_Packing_Stand_13",
        "mode": "link",
        "links": [
            "41939549c1e3ac9d"
        ],
        "x": 1965,
        "y": 720,
        "wires": []
    },
    {
        "id": "cf1d82b505d20920",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "H2_Stand_1",
        "func": "if (msg.payload.doorCode === \"H2_Stand_1\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 760,
        "wires": [
            [
                "63d8ea5cbba2da45"
            ]
        ]
    },
    {
        "id": "55a5af87595b066d",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "H2_Stand_2",
        "func": "if (msg.payload.doorCode === \"H2_Stand_2\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 800,
        "wires": [
            [
                "e25b817fabfcdff0"
            ]
        ]
    },
    {
        "id": "636a37d12779838a",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "H2_Stand_3",
        "func": "if (msg.payload.doorCode === \"H2_Stand_3\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 840,
        "wires": [
            [
                "059e76d7aef82473"
            ]
        ]
    },
    {
        "id": "a7dc4fe61c8df4c4",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "H3_Stand_1",
        "func": "if (msg.payload.doorCode === \"H3_Stand_1\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 880,
        "wires": [
            [
                "d11ccad0f092fdd3"
            ]
        ]
    },
    {
        "id": "58ae827e5c5e6822",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "H3_Stand_2",
        "func": "if (msg.payload.doorCode === \"H3_Stand_2\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 920,
        "wires": [
            [
                "e41b47f8cb338b43"
            ]
        ]
    },
    {
        "id": "046e2192db54310b",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "H3_Stand_3",
        "func": "if (msg.payload.doorCode === \"H3_Stand_3\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 960,
        "wires": [
            [
                "c598c19f5f1c2844"
            ]
        ]
    },
    {
        "id": "7975b923cac93b56",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "H4_Stand_1",
        "func": "if (msg.payload.doorCode === \"H4_Stand_1\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 1000,
        "wires": [
            [
                "5def93fd2fc274ed"
            ]
        ]
    },
    {
        "id": "f34ae114cfeb89ce",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "H4_Stand_2",
        "func": "if (msg.payload.doorCode === \"H4_Stand_2\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 1040,
        "wires": [
            [
                "09827e1cd1ba3a89"
            ]
        ]
    },
    {
        "id": "196130cbf08ac770",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "H4_Stand_3",
        "func": "if (msg.payload.doorCode === \"H4_Stand_3\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 1080,
        "wires": [
            [
                "c18a6e5f58f8e44b"
            ]
        ]
    },
    {
        "id": "952705d2dd171ae8",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Reject_Stand_1",
        "func": "if (msg.payload.doorCode === \"Reject_Stand_1\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1820,
        "y": 1120,
        "wires": [
            [
                "99819e818a82f254"
            ]
        ]
    },
    {
        "id": "d970c40b4a334d52",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Reject_Stand_2",
        "func": "if (msg.payload.doorCode === \"Reject_Stand_2\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1820,
        "y": 1160,
        "wires": [
            [
                "a52397a577ed414d"
            ]
        ]
    },
    {
        "id": "63d8ea5cbba2da45",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Close_H2_Stand_1",
        "mode": "link",
        "links": [
            "93722128ae09898b",
            "2488abe311629542"
        ],
        "x": 1965,
        "y": 760,
        "wires": []
    },
    {
        "id": "e25b817fabfcdff0",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Close_H2_Stand_2",
        "mode": "link",
        "links": [
            "544e7612e81d89fd"
        ],
        "x": 1965,
        "y": 800,
        "wires": []
    },
    {
        "id": "059e76d7aef82473",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Close_H2_Stand_3",
        "mode": "link",
        "links": [
            "573e9e9e250af131",
            "7490f8d6089352b4"
        ],
        "x": 1965,
        "y": 840,
        "wires": []
    },
    {
        "id": "d11ccad0f092fdd3",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Close_H3_Stand_1",
        "mode": "link",
        "links": [
            "a12a2e6a6bf5835b"
        ],
        "x": 1965,
        "y": 880,
        "wires": []
    },
    {
        "id": "e41b47f8cb338b43",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Close_H3_Stand_2",
        "mode": "link",
        "links": [
            "502ad896fc60c2fc"
        ],
        "x": 1965,
        "y": 920,
        "wires": []
    },
    {
        "id": "c598c19f5f1c2844",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Close_H3_Stand_3",
        "mode": "link",
        "links": [
            "2ae41c6ab9f14a30"
        ],
        "x": 1965,
        "y": 960,
        "wires": []
    },
    {
        "id": "5def93fd2fc274ed",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Close_H4_Stand_1",
        "mode": "link",
        "links": [
            "4b7e6790af26b35c",
            "b6cfa3b16d4f4ed1"
        ],
        "x": 1965,
        "y": 1000,
        "wires": []
    },
    {
        "id": "09827e1cd1ba3a89",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Close_H4_Stand_2",
        "mode": "link",
        "links": [
            "d555f48a64c9d364",
            "add0a97a9f537182"
        ],
        "x": 1965,
        "y": 1040,
        "wires": []
    },
    {
        "id": "c18a6e5f58f8e44b",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Close_H4_Stand_3",
        "mode": "link",
        "links": [
            "1f53794722751200",
            "564e0ca65e431867"
        ],
        "x": 1965,
        "y": 1080,
        "wires": []
    },
    {
        "id": "99819e818a82f254",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Close_Reject_Stand_1",
        "mode": "link",
        "links": [
            "efa91cdba25b2101",
            "5e0f0db5fdfc88ab"
        ],
        "x": 1965,
        "y": 1120,
        "wires": []
    },
    {
        "id": "a52397a577ed414d",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Close_Reject_Stand_2",
        "mode": "link",
        "links": [
            "038c9d03c174d43c",
            "5d31e9e69889e08a"
        ],
        "x": 1965,
        "y": 1160,
        "wires": []
    },
    {
        "id": "a1f1427f14443ff2",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "WH_Conveyor_Pick",
        "func": "if (msg.payload.doorCode === \"WH_Conveyor_Pick\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1840,
        "y": 1200,
        "wires": [
            [
                "6e74856a0868cb9a"
            ]
        ]
    },
    {
        "id": "d767a0c8273221d8",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "WH_Conveyor_Drop",
        "func": "if (msg.payload.doorCode === \"WH_Conveyor_Drop\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1840,
        "y": 1240,
        "wires": [
            [
                "2ffbe327e06b8752"
            ]
        ]
    },
    {
        "id": "6e74856a0868cb9a",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Close_WH_Conveyor_Pick",
        "mode": "link",
        "links": [
            "83fdebec50fc386c"
        ],
        "x": 1975,
        "y": 1200,
        "wires": []
    },
    {
        "id": "2ffbe327e06b8752",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Close_WH_Conveyor_Drop",
        "mode": "link",
        "links": [
            "44f1b51ea1621b46"
        ],
        "x": 1975,
        "y": 1240,
        "wires": []
    },
    {
        "id": "8aa44b01abe8e1f7",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "H2_Stand_1_Status",
        "func": "if (msg.payload.command === \"H2_Stand_1_Status\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 760,
        "wires": [
            [
                "b71ea53271ecb782"
            ]
        ]
    },
    {
        "id": "ba18e73c173ace07",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "H2_Stand_2_Status",
        "func": "if (msg.payload.command === \"H2_Stand_2_Status\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 800,
        "wires": [
            [
                "74099a34f84506e1"
            ]
        ]
    },
    {
        "id": "85e2e3816d35a786",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "H2_Stand_3_Status",
        "func": "if (msg.payload.command === \"H2_Stand_3_Status\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 840,
        "wires": [
            [
                "9c0708f34a2d72da"
            ]
        ]
    },
    {
        "id": "b88e9da27a4df6c8",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "H3_Stand_1_Status",
        "func": "if (msg.payload.command === \"H3_Stand_1_Status\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 880,
        "wires": [
            [
                "f209e03839314e99"
            ]
        ]
    },
    {
        "id": "5b74a343f84dd69c",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "H3_Stand_2_Status",
        "func": "if (msg.payload.command === \"H3_Stand_2_Status\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 920,
        "wires": [
            [
                "82d6c7157e0775ea"
            ]
        ]
    },
    {
        "id": "be5a73dbf5534d51",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "H3_Stand_3_Status",
        "func": "if (msg.payload.command === \"H3_Stand_3_Status\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 960,
        "wires": [
            [
                "d09d9a7851d0a265"
            ]
        ]
    },
    {
        "id": "31a4cc0f9a22c111",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "H4_Stand_1_Status",
        "func": "if (msg.payload.command === \"H4_Stand_1_Status\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1000,
        "wires": [
            [
                "e25590265f99786d"
            ]
        ]
    },
    {
        "id": "9039a995813a6ad7",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "H4_Stand_2_Status",
        "func": "if (msg.payload.command === \"H4_Stand_2_Status\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1040,
        "wires": [
            [
                "6a23fceb7010dd81"
            ]
        ]
    },
    {
        "id": "b3d8bd2f8a2e932b",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "H4_Stand_3_Status",
        "func": "if (msg.payload.command === \"H4_Stand_3_Status\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1080,
        "wires": [
            [
                "c46983e77e9b1726"
            ]
        ]
    },
    {
        "id": "d63a2f5bb3ff88ae",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Reject_Stand_1_Status",
        "func": "if (msg.payload.command === \"Reject_Stand_1_Status\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1120,
        "wires": [
            [
                "204a5f5241a3a451"
            ]
        ]
    },
    {
        "id": "97eff04f9c3fb7fa",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "Reject_Stand_2_Status",
        "func": "if (msg.payload.command === \"Reject_Stand_2_Status\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1160,
        "wires": [
            [
                "0f05a9f11fddf7e8"
            ]
        ]
    },
    {
        "id": "b71ea53271ecb782",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Open_H2_Stand_1_Status",
        "mode": "link",
        "links": [
            "41c23d3a0236ce97"
        ],
        "x": 1255,
        "y": 760,
        "wires": []
    },
    {
        "id": "74099a34f84506e1",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Open_H2_Stand_2_Status",
        "mode": "link",
        "links": [
            "e9f531fc9de5fac3"
        ],
        "x": 1255,
        "y": 800,
        "wires": []
    },
    {
        "id": "9c0708f34a2d72da",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Open_H2_Stand_3_Status",
        "mode": "link",
        "links": [
            "da2f2aa58b51030d"
        ],
        "x": 1255,
        "y": 840,
        "wires": []
    },
    {
        "id": "f209e03839314e99",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Open_H3_Stand_1_Status",
        "mode": "link",
        "links": [
            "7c2c7209d6e1ee6b"
        ],
        "x": 1255,
        "y": 880,
        "wires": []
    },
    {
        "id": "82d6c7157e0775ea",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Open_H3_Stand_2_Status",
        "mode": "link",
        "links": [
            "89211ee433f3bef5"
        ],
        "x": 1255,
        "y": 920,
        "wires": []
    },
    {
        "id": "d09d9a7851d0a265",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Open_H3_Stand_3_Status",
        "mode": "link",
        "links": [
            "6dca57d87718579c"
        ],
        "x": 1255,
        "y": 960,
        "wires": []
    },
    {
        "id": "e25590265f99786d",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Open_H4_Stand_1_Status",
        "mode": "link",
        "links": [
            "8662eba879c85ed0"
        ],
        "x": 1255,
        "y": 1000,
        "wires": []
    },
    {
        "id": "6a23fceb7010dd81",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Open_H4_Stand_2_Status",
        "mode": "link",
        "links": [
            "7d6360d49b55d7a9"
        ],
        "x": 1255,
        "y": 1040,
        "wires": []
    },
    {
        "id": "c46983e77e9b1726",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Open_H4_Stand_3_Status",
        "mode": "link",
        "links": [
            "e52e3793bd1a7464",
            "ed164111d17189ea"
        ],
        "x": 1255,
        "y": 1080,
        "wires": []
    },
    {
        "id": "204a5f5241a3a451",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Open_Reject_Stand_1_Status",
        "mode": "link",
        "links": [
            "5b0251445efa8dfc"
        ],
        "x": 1255,
        "y": 1120,
        "wires": []
    },
    {
        "id": "0f05a9f11fddf7e8",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Open_Reject_Stand_2_Status",
        "mode": "link",
        "links": [
            "ef3e43c42435da20"
        ],
        "x": 1255,
        "y": 1160,
        "wires": []
    },
    {
        "id": "0a0b5a5ea7b9b0df",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "WH_Conveyor_Pick_Status",
        "func": "if (msg.payload.command === \"WH_Conveyor_Pick_Status\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 1200,
        "wires": [
            [
                "e06d446563299ca0"
            ]
        ]
    },
    {
        "id": "f00d996cb38c5dc6",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "WH_Conveyor_Drop_Status",
        "func": "if (msg.payload.command === \"WH_Conveyor_Drop_Status\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 1240,
        "wires": [
            [
                "0fe9c72c842e487f"
            ]
        ]
    },
    {
        "id": "e06d446563299ca0",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Open_WH_Conveyor_Pick_Status",
        "mode": "link",
        "links": [
            "bb70e6b62f22dc3d"
        ],
        "x": 1255,
        "y": 1200,
        "wires": []
    },
    {
        "id": "0fe9c72c842e487f",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Open_WH_Conveyor_Drop_Status",
        "mode": "link",
        "links": [
            "083af41ca9b2676d"
        ],
        "x": 1255,
        "y": 1240,
        "wires": []
    },
    {
        "id": "2053d6af547b94bb",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "WH_Conveyor_Pick_Close",
        "func": "if (msg.payload.command === \"WH_Conveyor_Pick_Close\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 1440,
        "wires": [
            [
                "5710cb20e272afb8",
                "feea059cb9352a19"
            ]
        ]
    },
    {
        "id": "5710cb20e272afb8",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Close_WH_Conveyor_Pick_Close",
        "mode": "link",
        "links": [
            "ca49e3f64f3d981b"
        ],
        "x": 1245,
        "y": 1440,
        "wires": []
    },
    {
        "id": "358fe81857fa4607",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "WH_Conveyor_Drop_Close",
        "func": "if (msg.payload.command === \"WH_Conveyor_Drop_Close\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 1480,
        "wires": [
            [
                "cf813bfe39a5c666"
            ]
        ]
    },
    {
        "id": "cf813bfe39a5c666",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Close_WH_Conveyor_Drop_Close",
        "mode": "link",
        "links": [
            "7949e827570d6440"
        ],
        "x": 1245,
        "y": 1480,
        "wires": []
    },
    {
        "id": "f49d30768308abdf",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "F2_Conveyor_Pick_Close",
        "func": "if (msg.payload.command === \"F2_Conveyor_Pick_Close\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1520,
        "wires": [
            [
                "08824f55621cecbd"
            ]
        ]
    },
    {
        "id": "08824f55621cecbd",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Close_F2_Conveyor_Pick_Close",
        "mode": "link",
        "links": [
            "20d4047261e1679d"
        ],
        "x": 1245,
        "y": 1520,
        "wires": []
    },
    {
        "id": "73898cdd38c61aa4",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "F2_Conveyor_Pick_Close",
        "func": "if (msg.payload.command === \"F2_Conveyor_Drop_Close\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1560,
        "wires": [
            [
                "e11c0be0f2a6d0f2"
            ]
        ]
    },
    {
        "id": "e11c0be0f2a6d0f2",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "Close_F2_Conveyor_Drop_Close",
        "mode": "link",
        "links": [
            "a3ae8cd2b277b030"
        ],
        "x": 1245,
        "y": 1560,
        "wires": []
    },
    {
        "id": "feea059cb9352a19",
        "type": "debug",
        "z": "5980dbde181456f9",
        "name": "debug 80",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1480,
        "y": 1360,
        "wires": []
    },
    {
        "id": "0d8a39046160f1fb",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "FastdoorDown_Close",
        "func": "if (msg.payload.command === \"FastdoorDown_Close\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1600,
        "wires": [
            [
                "dcb26bc1703619dc"
            ]
        ]
    },
    {
        "id": "d8ca92b293bd50e3",
        "type": "function",
        "z": "5980dbde181456f9",
        "name": "FastdoorUp_Close",
        "func": "if (msg.payload.command === \"FastdoorUp_Close\") {\n    // Match: Send the message to the subflow\n    node.send([msg, null]);\n} else {\n    // No match: Send \"no match\" response\n    node.send([null, { payload: \"no match\" }]);\n}\nreturn null; // Prevents duplicate message from being sent to the next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 1640,
        "wires": [
            [
                "51ec4c1416f777ec"
            ]
        ]
    },
    {
        "id": "dcb26bc1703619dc",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "FastdoorDown_Close",
        "mode": "link",
        "links": [
            "219be69726924a36"
        ],
        "x": 1245,
        "y": 1600,
        "wires": []
    },
    {
        "id": "51ec4c1416f777ec",
        "type": "link out",
        "z": "5980dbde181456f9",
        "name": "FastdoorUp_Close",
        "mode": "link",
        "links": [
            "219be69726924a36"
        ],
        "x": 1245,
        "y": 1640,
        "wires": []
    },
    {
        "id": "f6517187f0e5700f",
        "type": "OpcUa-Client",
        "z": "f8006bed1ee01646",
        "endpoint": "91acb51cd428cdfe",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "useTransport": false,
        "maxChunkCount": 1,
        "maxMessageSize": 8192,
        "receiveBufferSize": 8192,
        "sendBufferSize": 8192,
        "name": "OPC Read 10.10.111.190",
        "x": 710,
        "y": 160,
        "wires": [
            [
                "eb94ad7906b72f56"
            ],
            []
        ]
    },
    {
        "id": "2f9b9a6ef8b0e718",
        "type": "inject",
        "z": "f8006bed1ee01646",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 300,
        "wires": [
            [
                "e11ee0131637f547",
                "05ada94cebc4645a"
            ]
        ]
    },
    {
        "id": "eb94ad7906b72f56",
        "type": "function",
        "z": "f8006bed1ee01646",
        "name": "From Server",
        "func": "var msg1 = {};\nvar msg2 = {};\nvar msg3 = {};\nvar msg4 = {};\nvar msg5 = {};\n\n\n\nif (msg.topic == 'ns=3;s=\"AMR_Comm\".\"PickEnable21\"')\n{\n    msg1.payload=msg.payload;\n    return [msg1, null, null, null, null];\n}\nif (msg.topic === 'ns=3;s=\"AMR_Comm\".\"DropEnable21\"') \n{\n    msg2.payload = msg.payload;\n    return [null, msg2, null, null, null];\n}\nelse if (msg.topic === 'ns=3;s=\"AMR_Comm\".\"PickEnable22\"') \n{\n    msg3.payload = msg.payload;\n    return [null, null, msg3, null, null];\n}\nelse if (msg.topic === 'ns=3;s=\"AMR_Comm\".\"DropEnable22\"') \n{\n    msg4.payload = msg.payload;\n    return [null, null, null, msg4, null];\n} \nelse if (msg.topic === 'ns=3;s=\"AMR_Comm\".\"CommAlive\"') {\n    msg5.payload = msg.payload;\n    return [null, null, null, null, msg5];\n} \n\nelse {\n    // Handle other topics or unexpected cases\n    node.warn(\"Unknown topic: \" + msg.topic);\n}\n\n// You can modify the message object or pass it to the next node in the flow if needed.\nreturn msg;\n",
        "outputs": 5,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 160,
        "wires": [
            [
                "580d26b79941bfa3"
            ],
            [
                "6b1ac916d25ba9ba"
            ],
            [
                "57c86b9c7a5b1164"
            ],
            [
                "48d0634dc9643159"
            ],
            [
                "1d68703ca1459e8e"
            ]
        ]
    },
    {
        "id": "e11ee0131637f547",
        "type": "function",
        "z": "f8006bed1ee01646",
        "name": "To Server",
        "func": "var msg1 = {};\nvar msg2 = {};\nvar msg3 = {};\nvar msg4 = {};\nvar msg5 = {};\n\nmsg1.topic = 'ns=3;s=\"AMR_Comm\".\"PickEnable21\";datatype=Boolean';\nmsg2.topic = 'ns=3;s=\"AMR_Comm\".\"DropEnable21\";datatype=Boolean';\nmsg3.topic = 'ns=3;s=\"AMR_Comm\".\"PickEnable22\";datatype=Boolean';\nmsg4.topic = 'ns=3;s=\"AMR_Comm\".\"DropEnable22\";datatype=Boolean';\nmsg5.topic = 'ns=3;s=\"AMR_Comm\".\"CommAlive\";datatype=Boolean';\n\nreturn [msg1, msg2, msg3, msg4, msg5];",
        "outputs": 5,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 160,
        "wires": [
            [
                "f6517187f0e5700f"
            ],
            [
                "f6517187f0e5700f"
            ],
            [
                "f6517187f0e5700f"
            ],
            [
                "f6517187f0e5700f"
            ],
            [
                "f6517187f0e5700f"
            ]
        ]
    },
    {
        "id": "148fe8d19c63355f",
        "type": "function",
        "z": "f8006bed1ee01646",
        "name": "From Server",
        "func": "var msg1 = {};\nvar msg2 = {};\nvar msg3 = {};\nvar msg4 = {};\nvar msg5 = {};\n\n\n\nif (msg.topic == 'ns=3;s=\"AMR_Comm\".\"PickEnable11\"')\n{\n    msg1.payload=msg.payload;\n    return [msg1, null, null, null, null];\n}\nif (msg.topic === 'ns=3;s=\"AMR_Comm\".\"DropEnable11\"') \n{\n    msg2.payload = msg.payload;\n    return [null, msg2, null, null, null];\n}\nelse if (msg.topic === 'ns=3;s=\"AMR_Comm\".\"PickEnable12\"') \n{\n    msg3.payload = msg.payload;\n    return [null, null, msg3, null, null];\n}\nelse if (msg.topic === 'ns=3;s=\"AMR_Comm\".\"DropEnable12\"') \n{\n    msg4.payload = msg.payload;\n    return [null, null, null, msg4, null];\n} \nelse if (msg.topic === 'ns=3;s=\"AMR_Comm\".\"CommAlive\"') \n{\n    msg5.payload = msg.payload;\n    return [null, null, null, null, msg5];\n} \nelse {\n    // Handle other topics or unexpected cases\n    node.warn(\"Unknown topic: \" + msg.topic);\n}\n\n// You can modify the message object or pass it to the next node in the flow if needed.\nreturn msg;\n",
        "outputs": 5,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 500,
        "wires": [
            [
                "734aeb7d04a51dcf"
            ],
            [
                "05b75ecc93ba805f"
            ],
            [
                "50d349b5bf4efd22"
            ],
            [
                "596e53921b5340cb"
            ],
            [
                "f23c1c98fc620fb8"
            ]
        ]
    },
    {
        "id": "05ada94cebc4645a",
        "type": "function",
        "z": "f8006bed1ee01646",
        "name": "To Server",
        "func": "var msg1 = {};\nvar msg2 = {};\nvar msg3 = {};\nvar msg4 = {};\nvar msg5 = {};\n\nmsg1.topic = 'ns=3;s=\"AMR_Comm\".\"PickEnable11\";datatype=Boolean';\nmsg2.topic = 'ns=3;s=\"AMR_Comm\".\"DropEnable11\";datatype=Boolean';\nmsg3.topic = 'ns=3;s=\"AMR_Comm\".\"PickEnable12\";datatype=Boolean';\nmsg4.topic = 'ns=3;s=\"AMR_Comm\".\"DropEnable12\";datatype=Boolean';\nmsg5.topic = 'ns=3;s=\"AMR_Comm\".\"CommAlive\";datatype=Boolean';\n\nreturn [msg1, msg2, msg3, msg4, msg5];",
        "outputs": 5,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 500,
        "wires": [
            [
                "25980ff4e1d88e1a"
            ],
            [
                "25980ff4e1d88e1a"
            ],
            [
                "25980ff4e1d88e1a"
            ],
            [
                "25980ff4e1d88e1a"
            ],
            [
                "25980ff4e1d88e1a"
            ]
        ]
    },
    {
        "id": "580d26b79941bfa3",
        "type": "link out",
        "z": "f8006bed1ee01646",
        "name": "F2 PickEnable21",
        "mode": "link",
        "links": [
            "f60a6263474157cc"
        ],
        "x": 1105,
        "y": 80,
        "wires": []
    },
    {
        "id": "6b1ac916d25ba9ba",
        "type": "link out",
        "z": "f8006bed1ee01646",
        "name": "F2 DropEnable21",
        "mode": "link",
        "links": [
            "bd1f0aabeca7434e"
        ],
        "x": 1105,
        "y": 120,
        "wires": []
    },
    {
        "id": "57c86b9c7a5b1164",
        "type": "link out",
        "z": "f8006bed1ee01646",
        "name": "F2 PickEnable22",
        "mode": "link",
        "links": [
            "02d12bba28364eb2"
        ],
        "x": 1105,
        "y": 160,
        "wires": []
    },
    {
        "id": "48d0634dc9643159",
        "type": "link out",
        "z": "f8006bed1ee01646",
        "name": "F2 DropEnable22",
        "mode": "link",
        "links": [
            "8fd7a952b5c6cca6",
            "57631b29d2f47e19"
        ],
        "x": 1105,
        "y": 200,
        "wires": []
    },
    {
        "id": "734aeb7d04a51dcf",
        "type": "link out",
        "z": "f8006bed1ee01646",
        "name": "WH PickEnable21",
        "mode": "link",
        "links": [
            "f8a1e8fc547920df"
        ],
        "x": 1105,
        "y": 420,
        "wires": []
    },
    {
        "id": "05b75ecc93ba805f",
        "type": "link out",
        "z": "f8006bed1ee01646",
        "name": "WH DropEnable21",
        "mode": "link",
        "links": [
            "4a351f1999e402eb"
        ],
        "x": 1105,
        "y": 460,
        "wires": []
    },
    {
        "id": "50d349b5bf4efd22",
        "type": "link out",
        "z": "f8006bed1ee01646",
        "name": "WH PickEnable22",
        "mode": "link",
        "links": [
            "2516bea33e61c813"
        ],
        "x": 1105,
        "y": 500,
        "wires": []
    },
    {
        "id": "596e53921b5340cb",
        "type": "link out",
        "z": "f8006bed1ee01646",
        "name": "WH DropEnable22",
        "mode": "link",
        "links": [
            "402c35812428eead"
        ],
        "x": 1105,
        "y": 540,
        "wires": []
    },
    {
        "id": "f10f37073a54ae90",
        "type": "comment",
        "z": "f8006bed1ee01646",
        "name": "Read OPC Items from Freezer 2 Conveyor",
        "info": "",
        "x": 540,
        "y": 100,
        "wires": []
    },
    {
        "id": "8495b491288e2163",
        "type": "comment",
        "z": "f8006bed1ee01646",
        "name": "Read OPC Items from Warehouse Conveyor",
        "info": "",
        "x": 550,
        "y": 440,
        "wires": []
    },
    {
        "id": "439a4c8f88fe8004",
        "type": "OpcUa-Client",
        "z": "f8006bed1ee01646",
        "endpoint": "91acb51cd428cdfe",
        "action": "write",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "useTransport": false,
        "maxChunkCount": 1,
        "maxMessageSize": 8192,
        "receiveBufferSize": 8192,
        "sendBufferSize": 8192,
        "name": "OPC Write 10.10.111.190",
        "x": 710,
        "y": 240,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "2558383cc152afe6",
        "type": "link in",
        "z": "f8006bed1ee01646",
        "name": "F2",
        "links": [
            "feb514416d81cc55"
        ],
        "x": 465,
        "y": 240,
        "wires": [
            [
                "439a4c8f88fe8004"
            ]
        ]
    },
    {
        "id": "4acbd511af987735",
        "type": "link in",
        "z": "f8006bed1ee01646",
        "name": "link in 8",
        "links": [
            "447dfb4543f11f80"
        ],
        "x": 465,
        "y": 280,
        "wires": [
            [
                "439a4c8f88fe8004"
            ]
        ]
    },
    {
        "id": "25980ff4e1d88e1a",
        "type": "OpcUa-Client",
        "z": "f8006bed1ee01646",
        "endpoint": "b428963a5d2a1933",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "useTransport": false,
        "maxChunkCount": 1,
        "maxMessageSize": 8192,
        "receiveBufferSize": 8192,
        "sendBufferSize": 8192,
        "name": "OPC Read 10.10.111.10",
        "x": 690,
        "y": 500,
        "wires": [
            [
                "148fe8d19c63355f"
            ],
            []
        ]
    },
    {
        "id": "5b5c6462845c0bdb",
        "type": "OpcUa-Client",
        "z": "f8006bed1ee01646",
        "endpoint": "b428963a5d2a1933",
        "action": "write",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "useTransport": false,
        "maxChunkCount": 1,
        "maxMessageSize": 8192,
        "receiveBufferSize": 8192,
        "sendBufferSize": 8192,
        "name": "OPC Write 10.10.111.10",
        "x": 690,
        "y": 600,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "3e5ed99de19bd5d3",
        "type": "link in",
        "z": "f8006bed1ee01646",
        "name": "F2",
        "links": [
            "d80f4ca77748be97"
        ],
        "x": 465,
        "y": 600,
        "wires": [
            [
                "5b5c6462845c0bdb"
            ]
        ]
    },
    {
        "id": "08636349ec88c0e0",
        "type": "link in",
        "z": "f8006bed1ee01646",
        "name": "link in 38",
        "links": [
            "dafb1a3aef84b531"
        ],
        "x": 465,
        "y": 640,
        "wires": [
            [
                "5b5c6462845c0bdb"
            ]
        ]
    },
    {
        "id": "20f3b1b189a355ab",
        "type": "link in",
        "z": "f8006bed1ee01646",
        "name": "SensorStatus",
        "links": [
            "c819459b05e3789a",
            "f85145c984e8dedc",
            "d98c1a31f8fa7eba",
            "a58c4c5831e5fa46",
            "035183ea3cf5a375",
            "2fdb6b19e8709314",
            "9744fd3a045abc1d",
            "c478fbb34f074ff8",
            "28b80804be7b90db",
            "e4f1920e635ab606",
            "648f1ac7000c0f9e",
            "d1f0aa15684a0b21",
            "63493dc9c9a5fc79",
            "29a91e327dbaec6c",
            "158c01e22c5521ae",
            "4160def829190743",
            "e0ecbd7a85946402",
            "69650111cded0969",
            "4819c0ce9cad0d91",
            "8b3f81d8e60c4d0a",
            "2b80a171d5b834f8",
            "7f4193af251158f5",
            "62cd50181f28c939",
            "b57ec7fee6e37235"
        ],
        "x": 465,
        "y": 360,
        "wires": [
            [
                "439a4c8f88fe8004"
            ]
        ]
    },
    {
        "id": "1d68703ca1459e8e",
        "type": "link out",
        "z": "f8006bed1ee01646",
        "name": "F2 Heartbeat",
        "mode": "link",
        "links": [
            "9b93a649d5ae81ca"
        ],
        "x": 1105,
        "y": 240,
        "wires": []
    },
    {
        "id": "f23c1c98fc620fb8",
        "type": "link out",
        "z": "f8006bed1ee01646",
        "name": "WH Heartbeat",
        "mode": "link",
        "links": [
            "40687ab04ece4013"
        ],
        "x": 1105,
        "y": 580,
        "wires": []
    },
    {
        "id": "8217909c9254d8d6",
        "type": "link in",
        "z": "f8006bed1ee01646",
        "name": "link in 46",
        "links": [
            "7fbf65f3abaa7cbf"
        ],
        "x": 465,
        "y": 320,
        "wires": [
            [
                "439a4c8f88fe8004"
            ]
        ]
    },
    {
        "id": "334118ba93f3261b",
        "type": "link in",
        "z": "f8006bed1ee01646",
        "name": "link in 47",
        "links": [
            "52c4e9bdd0b4e59c"
        ],
        "x": 465,
        "y": 680,
        "wires": [
            [
                "5b5c6462845c0bdb"
            ]
        ]
    },
    {
        "id": "95cf120dbff7b507",
        "type": "function",
        "z": "f8006bed1ee01646",
        "name": "function 122",
        "func": "// Initialize an empty array to store the payloads and topics\nvar data = [];\n\n// Loop through each global variable\nfor (var i = 1; i <= 5; i++) {\n    // Extract the payload and topic from each global variable\n    var payload = global.get(\"value\" + i).payload;\n    var topic = global.get(\"value\" + i).topic;\n\n    // Create an object to store payload and topic\n    var entry = {\n        payload: payload,\n        topic: topic\n    };\n\n    // Push the object into the data array\n    data.push(entry);\n}\n\n// Output the array containing payloads and topics\nmsg.payload = data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "919d2626274590c6",
        "type": "inject",
        "z": "f8006bed1ee01646",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 840,
        "wires": [
            [
                "95cf120dbff7b507"
            ]
        ]
    },
    {
        "id": "a8ce542865dd441b",
        "type": "modbus-read",
        "z": "b1c8721696012a4d",
        "name": "",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Input",
        "adr": "00000",
        "quantity": "6",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "8afe91b60295333b",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 270,
        "y": 320,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "9cf2761a8be67dd1",
        "type": "debug",
        "z": "b1c8721696012a4d",
        "name": "debug 34",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 160,
        "wires": []
    },
    {
        "id": "0a5a473e650db508",
        "type": "function",
        "z": "b1c8721696012a4d",
        "name": "function 63",
        "func": "// Assuming msg.payload is the array [ false, false, false, false, false, false, false, false ]\n\n// Extract the first value from the array\nvar firstValue = msg.payload[0];\n\n// Check if the first value is true\nif (firstValue === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    return msg;\n} else {\n    // If false, do nothing (no need to return anything)\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 120,
        "wires": [
            [
                "9cf2761a8be67dd1"
            ]
        ]
    },
    {
        "id": "053f31edaea63e83",
        "type": "modbus-read",
        "z": "b1c8721696012a4d",
        "name": "",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Input",
        "adr": "00000",
        "quantity": "1",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "d395581b1150fb7e",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 270,
        "y": 380,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "6519f0fd06fa0549",
        "type": "modbus-read",
        "z": "b1c8721696012a4d",
        "name": "",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Input",
        "adr": "00000",
        "quantity": "1",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "89a8d1f0ed1f4df2",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 270,
        "y": 460,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "21143beb2066ccc1",
        "type": "modbus-read",
        "z": "b1c8721696012a4d",
        "name": "",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Input",
        "adr": "00000",
        "quantity": "1",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "df80b980af8d4283",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 270,
        "y": 520,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "48334c4f8017a789",
        "type": "modbus-read",
        "z": "b1c8721696012a4d",
        "name": "",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Input",
        "adr": "00000",
        "quantity": "6",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "43a0b4825a7b24f2",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 270,
        "y": 600,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "f9fd3bb569aa4fef",
        "type": "modbus-read",
        "z": "b1c8721696012a4d",
        "name": "",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Input",
        "adr": "00000",
        "quantity": "6",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "8553a2f3.f365b8",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 270,
        "y": 680,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "cfcbf0f6d466e2db",
        "type": "modbus-read",
        "z": "b1c8721696012a4d",
        "name": "",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Input",
        "adr": "00000",
        "quantity": "6",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "b35ac684c5e83861",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 270,
        "y": 780,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "c8416a3b16ff80cf",
        "type": "modbus-read",
        "z": "b1c8721696012a4d",
        "name": "",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Input",
        "adr": "00000",
        "quantity": "1",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "08967caa27eb9505",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 270,
        "y": 840,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "d550ddc3b03dbab7",
        "type": "modbus-write",
        "z": "b1c8721696012a4d",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "18",
        "quantity": "1",
        "server": "8553a2f3.f365b8",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 680,
        "y": 240,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "2af4c097e3053672",
        "type": "inject",
        "z": "b1c8721696012a4d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 260,
        "wires": [
            [
                "88cf6d92e6771d64"
            ]
        ]
    },
    {
        "id": "88cf6d92e6771d64",
        "type": "function",
        "z": "b1c8721696012a4d",
        "name": "function 72",
        "func": "// Example code for resetting a Modbus output\nmsg.payload = {\n    value: 0,  // Set the value you want to write to the Modbus address\n};\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 260,
        "wires": [
            [
                "d550ddc3b03dbab7"
            ]
        ]
    },
    {
        "id": "6f86f246aaa56592",
        "type": "inject",
        "z": "b1c8721696012a4d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 180,
        "wires": [
            [
                "d550ddc3b03dbab7"
            ]
        ]
    },
    {
        "id": "a3beca1eba90a144",
        "type": "comment",
        "z": "b1c8721696012a4d",
        "name": "Set Modbus Value",
        "info": "",
        "x": 290,
        "y": 140,
        "wires": []
    },
    {
        "id": "a4d13535cfd76441",
        "type": "comment",
        "z": "b1c8721696012a4d",
        "name": "Set Modbus Value",
        "info": "",
        "x": 290,
        "y": 220,
        "wires": []
    },
    {
        "id": "a8301376fa86770c",
        "type": "debug",
        "z": "b1c8721696012a4d",
        "name": "debug 85",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 360,
        "wires": []
    },
    {
        "id": "ed7ef063d8388bf7",
        "type": "debug",
        "z": "b1c8721696012a4d",
        "name": "debug 86",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 400,
        "wires": []
    },
    {
        "id": "2531520e4fa9f548",
        "type": "debug",
        "z": "b1c8721696012a4d",
        "name": "debug 87",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 440,
        "wires": []
    },
    {
        "id": "aaeb49a9a5dc9f8b",
        "type": "debug",
        "z": "b1c8721696012a4d",
        "name": "debug 88",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 480,
        "wires": []
    },
    {
        "id": "521ee33457ebd5e4",
        "type": "debug",
        "z": "b1c8721696012a4d",
        "name": "debug 89",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 520,
        "wires": []
    },
    {
        "id": "02b468941e6bb157",
        "type": "debug",
        "z": "b1c8721696012a4d",
        "name": "debug 90",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 560,
        "wires": []
    },
    {
        "id": "1c69e9ed3cbb5e0b",
        "type": "subflow:002373ce227d5c67",
        "z": "b1c8721696012a4d",
        "name": "",
        "x": 850,
        "y": 420,
        "wires": [
            [
                "a8301376fa86770c"
            ],
            [
                "ed7ef063d8388bf7"
            ],
            [
                "2531520e4fa9f548"
            ],
            [
                "aaeb49a9a5dc9f8b"
            ],
            [
                "521ee33457ebd5e4"
            ],
            [
                "02b468941e6bb157"
            ]
        ]
    },
    {
        "id": "34fca0ca185c8276",
        "type": "ui_template",
        "z": "b1c8721696012a4d",
        "group": "6cf3159fc946b5bc",
        "name": "",
        "order": 1,
        "width": "6",
        "height": "18",
        "format": "<iframe src=\"http://10.10.221.14:8088/#/dashboard\" style=\"width:100%; height: 500px;\"></iframe>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 760,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "64e56ef49f692c15",
        "type": "inject",
        "z": "b1c8721696012a4d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 600,
        "y": 660,
        "wires": [
            [
                "34fca0ca185c8276"
            ]
        ]
    },
    {
        "id": "9ebe298ac3c319e8",
        "type": "function",
        "z": "7eaa40a7bd02263d",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 260,
        "wires": [
            [
                "4ab2cef4d874bff8"
            ]
        ]
    },
    {
        "id": "4ab2cef4d874bff8",
        "type": "http response",
        "z": "7eaa40a7bd02263d",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1680,
        "y": 260,
        "wires": []
    },
    {
        "id": "554054fe70e39d65",
        "type": "comment",
        "z": "7eaa40a7bd02263d",
        "name": "open door request http://sim-les.quicktron.eu:1880/door/command/open",
        "info": "{\n  \"requestId\": \"\", // uuid\n  \"doorCode\": \"\",  // 设备编码\n  \"command\": \"\"    // 暂时用不上 开门接口会传入OPEN，关门接口会传入CLOSE\n}",
        "x": 990,
        "y": 280,
        "wires": []
    },
    {
        "id": "aaba80cbb7d35e4d",
        "type": "function",
        "z": "7eaa40a7bd02263d",
        "name": "save request arg",
        "func": "\nvar response=msg.payload\nresponse.actionCode='OPEN'\nnode.warn(response)\n//151 IP\nif (response.doorCode != undefined && response.doorCode =='F2_Conveyor_Pick'){\n    flow.set(\"openArg\", response)\n    return [msg,null,null,null,null,null,null,null,null]\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "f3cbbf37263524ef",
        "type": "function",
        "z": "7eaa40a7bd02263d",
        "name": "save close door args",
        "func": "\nmsg.parameter = msg.payload\nnode.warn(\"close door request\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 700,
        "wires": [
            [
                "a53adbb186675b0c"
            ]
        ]
    },
    {
        "id": "727b1b349680917f",
        "type": "function",
        "z": "7eaa40a7bd02263d",
        "name": "save open door args",
        "func": "msg.parameter = msg.payload\n//node.warn(\"receive open door args\");\n//node.warn(msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 320,
        "wires": [
            [
                "aaba80cbb7d35e4d",
                "9ebe298ac3c319e8"
            ]
        ]
    },
    {
        "id": "5d117e716f4fbaed",
        "type": "inject",
        "z": "7eaa40a7bd02263d",
        "name": "Manual Overrite Pick/DropEnable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 950,
        "y": 520,
        "wires": [
            [
                "e96b9dab3a14768d"
            ]
        ]
    },
    {
        "id": "3baba8a6991d546d",
        "type": "http request",
        "z": "7eaa40a7bd02263d",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/door/command-finish",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1590,
        "y": 460,
        "wires": [
            [
                "d31a0be5c214d864"
            ]
        ]
    },
    {
        "id": "e96b9dab3a14768d",
        "type": "function",
        "z": "7eaa40a7bd02263d",
        "name": "get saved request arg",
        "func": "//读取modbus的值,只有读到了1,并且有当前请求开门的参数的时候该流程继续往下走\nvar readData=msg.payload\nreadData=[true]\nvar requestArg=flow.get(\"openArg\")\n\nif (requestArg != undefined && requestArg != null && requestArg.requestId!=undefined)\n{\n    //表明当前门开了\n    if (readData && readData != undefined && readData[0] == true) \n    {\n        //构造请求的参数\n        msg.payload=requestArg\n        flow.set(\"openArg\", null)\n        return msg\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 460,
        "wires": [
            [
                "3baba8a6991d546d"
            ]
        ]
    },
    {
        "id": "d31a0be5c214d864",
        "type": "function",
        "z": "7eaa40a7bd02263d",
        "name": "rcs response",
        "func": "var response=msg.payload\n//如果Rcs返回的值为true,表示已经接收了,清除掉当前的参数标识符\nnode.warn(\"门开151回报的参数:::\")\nnode.warn(response)\nif(response!=undefined && response!=null && response.success==true){\n    global.set(\"openArg\",null)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "3495f37dcf0a297a",
        "type": "function",
        "z": "7eaa40a7bd02263d",
        "name": "function 84",
        "func": "// recieve openArg\nvar requestArg = flow.get(\"openArg\")\n// array of location codes\nvar staticValues = ['0388', '//0517'];\n// Parsed location of all AMRs\nvar pointCodes = global.get(\"pointCodes\") || [];\n\n// chceck if there is data in openArg\nif (requestArg != undefined && requestArg != null && requestArg.requestId != undefined) {\n    // compare if any amr is in location\n    if (staticValues.some(value => pointCodes.includes(value))) {\n        // send command for ato out of location\n        msg.payload = requestArg;\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 600,
        "wires": [
            [
                "e96b9dab3a14768d"
            ]
        ]
    },
    {
        "id": "abeeb6e80f2c9d98",
        "type": "inject",
        "z": "7eaa40a7bd02263d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 810,
        "y": 600,
        "wires": [
            [
                "3495f37dcf0a297a"
            ]
        ]
    },
    {
        "id": "b55da49df99f3d92",
        "type": "comment",
        "z": "7eaa40a7bd02263d",
        "name": "Auto out",
        "info": "",
        "x": 800,
        "y": 560,
        "wires": []
    },
    {
        "id": "7d4dc09f9573ece2",
        "type": "comment",
        "z": "7eaa40a7bd02263d",
        "name": "Send Pick/Drop Request",
        "info": "",
        "x": 1850,
        "y": 160,
        "wires": []
    },
    {
        "id": "de83876c9e60897f",
        "type": "link in",
        "z": "7eaa40a7bd02263d",
        "name": "Open_Stand_6",
        "links": [
            "a852881eb5a3c73c",
            "f96592ff15a68b6c"
        ],
        "x": 965,
        "y": 320,
        "wires": [
            [
                "727b1b349680917f"
            ]
        ]
    },
    {
        "id": "392610ac49699888",
        "type": "link in",
        "z": "7eaa40a7bd02263d",
        "name": "Close_Stand_6",
        "links": [
            "d0428b37d8dbdaf0"
        ],
        "x": 575,
        "y": 700,
        "wires": [
            [
                "f3cbbf37263524ef"
            ]
        ]
    },
    {
        "id": "6c1e348164d28ca4",
        "type": "function",
        "z": "7eaa40a7bd02263d",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 120,
        "wires": [
            [
                "da6a42b02c152fcc",
                "c64411335b3b36a5"
            ]
        ]
    },
    {
        "id": "da6a42b02c152fcc",
        "type": "http response",
        "z": "7eaa40a7bd02263d",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1800,
        "y": 120,
        "wires": []
    },
    {
        "id": "c5ab226b61e479a9",
        "type": "function",
        "z": "7eaa40a7bd02263d",
        "name": "Check and save loaded status",
        "func": "// Extract isLoading value from the command property in the payload\nvar isLoadingValue = msg.payload.isLoading;\n\n// Save the isLoading value in a flow variable\nflow.set('isLoadingValue', isLoadingValue);\n\n// Pass the original message to the next node\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 120,
        "wires": [
            [
                "6c1e348164d28ca4"
            ]
        ]
    },
    {
        "id": "9a41103c630e31ef",
        "type": "function",
        "z": "7eaa40a7bd02263d",
        "name": "Check for DropEnable",
        "func": "// Assuming msg.payload is the array [ false, false, false, false, false, false, false, false ]\n\n// Extract the first value from the array\nvar firstValue = msg.payload[0];\n\n// Check if the first value is true\nif (firstValue === false && flow.get(\"isLoadingValue\") === true && flow.get(\"DropRequest\") === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Drop Enable\")\n    return msg;\n}\n else {\n    // If false, do nothing (no need to return anything)\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 380,
        "wires": [
            [
                "677be7c9370d21d8",
                "e96b9dab3a14768d"
            ]
        ]
    },
    {
        "id": "8e6c5a07c2872f1d",
        "type": "function",
        "z": "7eaa40a7bd02263d",
        "name": "Check for PickEnable",
        "func": "var firstValue = msg.payload;\n\nif (firstValue === true && flow.get(\"isLoadingValue\") === false && flow.get('PickRequest') === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Pick Enable\")\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 420,
        "wires": [
            [
                "e96b9dab3a14768d",
                "63ede01c7bb82a3d"
            ]
        ]
    },
    {
        "id": "677be7c9370d21d8",
        "type": "function",
        "z": "7eaa40a7bd02263d",
        "name": "Set DropBusy",
        "func": "flow.set(\"DropBusy\", true)\nnode.warn(\"DropBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 380,
        "wires": [
            [
                "9bf0a22ebb344b1d"
            ]
        ]
    },
    {
        "id": "63ede01c7bb82a3d",
        "type": "function",
        "z": "7eaa40a7bd02263d",
        "name": "Set PickBusy",
        "func": "flow.set(\"PickBusy\", true)\nnode.warn(\"PickBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 420,
        "wires": [
            [
                "0561a1dd03e5f8f8"
            ]
        ]
    },
    {
        "id": "199a5902a4ec0472",
        "type": "http request",
        "z": "7eaa40a7bd02263d",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/rcs/equipment/feedback",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1210,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "30e454af2593fdcd",
        "type": "link in",
        "z": "7eaa40a7bd02263d",
        "name": "link in 2",
        "links": [
            "5c3c8166a44107f6"
        ],
        "x": 965,
        "y": 120,
        "wires": [
            [
                "199a5902a4ec0472",
                "c5ab226b61e479a9"
            ]
        ]
    },
    {
        "id": "3eeed9cb7c1cf7b3",
        "type": "inject",
        "z": "7eaa40a7bd02263d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 480,
        "y": 1260,
        "wires": [
            [
                "2aa98a6312b4b7c8"
            ]
        ]
    },
    {
        "id": "2aa98a6312b4b7c8",
        "type": "function",
        "z": "7eaa40a7bd02263d",
        "name": "function 109",
        "func": "// Get the values of the flow variables\nvar pickRequest = flow.get('PickRequest');\nvar dropRequest = flow.get('DropRequest');\nvar pickEnable = flow.get('PickEnable');\nvar dropEnable = flow.get('DropEnable');\nvar pickBusy = flow.get('PickBusy');\nvar dropBusy = flow.get('DropBusy');\nvar isLoading = flow.get('isLoadingValue');\n\n// Log the values for debugging\nnode.warn('PickRequest: ' + pickRequest);\nnode.warn('DropRequest: ' + dropRequest);\nnode.warn('PickEnable: ' + pickEnable);\nnode.warn('DropEnable: ' + dropEnable);\nnode.warn('PickBusy: ' + pickBusy);\nnode.warn('DropBusy: ' + dropBusy);\nnode.warn('isLoading: ' + isLoading);\n\n// Add your logic to check the values\n// For example, you can check if PickEnable is true and PickBusy is false\nif (pickEnable && !pickBusy) {\n    // Your logic here\n    node.warn('Pick is enabled and not busy');\n}\n\n// Optionally, you can set the payload of the message to convey information to the next nodes\nmsg.payload = 'Values checked successfully';\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 1260,
        "wires": [
            [
                "93483e4b88b3bdd4"
            ]
        ]
    },
    {
        "id": "93483e4b88b3bdd4",
        "type": "debug",
        "z": "7eaa40a7bd02263d",
        "name": "debug 64",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 1260,
        "wires": []
    },
    {
        "id": "c64411335b3b36a5",
        "type": "function",
        "z": "7eaa40a7bd02263d",
        "name": "Pick/DropRequest",
        "func": "if (flow.get(\"isLoadingValue\") === true) \n{\n    flow.set(\"DropRequest\", true)\n    node.warn(\"Drop Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"DropRequest21\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\nelse if (flow.get(\"isLoadingValue\") === false) {\n    flow.set(\"PickRequest\", true)\n    node.warn(\"Pick Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"PickRequest21\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\n\nnode.warn(\"send pick/drop\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 200,
        "wires": [
            [
                "447dfb4543f11f80"
            ]
        ]
    },
    {
        "id": "d45f98942c5478ec",
        "type": "function",
        "z": "7eaa40a7bd02263d",
        "name": "Check for true",
        "func": "// Check if msg.payload is true\nif (msg.payload === true) {\n    // If true, return the message\n    return msg;\n}\n// If not true, do nothing (don't return anything)\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 380,
        "wires": [
            [
                "9a41103c630e31ef"
            ]
        ]
    },
    {
        "id": "9f044e66705be001",
        "type": "function",
        "z": "7eaa40a7bd02263d",
        "name": "Check for true",
        "func": "// Check if msg.payload is true\nif (msg.payload === true) {\n    // If true, return the message\n    return msg;\n}\n// If not true, do nothing (don't return anything)\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 420,
        "wires": [
            [
                "8e6c5a07c2872f1d"
            ]
        ]
    },
    {
        "id": "bd1f0aabeca7434e",
        "type": "link in",
        "z": "7eaa40a7bd02263d",
        "name": "link in 6",
        "links": [
            "6b1ac916d25ba9ba"
        ],
        "x": 545,
        "y": 380,
        "wires": [
            [
                "d45f98942c5478ec"
            ]
        ]
    },
    {
        "id": "f60a6263474157cc",
        "type": "link in",
        "z": "7eaa40a7bd02263d",
        "name": "link in 7",
        "links": [
            "580d26b79941bfa3"
        ],
        "x": 545,
        "y": 420,
        "wires": [
            [
                "9f044e66705be001"
            ]
        ]
    },
    {
        "id": "0561a1dd03e5f8f8",
        "type": "function",
        "z": "7eaa40a7bd02263d",
        "name": "OPC msg PickBusy",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"AMR_Comm\".\"PickBusy21\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 420,
        "wires": [
            [
                "447dfb4543f11f80"
            ]
        ]
    },
    {
        "id": "9bf0a22ebb344b1d",
        "type": "function",
        "z": "7eaa40a7bd02263d",
        "name": "OPC msg DropBusy",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"AMR_Comm\".\"DropBusy21\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 380,
        "wires": [
            [
                "447dfb4543f11f80"
            ]
        ]
    },
    {
        "id": "a73f6e977f075c3d",
        "type": "function",
        "z": "7eaa40a7bd02263d",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nnode.log(msg);\n\nflow.set('isLoadingValue', null);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 700,
        "wires": [
            [
                "ea6e275b75c0fd73"
            ]
        ]
    },
    {
        "id": "ea6e275b75c0fd73",
        "type": "http response",
        "z": "7eaa40a7bd02263d",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1480,
        "y": 700,
        "wires": []
    },
    {
        "id": "a53adbb186675b0c",
        "type": "function",
        "z": "7eaa40a7bd02263d",
        "name": "save close door arg",
        "func": "msg.parameter=msg.payload\nflow.set(\"closeArg\",msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 700,
        "wires": [
            [
                "a73f6e977f075c3d"
            ]
        ]
    },
    {
        "id": "e82e521a546b6d2a",
        "type": "function",
        "z": "7eaa40a7bd02263d",
        "name": "function 110",
        "func": "//flow.set(\"PickBusy\", true)\nflow.set(\"PickRequest\", false)\nflow.set(\"DropRequest\", false)\nflow.set('isLoadingValue', null);\nnode.warn('reset values')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "13221db2988cc2c6",
        "type": "comment",
        "z": "7eaa40a7bd02263d",
        "name": "Reset Pick/Drop Request",
        "info": "",
        "x": 1410,
        "y": 760,
        "wires": []
    },
    {
        "id": "6af5893f04fe8d42",
        "type": "function",
        "z": "7eaa40a7bd02263d",
        "name": "function 111",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"AMR_Comm\".\"PickRequest21\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 840,
        "wires": [
            [
                "447dfb4543f11f80"
            ]
        ]
    },
    {
        "id": "ed57f4fa04076df9",
        "type": "function",
        "z": "7eaa40a7bd02263d",
        "name": "function 112",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"AMR_Comm\".\"PickBusy21\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 960,
        "wires": [
            [
                "447dfb4543f11f80"
            ]
        ]
    },
    {
        "id": "bca056e862f02bee",
        "type": "function",
        "z": "7eaa40a7bd02263d",
        "name": "function 113",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"AMR_Comm\".\"DropBusy21\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 1000,
        "wires": [
            [
                "447dfb4543f11f80"
            ]
        ]
    },
    {
        "id": "8a7d0bed48b3902f",
        "type": "function",
        "z": "7eaa40a7bd02263d",
        "name": "function 114",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"AMR_Comm\".\"DropRequest21\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 880,
        "wires": [
            [
                "447dfb4543f11f80"
            ]
        ]
    },
    {
        "id": "447dfb4543f11f80",
        "type": "link out",
        "z": "7eaa40a7bd02263d",
        "name": "F2 Pick OPC Write",
        "mode": "link",
        "links": [
            "4acbd511af987735"
        ],
        "x": 2215,
        "y": 420,
        "wires": []
    },
    {
        "id": "eb55b2f8e51327a6",
        "type": "function",
        "z": "7eaa40a7bd02263d",
        "name": "Reset Flow Values",
        "func": "flow.set(\"PickBusy\", false);\nflow.set(\"DropBusy\", false);\nnode.warn(\"Reset Pick/Drop Busy\");\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "85e3ff2701a313fc",
        "type": "http request",
        "z": "7eaa40a7bd02263d",
        "name": "Interaction Response",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/rcs/equipment/feedback",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 940,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "20d4047261e1679d",
        "type": "link in",
        "z": "7eaa40a7bd02263d",
        "name": "link in 41",
        "links": [
            "08824f55621cecbd"
        ],
        "x": 925,
        "y": 900,
        "wires": [
            [
                "025e68e78ff00029",
                "85e3ff2701a313fc",
                "e82e521a546b6d2a",
                "6af5893f04fe8d42",
                "8a7d0bed48b3902f",
                "eb55b2f8e51327a6",
                "ed57f4fa04076df9",
                "bca056e862f02bee"
            ]
        ]
    },
    {
        "id": "025e68e78ff00029",
        "type": "function",
        "z": "7eaa40a7bd02263d",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1040,
        "wires": [
            [
                "339bcce1691d966b"
            ]
        ]
    },
    {
        "id": "339bcce1691d966b",
        "type": "http response",
        "z": "7eaa40a7bd02263d",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1140,
        "y": 1040,
        "wires": []
    },
    {
        "id": "515f6246b4872c8b",
        "type": "function",
        "z": "8e9ea22720f18ed3",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 280,
        "wires": [
            [
                "7af9113e8c98e736"
            ]
        ]
    },
    {
        "id": "7af9113e8c98e736",
        "type": "http response",
        "z": "8e9ea22720f18ed3",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1420,
        "y": 280,
        "wires": []
    },
    {
        "id": "b51896176204367b",
        "type": "comment",
        "z": "8e9ea22720f18ed3",
        "name": "open door request http://sim-les.quicktron.eu:1880/door/command/open",
        "info": "{\n  \"requestId\": \"\", // uuid\n  \"doorCode\": \"\",  // 设备编码\n  \"command\": \"\"    // 暂时用不上 开门接口会传入OPEN，关门接口会传入CLOSE\n}",
        "x": 770,
        "y": 300,
        "wires": []
    },
    {
        "id": "a5a8622f36da29d9",
        "type": "function",
        "z": "8e9ea22720f18ed3",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nnode.log(msg);\n\nflow.set('isLoadingValue', null);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 840,
        "wires": [
            [
                "39e5b84536bde951"
            ]
        ]
    },
    {
        "id": "39e5b84536bde951",
        "type": "http response",
        "z": "8e9ea22720f18ed3",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1240,
        "y": 840,
        "wires": []
    },
    {
        "id": "dddc2c4419581a90",
        "type": "function",
        "z": "8e9ea22720f18ed3",
        "name": "save close door arg",
        "func": "msg.parameter=msg.payload\nflow.set(\"closeArg\",msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 840,
        "wires": [
            [
                "a5a8622f36da29d9"
            ]
        ]
    },
    {
        "id": "7a4d84cc41b111dc",
        "type": "function",
        "z": "8e9ea22720f18ed3",
        "name": "save request arg (c)",
        "func": "\nvar response=msg.payload\nresponse.actionCode='OPEN'\nnode.warn(response)\n//151 IP\nif (response.doorCode != undefined && response.doorCode =='F2_Conveyor_Drop'){\n    flow.set(\"openArg\", response)\n    return [msg,null,null,null,null,null,null,null,null]\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "917474770759ca0f",
        "type": "function",
        "z": "8e9ea22720f18ed3",
        "name": "save close door args",
        "func": "\nmsg.parameter = msg.payload\nnode.warn(\"close door request\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 840,
        "wires": [
            [
                "dddc2c4419581a90"
            ]
        ]
    },
    {
        "id": "a72c689b8ec2136d",
        "type": "function",
        "z": "8e9ea22720f18ed3",
        "name": "save open door args",
        "func": "msg.parameter = msg.payload\n//node.warn(\"receive open door args\");\n//node.warn(msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 340,
        "wires": [
            [
                "7a4d84cc41b111dc",
                "515f6246b4872c8b"
            ]
        ]
    },
    {
        "id": "29a81ddf224580ba",
        "type": "inject",
        "z": "8e9ea22720f18ed3",
        "name": "Manual Overrite Pick/DropEnable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 650,
        "y": 600,
        "wires": [
            [
                "1fbb1b71d7b83271"
            ]
        ]
    },
    {
        "id": "6570a23b0fff7c1c",
        "type": "http request",
        "z": "8e9ea22720f18ed3",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/door/command-finish",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1370,
        "y": 580,
        "wires": [
            [
                "c91560b73eaef8bb"
            ]
        ]
    },
    {
        "id": "1fbb1b71d7b83271",
        "type": "function",
        "z": "8e9ea22720f18ed3",
        "name": "get saved request arg",
        "func": "//读取modbus的值,只有读到了1,并且有当前请求开门的参数的时候该流程继续往下走\nvar readData=msg.payload\nreadData=[true]\nvar requestArg=flow.get(\"openArg\")\n\nif (requestArg != undefined && requestArg != null && requestArg.requestId!=undefined)\n{\n    //表明当前门开了\n    if (readData && readData != undefined && readData[0] == true) \n    {\n        //构造请求的参数\n        msg.payload=requestArg\n        flow.set(\"openArg\", null)\n        return msg\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 580,
        "wires": [
            [
                "6570a23b0fff7c1c"
            ]
        ]
    },
    {
        "id": "c91560b73eaef8bb",
        "type": "function",
        "z": "8e9ea22720f18ed3",
        "name": "rcs response",
        "func": "var response=msg.payload\n\n\nnode.warn(response)\nif(response!=undefined && response!=null && response.success==true){\n    global.set(\"openArg\",null)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "fa97e7397c800731",
        "type": "function",
        "z": "8e9ea22720f18ed3",
        "name": "AutoOut (c)",
        "func": "// recieve openArg\nvar requestArg = flow.get(\"openArg\")\n// array of location codes\nvar staticValues = ['0386'];\n// Parsed location of all AMRs\nvar pointCodes = global.get(\"pointCodes\") || [];\n\n// chceck if there is data in openArg\nif (requestArg != undefined && requestArg != null && requestArg.requestId != undefined) {\n    // compare if any amr is in location\n    if (staticValues.some(value => pointCodes.includes(value))) {\n        // send command for ato out of location\n        msg.payload = requestArg;\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 700,
        "wires": [
            [
                "1fbb1b71d7b83271"
            ]
        ]
    },
    {
        "id": "4c7918ffbb2d589e",
        "type": "inject",
        "z": "8e9ea22720f18ed3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 530,
        "y": 700,
        "wires": [
            [
                "fa97e7397c800731"
            ]
        ]
    },
    {
        "id": "f55ace57c2a51a1b",
        "type": "comment",
        "z": "8e9ea22720f18ed3",
        "name": "Auto out",
        "info": "",
        "x": 520,
        "y": 660,
        "wires": []
    },
    {
        "id": "8cc149afafc1ff7c",
        "type": "function",
        "z": "8e9ea22720f18ed3",
        "name": "Reset Flow Values",
        "func": "//flow.set(\"PickBusy\", true)\nflow.set(\"PickRequest\", false)\nflow.set(\"DropRequest\", false)\nflow.set('isLoadingValue', null);\nnode.warn('reset values')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "34470ba8afa47930",
        "type": "comment",
        "z": "8e9ea22720f18ed3",
        "name": "Send Pick/Drop Request",
        "info": "",
        "x": 1630,
        "y": 180,
        "wires": []
    },
    {
        "id": "ef01270e798a3c9b",
        "type": "comment",
        "z": "8e9ea22720f18ed3",
        "name": "Reset Pick/Drop Request",
        "info": "",
        "x": 1150,
        "y": 900,
        "wires": []
    },
    {
        "id": "048678cfca90db64",
        "type": "link in",
        "z": "8e9ea22720f18ed3",
        "name": "Open_Stand_6",
        "links": [
            "9610573f0f81ae3e",
            "85c43d1098987d36"
        ],
        "x": 745,
        "y": 340,
        "wires": [
            [
                "a72c689b8ec2136d"
            ]
        ]
    },
    {
        "id": "257b9a57bbee9311",
        "type": "link in",
        "z": "8e9ea22720f18ed3",
        "name": "Close_Stand_6",
        "links": [
            "6a012176094c94af",
            "fad8a7b2eca7aa55"
        ],
        "x": 345,
        "y": 840,
        "wires": [
            [
                "917474770759ca0f"
            ]
        ]
    },
    {
        "id": "936b55586cf332de",
        "type": "function",
        "z": "8e9ea22720f18ed3",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 140,
        "wires": [
            [
                "2c6158096742470e",
                "0bab48f43b3c83e2"
            ]
        ]
    },
    {
        "id": "2c6158096742470e",
        "type": "http response",
        "z": "8e9ea22720f18ed3",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1580,
        "y": 140,
        "wires": []
    },
    {
        "id": "3c2d90cd9fedb9a4",
        "type": "function",
        "z": "8e9ea22720f18ed3",
        "name": "Check and save loaded status",
        "func": "// Extract isLoading value from the command property in the payload\nvar isLoadingValue = msg.payload.isLoading;\n\n// Save the isLoading value in a flow variable\nflow.set('isLoadingValue', isLoadingValue);\n\n// Pass the original message to the next node\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 140,
        "wires": [
            [
                "936b55586cf332de"
            ]
        ]
    },
    {
        "id": "67ee97bf08bb1770",
        "type": "function",
        "z": "8e9ea22720f18ed3",
        "name": "Check for DropEnable",
        "func": "// Assuming msg.payload is the array [ false, false, false, false, false, false, false, false ]\n\n// Extract the first value from the array\nvar firstValue = msg.payload;\n\n// Check if the first value is true\nif (firstValue === true && flow.get(\"isLoadingValue\") === true && flow.get(\"DropRequest\") === true) {\n    // If true, send only the first value to the next node\n    msg.payload = true;\n    node.warn(\"Drop Enable\")\n    return msg;\n}\n else {\n    // If false, do nothing (no need to return anything)\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 500,
        "wires": [
            [
                "76cbf525217dc355",
                "1fbb1b71d7b83271"
            ]
        ]
    },
    {
        "id": "6782e7de507a30e2",
        "type": "function",
        "z": "8e9ea22720f18ed3",
        "name": "Check for PickEnable",
        "func": "var firstValue = msg.payload;\n\nif (firstValue === true && flow.get(\"isLoadingValue\") === false && flow.get('PickRequest') === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Pick Enable\")\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 540,
        "wires": [
            [
                "1fbb1b71d7b83271",
                "b374496aba0c8c6e"
            ]
        ]
    },
    {
        "id": "76cbf525217dc355",
        "type": "function",
        "z": "8e9ea22720f18ed3",
        "name": "Set DropBusy",
        "func": "flow.set(\"DropBusy\", true)\nnode.warn(\"DropBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 500,
        "wires": [
            [
                "86e34da6ae5a7e69"
            ]
        ]
    },
    {
        "id": "b374496aba0c8c6e",
        "type": "function",
        "z": "8e9ea22720f18ed3",
        "name": "Set PickBusy",
        "func": "flow.set(\"PickBusy\", true)\nnode.warn(\"PickBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 540,
        "wires": [
            [
                "7bfc0bcf64f36385"
            ]
        ]
    },
    {
        "id": "b0b49e07e596611f",
        "type": "http request",
        "z": "8e9ea22720f18ed3",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/rcs/equipment/feedback",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 990,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "827173056a5e5b4f",
        "type": "link in",
        "z": "8e9ea22720f18ed3",
        "name": "link in 3",
        "links": [
            "1bcf745b87066337"
        ],
        "x": 745,
        "y": 140,
        "wires": [
            [
                "b0b49e07e596611f",
                "3c2d90cd9fedb9a4"
            ]
        ]
    },
    {
        "id": "60150e181e6080eb",
        "type": "function",
        "z": "8e9ea22720f18ed3",
        "name": "Check for true",
        "func": "// Check if msg.payload is true\nif (msg.payload === true) {\n    // If true, return the message\n    return msg;\n}\n// If not true, do nothing (don't return anything)\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 500,
        "wires": [
            [
                "67ee97bf08bb1770"
            ]
        ]
    },
    {
        "id": "7bfc0bcf64f36385",
        "type": "function",
        "z": "8e9ea22720f18ed3",
        "name": "OPC msg PickBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"AMR_Comm\".\"PickBusy22\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 540,
        "wires": [
            [
                "feb514416d81cc55"
            ]
        ]
    },
    {
        "id": "0d9d78947968f857",
        "type": "function",
        "z": "8e9ea22720f18ed3",
        "name": "Reset Pick Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"AMR_Comm\".\"PickRequest22\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 980,
        "wires": [
            [
                "feb514416d81cc55"
            ]
        ]
    },
    {
        "id": "50e9794904ada40b",
        "type": "function",
        "z": "8e9ea22720f18ed3",
        "name": "Reset Pick Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"AMR_Comm\".\"PickBusy22\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "86e34da6ae5a7e69",
        "type": "function",
        "z": "8e9ea22720f18ed3",
        "name": "OPC msg DropBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"AMR_Comm\".\"DropBusy22\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 500,
        "wires": [
            [
                "feb514416d81cc55"
            ]
        ]
    },
    {
        "id": "9f2000628ecc414d",
        "type": "function",
        "z": "8e9ea22720f18ed3",
        "name": "Resset Drop Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"AMR_Comm\".\"DropBusy22\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 1140,
        "wires": [
            [
                "feb514416d81cc55"
            ]
        ]
    },
    {
        "id": "0bab48f43b3c83e2",
        "type": "function",
        "z": "8e9ea22720f18ed3",
        "name": "Pick/DropRequest (c)",
        "func": "if (flow.get(\"isLoadingValue\") === true) \n{\n    flow.set(\"DropRequest\", true)\n    node.warn(\"Drop Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"DropRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\nelse if (flow.get(\"isLoadingValue\") === false) {\n    flow.set(\"PickRequest\", true)\n    node.warn(\"Pick Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"PickRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 220,
        "wires": [
            [
                "feb514416d81cc55"
            ]
        ]
    },
    {
        "id": "3786b14dc39abc6b",
        "type": "inject",
        "z": "8e9ea22720f18ed3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 640,
        "y": 1220,
        "wires": [
            [
                "2142de91d125f8fe"
            ]
        ]
    },
    {
        "id": "2142de91d125f8fe",
        "type": "function",
        "z": "8e9ea22720f18ed3",
        "name": "function 104",
        "func": "// Get the values of the flow variables\nvar pickRequest = flow.get('PickRequest');\nvar dropRequest = flow.get('DropRequest');\nvar pickEnable = flow.get('PickEnable');\nvar dropEnable = flow.get('DropEnable');\nvar pickBusy = flow.get('PickBusy');\nvar dropBusy = flow.get('DropBusy');\nvar isLoading = flow.get('isLoadingValue');\n\n// Log the values for debugging\nnode.warn('PickRequest: ' + pickRequest);\nnode.warn('DropRequest: ' + dropRequest);\nnode.warn('PickEnable: ' + pickEnable);\nnode.warn('DropEnable: ' + dropEnable);\nnode.warn('PickBusy: ' + pickBusy);\nnode.warn('DropBusy: ' + dropBusy);\nnode.warn('isLoading: ' + isLoading);\n\n// Add your logic to check the values\n// For example, you can check if PickEnable is true and PickBusy is false\nif (pickEnable && !pickBusy) {\n    // Your logic here\n    node.warn('Pick is enabled and not busy');\n}\n\n// Optionally, you can set the payload of the message to convey information to the next nodes\nmsg.payload = 'Values checked successfully';\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1220,
        "wires": [
            [
                "d5d5e7b706abae97"
            ]
        ]
    },
    {
        "id": "d5d5e7b706abae97",
        "type": "debug",
        "z": "8e9ea22720f18ed3",
        "name": "debug 60",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 1220,
        "wires": []
    },
    {
        "id": "b30919c50448cb19",
        "type": "function",
        "z": "8e9ea22720f18ed3",
        "name": "Reset Drop Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"AMR_Comm\".\"DropRequest22\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 1020,
        "wires": [
            [
                "feb514416d81cc55"
            ]
        ]
    },
    {
        "id": "0639164c10c71e0b",
        "type": "function",
        "z": "8e9ea22720f18ed3",
        "name": "Check for true",
        "func": "// Check if msg.payload is true\nif (msg.payload === true) {\n    // If true, return the message\n    return msg;\n}\n// If not true, do nothing (don't return anything)\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 540,
        "wires": [
            [
                "6782e7de507a30e2"
            ]
        ]
    },
    {
        "id": "8fd7a952b5c6cca6",
        "type": "link in",
        "z": "8e9ea22720f18ed3",
        "name": "link in 4",
        "links": [
            "48d0634dc9643159"
        ],
        "x": 355,
        "y": 500,
        "wires": [
            [
                "60150e181e6080eb"
            ]
        ]
    },
    {
        "id": "02d12bba28364eb2",
        "type": "link in",
        "z": "8e9ea22720f18ed3",
        "name": "link in 5",
        "links": [
            "57c86b9c7a5b1164"
        ],
        "x": 355,
        "y": 540,
        "wires": [
            [
                "0639164c10c71e0b"
            ]
        ]
    },
    {
        "id": "feb514416d81cc55",
        "type": "link out",
        "z": "8e9ea22720f18ed3",
        "name": "F2 Drop OPC Write",
        "mode": "link",
        "links": [
            "2558383cc152afe6"
        ],
        "x": 2005,
        "y": 540,
        "wires": []
    },
    {
        "id": "ea4942572496bb2f",
        "type": "http request",
        "z": "8e9ea22720f18ed3",
        "name": "Interaction Response",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/rcs/equipment/feedback",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 660,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "a3ae8cd2b277b030",
        "type": "link in",
        "z": "8e9ea22720f18ed3",
        "name": "link in 40",
        "links": [
            "e11c0be0f2a6d0f2"
        ],
        "x": 645,
        "y": 980,
        "wires": [
            [
                "221c2858c82a7ad7",
                "ea4942572496bb2f",
                "8cc149afafc1ff7c",
                "0d9d78947968f857",
                "b30919c50448cb19",
                "7807f766e5fb239b",
                "50e9794904ada40b",
                "9f2000628ecc414d"
            ]
        ]
    },
    {
        "id": "221c2858c82a7ad7",
        "type": "function",
        "z": "8e9ea22720f18ed3",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1120,
        "wires": [
            [
                "2716e14bcf44741f"
            ]
        ]
    },
    {
        "id": "2716e14bcf44741f",
        "type": "http response",
        "z": "8e9ea22720f18ed3",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 860,
        "y": 1120,
        "wires": []
    },
    {
        "id": "7807f766e5fb239b",
        "type": "function",
        "z": "8e9ea22720f18ed3",
        "name": "Reset Flow Values",
        "func": "flow.set(\"PickBusy\", false);\nflow.set(\"DropBusy\", false);\nnode.warn(\"Reset Pick/Drop Busy\");\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "a6ae49545622c5a0",
        "type": "function",
        "z": "c451f3405f6aaa4f",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 60,
        "wires": [
            [
                "8e0be17abcc5a855"
            ]
        ]
    },
    {
        "id": "8e0be17abcc5a855",
        "type": "http response",
        "z": "c451f3405f6aaa4f",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1100,
        "y": 60,
        "wires": []
    },
    {
        "id": "8c977e4d6686f66a",
        "type": "comment",
        "z": "c451f3405f6aaa4f",
        "name": "open door request http://sim-les.quicktron.eu:1880/door/command/open",
        "info": "{\n  \"requestId\": \"\", // uuid\n  \"doorCode\": \"\",  // 设备编码\n  \"command\": \"\"    // 暂时用不上 开门接口会传入OPEN，关门接口会传入CLOSE\n}",
        "x": 330,
        "y": 100,
        "wires": []
    },
    {
        "id": "dd0db87dfbb7434e",
        "type": "function",
        "z": "c451f3405f6aaa4f",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nnode.log(msg);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 460,
        "wires": [
            [
                "4d486ed43d6bdd1a"
            ]
        ]
    },
    {
        "id": "4d486ed43d6bdd1a",
        "type": "http response",
        "z": "c451f3405f6aaa4f",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1240,
        "y": 460,
        "wires": []
    },
    {
        "id": "8c920cc4b838971d",
        "type": "comment",
        "z": "c451f3405f6aaa4f",
        "name": "close door request  http://sim-les.quicktron.eu:1880/door/command/close",
        "info": "{\n  \"requestId\": \"\", // uuid\n  \"doorCode\": \"\",  // 设备编码\n  \"command\": \"\"    // 暂时用不上 开门接口会传入OPEN，关门接口会传入CLOSE\n}",
        "x": 250,
        "y": 520,
        "wires": []
    },
    {
        "id": "aa8b288dcfbd2d24",
        "type": "function",
        "z": "c451f3405f6aaa4f",
        "name": "save close door arg",
        "func": "msg.parameter=msg.payload\nflow.set(\"closeArg\",msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 460,
        "wires": [
            [
                "dd0db87dfbb7434e"
            ]
        ]
    },
    {
        "id": "a5b56053aa63d915",
        "type": "function",
        "z": "c451f3405f6aaa4f",
        "name": "save request arg",
        "func": "\nvar response=msg.payload\nresponse.actionCode='OPEN'\nnode.warn(response)\n//151 IP\nif (response.doorCode != undefined && response.doorCode =='FastDoor_1'){\n    flow.set(\"openArg\", response)\n    return [msg,null,null,null,null,null,null,null,null]\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 160,
        "wires": [
            [
                "1e5f5912f4a2391a"
            ]
        ]
    },
    {
        "id": "5862b1a2eac81f37",
        "type": "function",
        "z": "c451f3405f6aaa4f",
        "name": "save close door args",
        "func": "\nmsg.parameter = msg.payload\nnode.warn(\"close door request\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 560,
        "wires": [
            [
                "aa8b288dcfbd2d24",
                "1bf685887a5f3cca"
            ]
        ]
    },
    {
        "id": "d0c79e1e14090c36",
        "type": "function",
        "z": "c451f3405f6aaa4f",
        "name": "save open door args",
        "func": "msg.parameter = msg.payload\n//node.warn(\"receive open door args\");\n//node.warn(msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 160,
        "wires": [
            [
                "a5b56053aa63d915",
                "a6ae49545622c5a0"
            ]
        ]
    },
    {
        "id": "1bf685887a5f3cca",
        "type": "function",
        "z": "c451f3405f6aaa4f",
        "name": "write to modbus？？？",
        "func": "\nvar response=msg.payload\n//151 IP\nif (response.doorCode != undefined && response.doorCode =='Door_1'){\n    return [msg, null, null, null, null, null, null, null, null]\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "56fefcaa47614d10",
        "type": "inject",
        "z": "c451f3405f6aaa4f",
        "name": "Manual overwrite door open",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 240,
        "wires": [
            [
                "ba135b3c2e9f6294"
            ]
        ]
    },
    {
        "id": "c11ba8323bf2bd8c",
        "type": "http request",
        "z": "c451f3405f6aaa4f",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/door/command-finish",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 870,
        "y": 300,
        "wires": [
            [
                "4a0e2d7e8340e10e",
                "fb77831ff04ee781"
            ]
        ]
    },
    {
        "id": "ba135b3c2e9f6294",
        "type": "function",
        "z": "c451f3405f6aaa4f",
        "name": "get saved request arg",
        "func": "//读取modbus的值,只有读到了1,并且有当前请求开门的参数的时候该流程继续往下走\nvar readData=msg.payload\nreadData=[true]\nvar requestArg=flow.get(\"openArg\")\n\nif (requestArg != undefined && requestArg != null && requestArg.requestId!=undefined)\n{\n    //表明当前门开了\n    if (readData && readData != undefined && readData[0] == true) \n    {\n        //构造请求的参数\n        msg.payload=requestArg\n        flow.set(\"openArg\", null)\n        return msg\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 300,
        "wires": [
            [
                "c11ba8323bf2bd8c"
            ]
        ]
    },
    {
        "id": "4a0e2d7e8340e10e",
        "type": "function",
        "z": "c451f3405f6aaa4f",
        "name": "rcs response",
        "func": "var response=msg.payload\n//如果Rcs返回的值为true,表示已经接收了,清除掉当前的参数标识符\nnode.warn(\"门开151回报的参数:::\")\nnode.warn(response)\nif(response!=undefined && response!=null && response.success==true){\n    global.set(\"openArg\",null)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "8e67fb24a3f44d4a",
        "type": "link in",
        "z": "c451f3405f6aaa4f",
        "name": "Open_FastDoor_1",
        "links": [
            "090e89d64d4f4ee1",
            "5403bda18ad1785b",
            "e03eec9c4482024d"
        ],
        "x": 335,
        "y": 160,
        "wires": [
            [
                "d0c79e1e14090c36"
            ]
        ]
    },
    {
        "id": "634d0212f5a27d1f",
        "type": "comment",
        "z": "c451f3405f6aaa4f",
        "name": "Open Door",
        "info": "",
        "x": 1060,
        "y": 120,
        "wires": []
    },
    {
        "id": "12c8895df2224aac",
        "type": "comment",
        "z": "c451f3405f6aaa4f",
        "name": "Close Door",
        "info": "",
        "x": 940,
        "y": 560,
        "wires": []
    },
    {
        "id": "380ae2f01fc89255",
        "type": "link in",
        "z": "c451f3405f6aaa4f",
        "name": "Close_Stand_1",
        "links": [
            "2040030dd0b19c0b"
        ],
        "x": 215,
        "y": 560,
        "wires": [
            [
                "5862b1a2eac81f37"
            ]
        ]
    },
    {
        "id": "fb77831ff04ee781",
        "type": "function",
        "z": "c451f3405f6aaa4f",
        "name": "function 60",
        "func": "node.warn(\"Door is open\");",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "1e5f5912f4a2391a",
        "type": "function",
        "z": "c451f3405f6aaa4f",
        "name": "function 62",
        "func": "flow.set(\"DoorOpen\", true)\nnode.warn(\"Opening Door\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 160,
        "wires": [
            [
                "09027e4ea484c8f8"
            ]
        ]
    },
    {
        "id": "5c0f417fa7d1ce95",
        "type": "modbus-write",
        "z": "c451f3405f6aaa4f",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "18",
        "quantity": "1",
        "server": "8553a2f3.f365b8",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1280,
        "y": 220,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "c95ae044df412019",
        "type": "function",
        "z": "c451f3405f6aaa4f",
        "name": "Check for Enable",
        "func": "// Assuming msg.payload is the array [ false, false, false, false, false, false, false, false ]\n\n// Extract the first value from the array\nvar firstValue = msg.payload[0];\n\n// Check if the first value is true\nif (firstValue === false) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    return msg;\n}\n else {\n    // If false, do nothing (no need to return anything)\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 300,
        "wires": [
            [
                "ba135b3c2e9f6294",
                "8015493b77937fda"
            ]
        ]
    },
    {
        "id": "841ed9debf646eec",
        "type": "modbus-read",
        "z": "c451f3405f6aaa4f",
        "name": "",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Input",
        "adr": "00000",
        "quantity": "1",
        "rate": "3",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "8553a2f3.f365b8",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 130,
        "y": 300,
        "wires": [
            [
                "c95ae044df412019"
            ],
            []
        ]
    },
    {
        "id": "59c49882d247f0a4",
        "type": "function",
        "z": "c451f3405f6aaa4f",
        "name": "function 77",
        "func": "// Example code for resetting a Modbus output\nmsg.payload = {\n    value: 0,  // Set the value you want to write to the Modbus address\n};\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 760,
        "wires": [
            [
                "46d05f01c06248f2"
            ]
        ]
    },
    {
        "id": "09027e4ea484c8f8",
        "type": "function",
        "z": "c451f3405f6aaa4f",
        "name": "function 78",
        "func": "// Example code for resetting a Modbus output\nmsg.payload = {\n    value: 1,  // Set the value you want to write to the Modbus address\n};\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 220,
        "wires": [
            [
                "5c0f417fa7d1ce95",
                "10f93b0be617851d"
            ]
        ]
    },
    {
        "id": "46d05f01c06248f2",
        "type": "modbus-write",
        "z": "c451f3405f6aaa4f",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Coil",
        "adr": "18",
        "quantity": "1",
        "server": "8553a2f3.f365b8",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 940,
        "y": 760,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "10f93b0be617851d",
        "type": "debug",
        "z": "c451f3405f6aaa4f",
        "name": "debug 58",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 160,
        "wires": []
    },
    {
        "id": "219be69726924a36",
        "type": "link in",
        "z": "c451f3405f6aaa4f",
        "name": "link in 43",
        "links": [
            "51ec4c1416f777ec",
            "dcb26bc1703619dc"
        ],
        "x": 245,
        "y": 760,
        "wires": [
            [
                "65aa2f3743d94544",
                "f7604e6c2366d2b4",
                "632134d88e874f56"
            ]
        ]
    },
    {
        "id": "65aa2f3743d94544",
        "type": "http request",
        "z": "c451f3405f6aaa4f",
        "name": "Interaction Response",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/rcs/equipment/feedback",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 540,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "f7604e6c2366d2b4",
        "type": "function",
        "z": "c451f3405f6aaa4f",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 700,
        "wires": [
            [
                "5ca82b82fb4abfdd"
            ]
        ]
    },
    {
        "id": "5ca82b82fb4abfdd",
        "type": "http response",
        "z": "c451f3405f6aaa4f",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 740,
        "y": 700,
        "wires": []
    },
    {
        "id": "632134d88e874f56",
        "type": "delay",
        "z": "c451f3405f6aaa4f",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 500,
        "y": 760,
        "wires": [
            [
                "59c49882d247f0a4"
            ]
        ]
    },
    {
        "id": "8015493b77937fda",
        "type": "debug",
        "z": "c451f3405f6aaa4f",
        "name": "debug 91",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 380,
        "wires": []
    },
    {
        "id": "54ac84613531180b",
        "type": "inject",
        "z": "5ec9ee5b05691a00",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "288",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 80,
        "wires": [
            [
                "14d0510a5c21c506"
            ]
        ]
    },
    {
        "id": "eb9f39adb700e0e4",
        "type": "http request",
        "z": "5ec9ee5b05691a00",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/rss/warehouse/1/transport-order/carrier/submit",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 590,
        "y": 320,
        "wires": [
            [
                "6b46047067b0f8fd"
            ]
        ]
    },
    {
        "id": "6b46047067b0f8fd",
        "type": "debug",
        "z": "5ec9ee5b05691a00",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 320,
        "wires": []
    },
    {
        "id": "ee7ed381afdfa928",
        "type": "comment",
        "z": "5ec9ee5b05691a00",
        "name": "Flow Packaging -> Freezer 2",
        "info": "Packaging:\n[\"0458\",\"0457\",\"0533\",\"0530\",\"0527\",\"0524\"]\n\nHandOver1:\n    Drop: 0388",
        "x": 180,
        "y": 40,
        "wires": []
    },
    {
        "id": "14d0510a5c21c506",
        "type": "function",
        "z": "5ec9ee5b05691a00",
        "name": "function 4",
        "func": "// Define your list of strings\nconst sourceList = [\"0503\", \"0506\", \"0509\", \"0512\", \"0515\"];\n\n// Select a random value from the list\nconst chosenValue = sourceList[Math.floor(Math.random() * sourceList.length)];\n\nconst randomHex = Math.random().toString(16).slice(2, 10);\n\n// Create the payload object\nconst payload = \n[{ \n    deadline: \"\", \n    startPoint: chosenValue,\n    startMapCode: \"SIVA\",\n    targetPoint: \"0386\",\n    targetMapCode: \"SIVA\",\n    rackTypeCode: \"EURO\",\n    needOut: 1,\n    needOperation: false,\n    letDownFlag: 2,\n    jobPriority: 1,\n    upstreamOrderNo: randomHex,\n    waitPoint: [\"0082\", \"0084\", \"0086\"]\n}];\n\n// Set the payload\nmsg.payload = payload;\n\n// Return the modified message object\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "f097e7df8e4575a9",
        "type": "function",
        "z": "5ec9ee5b05691a00",
        "name": "function 6",
        "func": "// Define your list of strings\nconst sourceList = [\"StorageArea_975\"];\n\n// Select a random value from the list\nconst chosenValue = sourceList[Math.floor(Math.random() * sourceList.length)];\n\nconst randomHex = Math.random().toString(16).slice(2, 10);\n\n// Create the payload object\nconst payload = \n[{ \n    deadline: \"\", \n    startPoint: \"0388\",\n    startMapCode: \"SIVA\",\n    targetArea: chosenValue,\n    targetMapCode: \"SIVA\",\n    rackTypeCode: \"EURO\",\n    needOut: 1,\n    needOperation: false,\n    letDownFlag: 2,\n    jobPriority: 2,\n    upstreamOrderNo: randomHex\n}];\n\n// Set the payload\nmsg.payload = payload;\n\n// Return the modified message object\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "669dee78e8f6a6c4",
        "type": "inject",
        "z": "5ec9ee5b05691a00",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "290",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 160,
        "wires": [
            [
                "f097e7df8e4575a9"
            ]
        ]
    },
    {
        "id": "40c9a845a7557db6",
        "type": "comment",
        "z": "5ec9ee5b05691a00",
        "name": "Flow Freezer 2 -> Packing",
        "info": "Packaging:\n[\"0458\",\"0457\",\"0533\",\"0530\",\"0527\",\"0524\"]\n\nHandOver1:\n    Drop: 0388",
        "x": 170,
        "y": 120,
        "wires": []
    },
    {
        "id": "01c05dcbb69e618c",
        "type": "function",
        "z": "5ec9ee5b05691a00",
        "name": "function 7",
        "func": "// Define your list of strings\nconst sourceList = [\"0355\", \"0354\", \"0357\",];\n\n// Select a random value from the list\nconst chosenValue = sourceList[Math.floor(Math.random() * sourceList.length)];\n\nconst randomHex = Math.random().toString(16).slice(2, 10);\n\n// Create the payload object\nconst payload = \n[{ \n    deadline: \"\", \n    startPoint: chosenValue,\n    startMapCode: \"SIVA\",\n    targetPoint: \"0362\",\n    targetMapCode: \"SIVA\",\n    rackTypeCode: \"EURO\",\n    needOut: 1,\n    needOperation: false,\n    letDownFlag: 2,\n    jobPriority: 3,\n    upstreamOrderNo: randomHex,\n    awaitArea: \"StationArea_363\"\n}];\n\n// Set the payload\nmsg.payload = payload;\n\n// Return the modified message object\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "7eddd168cc0103ad",
        "type": "inject",
        "z": "5ec9ee5b05691a00",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "510",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 240,
        "wires": [
            [
                "01c05dcbb69e618c"
            ]
        ]
    },
    {
        "id": "32d1eea2e280dca5",
        "type": "comment",
        "z": "5ec9ee5b05691a00",
        "name": "Flow Handover 2 -> WH",
        "info": "Packaging:\n[\"0458\",\"0457\",\"0533\",\"0530\",\"0527\",\"0524\"]\n\nHandOver1:\n    Drop: 0388",
        "x": 160,
        "y": 200,
        "wires": []
    },
    {
        "id": "13c51b22bf3abad7",
        "type": "function",
        "z": "5ec9ee5b05691a00",
        "name": "function 8",
        "func": "// Define your list of strings\nconst sourceList = [\"0271\", \"0273\", \"0544\"];\n\n// Select a random value from the list\nconst chosenValue = sourceList[Math.floor(Math.random() * sourceList.length)];\n\nconst randomHex = Math.random().toString(16).slice(2, 10);\n\n// Create the payload object\nconst payload = \n[{ \n    deadline: \"\", \n    startPoint: chosenValue,\n    startMapCode: \"SIVA\",\n    targetPoint: \"0362\",\n    targetMapCode: \"SIVA\",\n    rackTypeCode: \"EURO\",\n    needOut: 1,\n    needOperation: false,\n    letDownFlag: 2,\n    jobPriority: 4,\n    upstreamOrderNo: randomHex,\n    awaitArea: \"StationArea_363\"\n}];\n\n// Set the payload\nmsg.payload = payload;\n\n// Return the modified message object\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "03c46175bc686812",
        "type": "inject",
        "z": "5ec9ee5b05691a00",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "900",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 320,
        "wires": [
            [
                "13c51b22bf3abad7"
            ]
        ]
    },
    {
        "id": "a04763a710616a53",
        "type": "comment",
        "z": "5ec9ee5b05691a00",
        "name": "Flow Handover 3 -> WH",
        "info": "Packaging:\n[\"0458\",\"0457\",\"0533\",\"0530\",\"0527\",\"0524\"]\n\nHandOver1:\n    Drop: 0388",
        "x": 160,
        "y": 280,
        "wires": []
    },
    {
        "id": "1b5d3cc91d8734ae",
        "type": "inject",
        "z": "5ec9ee5b05691a00",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "18000",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 400,
        "wires": [
            [
                "39ea8a4ba201898d"
            ]
        ]
    },
    {
        "id": "1992fff1df46337b",
        "type": "comment",
        "z": "5ec9ee5b05691a00",
        "name": "Flow Freezer 2 -> Reject",
        "info": "Packaging:\n[\"0458\",\"0457\",\"0533\",\"0530\",\"0527\",\"0524\"]\n\nHandOver1:\n    Drop: 0388",
        "x": 170,
        "y": 360,
        "wires": []
    },
    {
        "id": "39ea8a4ba201898d",
        "type": "function",
        "z": "5ec9ee5b05691a00",
        "name": "function 9",
        "func": "// Define your list of strings\nconst sourceList = [\"StorageArea_173\"];\n\n// Select a random value from the list\nconst chosenValue = sourceList[Math.floor(Math.random() * sourceList.length)];\n\nconst randomHex = Math.random().toString(16).slice(2, 10);\n\n// Create the payload object\nconst payload = \n[{ \n    deadline: \"\", \n    startPoint: \"0388\",\n    startMapCode: \"SIVA\",\n    targetArea: chosenValue,\n    targetMapCode: \"SIVA\",\n    rackTypeCode: \"EURO\",\n    needOut: 1,\n    needOperation: false,\n    letDownFlag: 2,\n    jobPriority: 5,\n    upstreamOrderNo: randomHex\n}];\n\n// Set the payload\nmsg.payload = payload;\n\n// Return the modified message object\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "5b51c9ab3ee206a9",
        "type": "inject",
        "z": "5ec9ee5b05691a00",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1800",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 480,
        "wires": [
            [
                "bc48dce38c056ab6"
            ]
        ]
    },
    {
        "id": "0a16306fbdfdb879",
        "type": "comment",
        "z": "5ec9ee5b05691a00",
        "name": "Flow Freezer 2 -> H4",
        "info": "Packaging:\n[\"0458\",\"0457\",\"0533\",\"0530\",\"0527\",\"0524\"]\n\nHandOver1:\n    Drop: 0388",
        "x": 160,
        "y": 440,
        "wires": []
    },
    {
        "id": "bc48dce38c056ab6",
        "type": "function",
        "z": "5ec9ee5b05691a00",
        "name": "function 10",
        "func": "// Define your list of strings\nconst sourceList = [\"StorageArea_308\"];\n\n// Select a random value from the list\nconst chosenValue = sourceList[Math.floor(Math.random() * sourceList.length)];\n\nconst randomHex = Math.random().toString(16).slice(2, 10);\n\n// Create the payload object\nconst payload = \n[{ \n    deadline: \"\", \n    startPoint: \"0388\",\n    startMapCode: \"SIVA\",\n    targetArea: chosenValue,\n    targetMapCode: \"SIVA\",\n    rackTypeCode: \"EURO\",\n    needOut: 1,\n    needOperation: false,\n    letDownFlag: 2,\n    jobPriority: 6,\n    upstreamOrderNo: randomHex\n}];\n\n// Set the payload\nmsg.payload = payload;\n\n// Return the modified message object\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "a9c0b3b6e56216a1",
        "type": "function",
        "z": "5ec9ee5b05691a00",
        "name": "function 11",
        "func": "// Define your list of strings\nconst sourceList = [\"0180\", \"0178\", \"0176\"];\n\n// Select a random value from the list\nconst chosenValue = sourceList[Math.floor(Math.random() * sourceList.length)];\n\nconst randomHex = Math.random().toString(16).slice(2, 10);\n\n// Create the payload object\nconst payload = \n[{ \n    deadline: \"\", \n    startPoint: chosenValue,\n    startMapCode: \"SIVA\",\n    targetPoint: \"0362\",\n    targetMapCode: \"SIVA\",\n    rackTypeCode: \"EURO\",\n    needOut: 1,\n    needOperation: false,\n    letDownFlag: 2,\n    jobPriority: 7,\n    upstreamOrderNo: randomHex,\n    awaitArea: \"StationArea_363\"\n}];\n\n// Set the payload\nmsg.payload = payload;\n\n// Return the modified message object\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "e15a7d1793e11c10",
        "type": "inject",
        "z": "5ec9ee5b05691a00",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1800",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 560,
        "wires": [
            [
                "a9c0b3b6e56216a1"
            ]
        ]
    },
    {
        "id": "4ae4d03c5d8b61bf",
        "type": "comment",
        "z": "5ec9ee5b05691a00",
        "name": "Flow Handover 4 -> WH",
        "info": "Packaging:\n[\"0458\",\"0457\",\"0533\",\"0530\",\"0527\",\"0524\"]\n\nHandOver1:\n    Drop: 0388",
        "x": 160,
        "y": 520,
        "wires": []
    },
    {
        "id": "4d8e42e2bdd5855f",
        "type": "inject",
        "z": "5ec9ee5b05691a00",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "292",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 640,
        "wires": [
            [
                "6c361ecd18c43a84"
            ]
        ]
    },
    {
        "id": "54cd8e2224ada2e3",
        "type": "comment",
        "z": "5ec9ee5b05691a00",
        "name": "Flow Packaging -> WH",
        "info": "Packaging:\n[\"0458\",\"0457\",\"0533\",\"0530\",\"0527\",\"0524\"]\n\nHandOver1:\n    Drop: 0388",
        "x": 160,
        "y": 600,
        "wires": []
    },
    {
        "id": "6c361ecd18c43a84",
        "type": "function",
        "z": "5ec9ee5b05691a00",
        "name": "function 12",
        "func": "// Define your list of strings\nconst sourceList = [\"0503\", \"0506\", \"0509\", \"0512\", \"0515\"];\n\n// Select a random value from the list\nconst chosenValue = sourceList[Math.floor(Math.random() * sourceList.length)];\n\nconst randomHex = Math.random().toString(16).slice(2, 10);\n\n// Create the payload object\nconst payload = \n[{ \n    deadline: \"\", \n    startPoint: chosenValue,\n    startMapCode: \"SIVA\",\n    targetPoint: \"0362\",\n    targetMapCode: \"SIVA\",\n    rackTypeCode: \"EURO\",\n    needOut: 1,\n    needOperation: false,\n    letDownFlag: 2,\n    jobPriority: 8,\n    upstreamOrderNo: randomHex,\n    awaitArea: \"StationArea_363\"\n}];\n\n// Set the payload\nmsg.payload = payload;\n\n// Return the modified message object\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "020c21b24ba2724f",
        "type": "inject",
        "z": "5ec9ee5b05691a00",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 580,
        "y": 580,
        "wires": [
            [
                "15963372b38efb2a"
            ]
        ]
    },
    {
        "id": "81baca4e5bb6ce93",
        "type": "debug",
        "z": "5ec9ee5b05691a00",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 580,
        "wires": []
    },
    {
        "id": "f7d0a652c656da31",
        "type": "comment",
        "z": "5ec9ee5b05691a00",
        "name": "Point to Point",
        "info": "",
        "x": 570,
        "y": 540,
        "wires": []
    },
    {
        "id": "d07621ec178204e5",
        "type": "inject",
        "z": "5ec9ee5b05691a00",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"startPoint\":\"0386\",\"targetArea\":\"StorageArea_999\",\"rackTypeCode\":\"EURO\",\"needOut\":1,\"startMapCode\":\"SIVA\",\"targetMapCode\":\"SIVA\",\"needOperation\":false,\"jobPriority\":1,\"letDownFlag\":2,\"upstreamOrderNo\":\"qdqsdsq\"}]",
        "payloadType": "json",
        "x": 570,
        "y": 700,
        "wires": [
            [
                "9e312ead628475b3"
            ]
        ]
    },
    {
        "id": "76c677d5c94cb983",
        "type": "comment",
        "z": "5ec9ee5b05691a00",
        "name": "Point to Area",
        "info": "",
        "x": 570,
        "y": 660,
        "wires": []
    },
    {
        "id": "e8adf01e92325268",
        "type": "inject",
        "z": "5ec9ee5b05691a00",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"startArea\":\"StorageArea_999\",\"targetArea\":\"StorageArea_975\",\"rackTypeCode\":\"EURO\",\"needOut\":1,\"startMapCode\":\"SIVA\",\"targetMapCode\":\"SIVA\",\"needOperation\":false,\"jobPriority\":1,\"letDownFlag\":2,\"upstreamOrderNo\":\"ssdfre\"}]",
        "payloadType": "json",
        "x": 570,
        "y": 780,
        "wires": [
            [
                "9e312ead628475b3"
            ]
        ]
    },
    {
        "id": "1a7422ee5efbf633",
        "type": "comment",
        "z": "5ec9ee5b05691a00",
        "name": "Point to Area",
        "info": "",
        "x": 570,
        "y": 740,
        "wires": []
    },
    {
        "id": "5882202bfa9b2b57",
        "type": "inject",
        "z": "5ec9ee5b05691a00",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 580,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "15963372b38efb2a",
        "type": "function",
        "z": "5ec9ee5b05691a00",
        "name": "function 13",
        "func": "// Define your list of strings\nconst sourceList = [\"0457\", \"0458\", \"0524\", \"0527\", \"0530\"];\n\n// Select a random value from the list\nconst chosenValue = sourceList[Math.floor(Math.random() * sourceList.length)];\n\nconst randomHex = Math.random().toString(16).slice(2, 10);\n\n// Create the payload object\nconst payload = \n[{ \n    deadline: \"\", \n    startPoint: chosenValue,\n    startMapCode: \"SIVA\",\n    targetPoint: \"0362\",\n    awaitArea: \"StationArea_363\",\n    targetMapCode: \"SIVA\",\n    rackTypeCode: \"EURO\",\n    needOut: 0,\n    needOperation: false,\n    letDownFlag: 2,\n    jobPriority: 1,\n    upstreamOrderNo: randomHex,\n\n}];\n\n// Set the payload\nmsg.payload = payload;\n\n// Return the modified message object\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 580,
        "wires": [
            [
                "9e312ead628475b3"
            ]
        ]
    },
    {
        "id": "497105ea81294564",
        "type": "inject",
        "z": "5ec9ee5b05691a00",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"startPoint\":\"0362\",\"targetPoint\":\"0176\",\"rackTypeCode\":\"EURO\",\"awaitArea\":\"StationArea_363\",\"needOut\":1,\"startMapCode\":\"SIVA\",\"targetMapCode\":\"SIVA\",\"needOperation\":false,\"jobPriority\":1,\"letDownFlag\":2,\"upstreamOrderNo\":\"sdfsdfxsdfds\"}]",
        "payloadType": "json",
        "x": 570,
        "y": 500,
        "wires": [
            [
                "9e312ead628475b3"
            ]
        ]
    },
    {
        "id": "9e312ead628475b3",
        "type": "http request",
        "z": "5ec9ee5b05691a00",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/rss/warehouse/1/transport-order/carrier/submit",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 970,
        "y": 580,
        "wires": [
            [
                "81baca4e5bb6ce93"
            ]
        ]
    },
    {
        "id": "d41a96b460b5cac6",
        "type": "function",
        "z": "5ec9ee5b05691a00",
        "name": "function 49",
        "func": "// Define your list of strings\nconst sourceList = [\"StorageArea_975\"];\n\n// Select a random value from the list\nconst chosenValue = sourceList[Math.floor(Math.random() * sourceList.length)];\n\nconst randomHex = Math.random().toString(16).slice(2, 10);\n\n// Create the payload object\nconst payload = \n[{ \n    deadline: \"\", \n    startPoint: \"0369\",\n    startMapCode: \"SIVA\",\n    targetArea: chosenValue,\n    targetMapCode: \"SIVA\",\n    rackTypeCode: \"EURO\",\n    needOut: 1,\n    needOperation: false,\n    letDownFlag: 2,\n    jobPriority: 2,\n    upstreamOrderNo: randomHex\n}];\n\n// Set the payload\nmsg.payload = payload;\n\n// Return the modified message object\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "c8e050cd8eab9536",
        "type": "inject",
        "z": "5ec9ee5b05691a00",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "290",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 720,
        "wires": [
            [
                "d41a96b460b5cac6"
            ]
        ]
    },
    {
        "id": "f1c1e6f1a1a040e8",
        "type": "comment",
        "z": "5ec9ee5b05691a00",
        "name": "Conveyor -> Packing",
        "info": "Packaging:\n[\"0458\",\"0457\",\"0533\",\"0530\",\"0527\",\"0524\"]\n\nHandOver1:\n    Drop: 0388",
        "x": 160,
        "y": 680,
        "wires": []
    },
    {
        "id": "8f3051ef60196656",
        "type": "inject",
        "z": "5ec9ee5b05691a00",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"startPoint\":\"0359\",\"targetPoint\":\"0362\",\"rackTypeCode\":\"EURO\",\"awaitArea\":\"StationArea_363\",\"needOut\":1,\"startMapCode\":\"SIVA\",\"targetMapCode\":\"SIVA\",\"needOperation\":false,\"jobPriority\":1,\"letDownFlag\":2,\"upstreamOrderNo\":\"fezfezsdsdfzerp\"}]",
        "payloadType": "json",
        "x": 750,
        "y": 480,
        "wires": [
            [
                "9e312ead628475b3"
            ]
        ]
    },
    {
        "id": "fc44dda1201dae60",
        "type": "function",
        "z": "ebf886250cf52424",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 280,
        "wires": [
            [
                "6f19652334dccfbf"
            ]
        ]
    },
    {
        "id": "6f19652334dccfbf",
        "type": "http response",
        "z": "ebf886250cf52424",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1380,
        "y": 280,
        "wires": []
    },
    {
        "id": "677289d956869830",
        "type": "comment",
        "z": "ebf886250cf52424",
        "name": "open door request http://sim-les.quicktron.eu:1880/door/command/open",
        "info": "{\n  \"requestId\": \"\", // uuid\n  \"doorCode\": \"\",  // 设备编码\n  \"command\": \"\"    // 暂时用不上 开门接口会传入OPEN，关门接口会传入CLOSE\n}",
        "x": 730,
        "y": 300,
        "wires": []
    },
    {
        "id": "f7f1cdec929cbabc",
        "type": "function",
        "z": "ebf886250cf52424",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nnode.log(msg);\n\nflow.set('isLoadingValue', null);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 840,
        "wires": [
            [
                "45356be496eb56af"
            ]
        ]
    },
    {
        "id": "45356be496eb56af",
        "type": "http response",
        "z": "ebf886250cf52424",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1200,
        "y": 840,
        "wires": []
    },
    {
        "id": "aabfce9d679649e7",
        "type": "function",
        "z": "ebf886250cf52424",
        "name": "save close door arg",
        "func": "msg.parameter=msg.payload\nflow.set(\"closeArg\",msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 840,
        "wires": [
            [
                "f7f1cdec929cbabc"
            ]
        ]
    },
    {
        "id": "4c3395d81541025e",
        "type": "function",
        "z": "ebf886250cf52424",
        "name": "save request arg (c)",
        "func": "\nvar response=msg.payload\nresponse.actionCode='OPEN'\nnode.warn(response)\n//151 IP\nif (response.doorCode != undefined && response.doorCode =='WH_Conveyor_Drop'){\n    flow.set(\"openArg\", response)\n    return [msg,null,null,null,null,null,null,null,null]\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "d63f00f095069965",
        "type": "function",
        "z": "ebf886250cf52424",
        "name": "save close door args",
        "func": "\nmsg.parameter = msg.payload\nnode.warn(\"close door request\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 840,
        "wires": [
            [
                "aabfce9d679649e7"
            ]
        ]
    },
    {
        "id": "9e132c5b3cba4a9e",
        "type": "function",
        "z": "ebf886250cf52424",
        "name": "save open door args",
        "func": "msg.parameter = msg.payload\n//node.warn(\"receive open door args\");\n//node.warn(msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 340,
        "wires": [
            [
                "4c3395d81541025e",
                "fc44dda1201dae60"
            ]
        ]
    },
    {
        "id": "fc8517f59b5f2cec",
        "type": "inject",
        "z": "ebf886250cf52424",
        "name": "Manual Overrite Pick/DropEnable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 610,
        "y": 600,
        "wires": [
            [
                "1ef43193003b81ef"
            ]
        ]
    },
    {
        "id": "9d3e7bce5c10acd7",
        "type": "http request",
        "z": "ebf886250cf52424",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/door/command-finish",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1330,
        "y": 580,
        "wires": [
            [
                "8775f9191f47c892"
            ]
        ]
    },
    {
        "id": "1ef43193003b81ef",
        "type": "function",
        "z": "ebf886250cf52424",
        "name": "get saved request arg",
        "func": "//读取modbus的值,只有读到了1,并且有当前请求开门的参数的时候该流程继续往下走\nvar readData=msg.payload\nreadData=[true]\nvar requestArg=flow.get(\"openArg\")\n\nif (requestArg != undefined && requestArg != null && requestArg.requestId!=undefined)\n{\n    //表明当前门开了\n    if (readData && readData != undefined && readData[0] == true) \n    {\n        //构造请求的参数\n        msg.payload=requestArg\n        flow.set(\"openArg\", null)\n        return msg\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 580,
        "wires": [
            [
                "9d3e7bce5c10acd7"
            ]
        ]
    },
    {
        "id": "8775f9191f47c892",
        "type": "function",
        "z": "ebf886250cf52424",
        "name": "rcs response",
        "func": "var response=msg.payload\n\n\nnode.warn(response)\nif(response!=undefined && response!=null && response.success==true){\n    global.set(\"openArg\",null)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "1f31f78dd9e7da86",
        "type": "function",
        "z": "ebf886250cf52424",
        "name": "AutoOut (c)",
        "func": "// recieve openArg\nvar requestArg = flow.get(\"openArg\")\n// array of location codes\nvar staticValues = ['0362'];\n// Parsed location of all AMRs\nvar pointCodes = global.get(\"pointCodes\") || [];\n\n// chceck if there is data in openArg\nif (requestArg != undefined && requestArg != null && requestArg.requestId != undefined) {\n    // compare if any amr is in location\n    if (staticValues.some(value => pointCodes.includes(value))) {\n        // send command for ato out of location\n        msg.payload = requestArg;\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 700,
        "wires": [
            [
                "1ef43193003b81ef"
            ]
        ]
    },
    {
        "id": "0b411b1d30f28660",
        "type": "inject",
        "z": "ebf886250cf52424",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 490,
        "y": 700,
        "wires": [
            [
                "1f31f78dd9e7da86"
            ]
        ]
    },
    {
        "id": "dfd7bee2ea0a2680",
        "type": "comment",
        "z": "ebf886250cf52424",
        "name": "Auto out",
        "info": "",
        "x": 480,
        "y": 660,
        "wires": []
    },
    {
        "id": "96b2b0b90adbc446",
        "type": "function",
        "z": "ebf886250cf52424",
        "name": "Reset Flow Values",
        "func": "//flow.set(\"PickBusy\", true)\nflow.set(\"PickRequest\", false)\nflow.set(\"DropRequest\", false)\nflow.set('isLoadingValue', null);\nnode.warn('reset values')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "8f664cac1e2cc631",
        "type": "comment",
        "z": "ebf886250cf52424",
        "name": "Send Pick/Drop Request",
        "info": "",
        "x": 1590,
        "y": 180,
        "wires": []
    },
    {
        "id": "57740c7381faa893",
        "type": "comment",
        "z": "ebf886250cf52424",
        "name": "Reset Pick/Drop Request",
        "info": "",
        "x": 1110,
        "y": 900,
        "wires": []
    },
    {
        "id": "bb394856c145086e",
        "type": "link in",
        "z": "ebf886250cf52424",
        "name": "Open_Stand_6",
        "links": [
            "2e98f9aae88d485d"
        ],
        "x": 705,
        "y": 340,
        "wires": [
            [
                "9e132c5b3cba4a9e"
            ]
        ]
    },
    {
        "id": "44f1b51ea1621b46",
        "type": "link in",
        "z": "ebf886250cf52424",
        "name": "Close_Stand_6",
        "links": [
            "2ffbe327e06b8752"
        ],
        "x": 315,
        "y": 840,
        "wires": [
            [
                "d63f00f095069965"
            ]
        ]
    },
    {
        "id": "d110a78facc77895",
        "type": "function",
        "z": "ebf886250cf52424",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 140,
        "wires": [
            [
                "d547fce889300305",
                "582fad1cf827f44e"
            ]
        ]
    },
    {
        "id": "d547fce889300305",
        "type": "http response",
        "z": "ebf886250cf52424",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1540,
        "y": 140,
        "wires": []
    },
    {
        "id": "f1f872a9ee1490db",
        "type": "function",
        "z": "ebf886250cf52424",
        "name": "Check and save loaded status",
        "func": "// Extract isLoading value from the command property in the payload\nvar isLoadingValue = msg.payload.isLoading;\n\n// Save the isLoading value in a flow variable\nflow.set('isLoadingValue', isLoadingValue);\n\n// Pass the original message to the next node\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 140,
        "wires": [
            [
                "d110a78facc77895"
            ]
        ]
    },
    {
        "id": "6e865a95f7baf02f",
        "type": "function",
        "z": "ebf886250cf52424",
        "name": "Check for DropEnable",
        "func": "// Assuming msg.payload is the array [ false, false, false, false, false, false, false, false ]\n\n// Extract the first value from the array\nvar firstValue = msg.payload;\n\n// Check if the first value is true\nif (firstValue === true && flow.get(\"isLoadingValue\") === true && flow.get(\"DropRequest\") === true) {\n    // If true, send only the first value to the next node\n    msg.payload = true;\n    node.warn(\"Drop Enable\")\n    return msg;\n}\n else {\n    // If false, do nothing (no need to return anything)\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 500,
        "wires": [
            [
                "55c61b8ccd634381",
                "1ef43193003b81ef"
            ]
        ]
    },
    {
        "id": "5a3ec359e883a622",
        "type": "function",
        "z": "ebf886250cf52424",
        "name": "Check for PickEnable",
        "func": "var firstValue = msg.payload;\n\nif (firstValue === true && flow.get(\"isLoadingValue\") === false && flow.get('PickRequest') === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Pick Enable\")\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 540,
        "wires": [
            [
                "1ef43193003b81ef",
                "b879d52fefcb7548"
            ]
        ]
    },
    {
        "id": "55c61b8ccd634381",
        "type": "function",
        "z": "ebf886250cf52424",
        "name": "Set DropBusy",
        "func": "flow.set(\"DropBusy\", true)\nnode.warn(\"DropBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 500,
        "wires": [
            [
                "825a4bc0e521d347"
            ]
        ]
    },
    {
        "id": "b879d52fefcb7548",
        "type": "function",
        "z": "ebf886250cf52424",
        "name": "Set PickBusy",
        "func": "flow.set(\"PickBusy\", true)\nnode.warn(\"PickBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 540,
        "wires": [
            [
                "e82b97770e304573"
            ]
        ]
    },
    {
        "id": "dd2f86b0e2eb3ae6",
        "type": "http request",
        "z": "ebf886250cf52424",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/rcs/equipment/feedback",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 950,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "083af41ca9b2676d",
        "type": "link in",
        "z": "ebf886250cf52424",
        "name": "link in 35",
        "links": [
            "0fe9c72c842e487f"
        ],
        "x": 705,
        "y": 140,
        "wires": [
            [
                "dd2f86b0e2eb3ae6",
                "f1f872a9ee1490db"
            ]
        ]
    },
    {
        "id": "6997c69b869a7720",
        "type": "function",
        "z": "ebf886250cf52424",
        "name": "Check for true",
        "func": "// Check if msg.payload is true\nif (msg.payload === true) {\n    // If true, return the message\n    return msg;\n}\n// If not true, do nothing (don't return anything)\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 500,
        "wires": [
            [
                "6e865a95f7baf02f"
            ]
        ]
    },
    {
        "id": "e82b97770e304573",
        "type": "function",
        "z": "ebf886250cf52424",
        "name": "OPC msg PickBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"AMR_Comm\".\"PickBusy12\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 540,
        "wires": [
            [
                "d80f4ca77748be97"
            ]
        ]
    },
    {
        "id": "7f51e1560b02bc9b",
        "type": "function",
        "z": "ebf886250cf52424",
        "name": "Reset Pick Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"AMR_Comm\".\"PickRequest12\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 980,
        "wires": [
            [
                "d80f4ca77748be97"
            ]
        ]
    },
    {
        "id": "0b568a358462c369",
        "type": "function",
        "z": "ebf886250cf52424",
        "name": "Reset Pick Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"AMR_Comm\".\"PickBusy12\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1100,
        "wires": [
            [
                "d80f4ca77748be97"
            ]
        ]
    },
    {
        "id": "825a4bc0e521d347",
        "type": "function",
        "z": "ebf886250cf52424",
        "name": "OPC msg DropBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"AMR_Comm\".\"DropBusy12\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 500,
        "wires": [
            [
                "d80f4ca77748be97"
            ]
        ]
    },
    {
        "id": "a327bc9dbb4e9e28",
        "type": "function",
        "z": "ebf886250cf52424",
        "name": "Resset Drop Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"AMR_Comm\".\"DropBusy12\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 1140,
        "wires": [
            [
                "d80f4ca77748be97"
            ]
        ]
    },
    {
        "id": "582fad1cf827f44e",
        "type": "function",
        "z": "ebf886250cf52424",
        "name": "Pick/DropRequest (c)",
        "func": "if (flow.get(\"isLoadingValue\") === true) \n{\n    flow.set(\"DropRequest\", true)\n    node.warn(\"Drop Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"DropRequest12\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\nelse if (flow.get(\"isLoadingValue\") === false) {\n    flow.set(\"PickRequest\", true)\n    node.warn(\"Pick Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"PickRequest12\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 220,
        "wires": [
            [
                "d80f4ca77748be97"
            ]
        ]
    },
    {
        "id": "b1963f435bc61797",
        "type": "function",
        "z": "ebf886250cf52424",
        "name": "Reset Drop Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"AMR_Comm\".\"DropRequest12\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 1020,
        "wires": [
            [
                "d80f4ca77748be97"
            ]
        ]
    },
    {
        "id": "78643ffa2c093c92",
        "type": "function",
        "z": "ebf886250cf52424",
        "name": "Check for true",
        "func": "// Check if msg.payload is true\nif (msg.payload === true) {\n    // If true, return the message\n    return msg;\n}\n// If not true, do nothing (don't return anything)\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 540,
        "wires": [
            [
                "5a3ec359e883a622"
            ]
        ]
    },
    {
        "id": "402c35812428eead",
        "type": "link in",
        "z": "ebf886250cf52424",
        "name": "link in 36",
        "links": [
            "596e53921b5340cb"
        ],
        "x": 315,
        "y": 500,
        "wires": [
            [
                "6997c69b869a7720"
            ]
        ]
    },
    {
        "id": "2516bea33e61c813",
        "type": "link in",
        "z": "ebf886250cf52424",
        "name": "link in 37",
        "links": [
            "50d349b5bf4efd22"
        ],
        "x": 315,
        "y": 540,
        "wires": [
            [
                "78643ffa2c093c92"
            ]
        ]
    },
    {
        "id": "d80f4ca77748be97",
        "type": "link out",
        "z": "ebf886250cf52424",
        "name": "WH Drop OPC Write",
        "mode": "link",
        "links": [
            "3e5ed99de19bd5d3"
        ],
        "x": 1965,
        "y": 540,
        "wires": []
    },
    {
        "id": "9c618c4ab04c965e",
        "type": "http request",
        "z": "ebf886250cf52424",
        "name": "Interaction Response",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/rcs/equipment/feedback",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 620,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "7949e827570d6440",
        "type": "link in",
        "z": "ebf886250cf52424",
        "name": "link in 42",
        "links": [
            "cf813bfe39a5c666"
        ],
        "x": 605,
        "y": 1020,
        "wires": [
            [
                "b8263bdbc69e5aa6",
                "9c618c4ab04c965e",
                "96b2b0b90adbc446",
                "7f51e1560b02bc9b",
                "b1963f435bc61797",
                "77e136aedd115368",
                "0b568a358462c369",
                "a327bc9dbb4e9e28"
            ]
        ]
    },
    {
        "id": "b8263bdbc69e5aa6",
        "type": "function",
        "z": "ebf886250cf52424",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1160,
        "wires": [
            [
                "13f2b882cb963441"
            ]
        ]
    },
    {
        "id": "13f2b882cb963441",
        "type": "http response",
        "z": "ebf886250cf52424",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 820,
        "y": 1160,
        "wires": []
    },
    {
        "id": "77e136aedd115368",
        "type": "function",
        "z": "ebf886250cf52424",
        "name": "Reset Flow Values",
        "func": "flow.set(\"PickBusy\", false);\nflow.set(\"DropBusy\", false);\nnode.warn(\"Reset Pick/Drop Busy\");\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "d57530c8a4c12c14",
        "type": "http request",
        "z": "bd2d9e87f698392e",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/rss/warehouse/1/carrier/robots/query",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 290,
        "y": 220,
        "wires": [
            [
                "cf26875e4e9a1e58",
                "1a75df5abf9ff95b",
                "4d5dd10c86bee1eb"
            ]
        ]
    },
    {
        "id": "64463822252a44cb",
        "type": "inject",
        "z": "bd2d9e87f698392e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "{\"mapCode\":\"SIVA\",\"robotCode\":\"\",\"pointCode\":\"\",\"areaCode\":\"\"}",
        "payloadType": "json",
        "x": 110,
        "y": 220,
        "wires": [
            [
                "d57530c8a4c12c14"
            ]
        ]
    },
    {
        "id": "cf26875e4e9a1e58",
        "type": "function",
        "z": "bd2d9e87f698392e",
        "name": "function 1",
        "func": "try {\n    // Parse the incoming JSON response\n    const jsonResponse = JSON.parse(msg.payload);\n\n    // Extract areaCodes from each object in the data array\n    const areaCodesList = jsonResponse.data.reduce((acc, robotData) => {\n        // Check if areaCodeList is an array before spreading\n        if (Array.isArray(robotData.areaCodeList)) {\n            acc.push(...robotData.areaCodeList);\n        }\n        return acc;\n    }, []);\n\n    // Remove duplicate areaCodes using Set\n    const uniqueAreaCodes = [...new Set(areaCodesList)];\n\n    // Create the output message with the list of unique areaCodes\n    msg.payload = uniqueAreaCodes;\n\n    // Return the modified message object\n    return msg;\n\n} catch (error) {\n    // Handle parsing errors\n    msg.payload = {\n        error: \"Error parsing JSON response\"\n    };\n\n    // Return the error message\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 220,
        "wires": [
            [
                "a1cd6b147e467a95",
                "fc7901ed9e18e224",
                "16c16382c7ab582a",
                "a681284fe859e967",
                "2959259670a995f6",
                "f0dd4565442c1d21"
            ]
        ],
        "info": "Fixed JSON parsing when AMR is removed from the map\r\n\r\nexample:\r\n[\"AvoidArea_496\",\"ParkingArea_858\",\"LimitArea_714\",\"AvoidArea_477\"]"
    },
    {
        "id": "254d3ef622660150",
        "type": "comment",
        "z": "bd2d9e87f698392e",
        "name": "Get vehicle events and occupied zones",
        "info": "",
        "x": 190,
        "y": 160,
        "wires": []
    },
    {
        "id": "6cd13108865f614c",
        "type": "comment",
        "z": "bd2d9e87f698392e",
        "name": "Concept 1: Controll all Traffic lights",
        "info": "Specify an array of trafficlights and\noutput an respective array indicating\nwhether occupied or not",
        "x": 780,
        "y": 260,
        "wires": []
    },
    {
        "id": "a1cd6b147e467a95",
        "type": "subflow:f2ed34c2a4f393ef",
        "z": "bd2d9e87f698392e",
        "name": "Crossing",
        "env": [
            {
                "name": "Area_Name",
                "value": "AvoidArea_968",
                "type": "str"
            },
            {
                "name": "Modbus_IP",
                "value": "10.10.221.24",
                "type": "str"
            },
            {
                "name": "Adress_Green_1",
                "value": "16",
                "type": "str"
            },
            {
                "name": "Adress_Green_2",
                "value": "18",
                "type": "str"
            },
            {
                "name": "Adress_Green_3",
                "value": "20",
                "type": "str"
            },
            {
                "name": "Adress_Red_1",
                "value": "17",
                "type": "str"
            },
            {
                "name": "Adress_Red_2",
                "value": "19",
                "type": "str"
            },
            {
                "name": "Adress_Red_3",
                "value": "21",
                "type": "str"
            },
            {
                "name": "Name",
                "value": "AvoidArea_968",
                "type": "str"
            },
            {
                "name": "Adress_green",
                "value": "00001",
                "type": "str"
            },
            {
                "name": "Adress_red",
                "value": "00002",
                "type": "str"
            },
            {
                "name": "Protocol",
                "value": "Modbus",
                "type": "str"
            }
        ],
        "x": 700,
        "y": 320,
        "wires": [
            [
                "d3fc11ad37d1c9c1",
                "a0cbc293510ef8d6"
            ],
            [
                "d3fc11ad37d1c9c1",
                "6bf18ea4a8757bc5"
            ]
        ]
    },
    {
        "id": "fc7901ed9e18e224",
        "type": "subflow:f2ed34c2a4f393ef",
        "z": "bd2d9e87f698392e",
        "name": "Freezer 2",
        "env": [
            {
                "name": "Area_Name",
                "value": "AvoidArea_477",
                "type": "str"
            },
            {
                "name": "Modbus_IP",
                "value": "10.10.221.26",
                "type": "str"
            },
            {
                "name": "Adress_Green_1",
                "value": "16",
                "type": "str"
            },
            {
                "name": "Adress_Green_2",
                "value": "18",
                "type": "str"
            },
            {
                "name": "Adress_Red_1",
                "value": "17",
                "type": "str"
            },
            {
                "name": "Adress_Red_2",
                "value": "19",
                "type": "str"
            },
            {
                "name": "Name",
                "value": "AvoidArea_998",
                "type": "str"
            },
            {
                "name": "Adress_green",
                "value": "00003",
                "type": "str"
            },
            {
                "name": "Adress_red",
                "value": "00004",
                "type": "str"
            },
            {
                "name": "Protocol",
                "value": "Modbus",
                "type": "str"
            }
        ],
        "x": 700,
        "y": 400,
        "wires": [
            [
                "6548cc89d8e53ee2",
                "15c01b421673e461"
            ],
            [
                "6548cc89d8e53ee2"
            ]
        ]
    },
    {
        "id": "16c16382c7ab582a",
        "type": "debug",
        "z": "bd2d9e87f698392e",
        "name": "debug 8",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 220,
        "wires": []
    },
    {
        "id": "a681284fe859e967",
        "type": "subflow:f2ed34c2a4f393ef",
        "z": "bd2d9e87f698392e",
        "name": "Packing",
        "env": [
            {
                "name": "Area_Name",
                "value": "AvoidArea_496",
                "type": "str"
            },
            {
                "name": "Modbus_IP",
                "value": "10.10.221.22",
                "type": "str"
            },
            {
                "name": "Adress_Green_1",
                "value": "16",
                "type": "str"
            },
            {
                "name": "Adress_Green_2",
                "value": "18",
                "type": "str"
            },
            {
                "name": "Adress_Red_1",
                "value": "17",
                "type": "str"
            },
            {
                "name": "Adress_Red_2",
                "value": "19",
                "type": "str"
            },
            {
                "name": "Area_Name2",
                "value": "AvoidArea_579",
                "type": "str"
            }
        ],
        "x": 700,
        "y": 480,
        "wires": [
            [
                "5603a8129623509e"
            ],
            [
                "5603a8129623509e"
            ]
        ]
    },
    {
        "id": "1a75df5abf9ff95b",
        "type": "debug",
        "z": "bd2d9e87f698392e",
        "name": "debug 9",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 280,
        "wires": [],
        "info": "{\r\n    \"success\":true,\r\n    \"data\":[\r\n        {\r\n            \"robotCode\":\"Robot_5\",\r\n            \"state\":\"BUSY\",\r\n            \"power\":45,\r\n            \"transportObjectCode\":null,\r\n            \"upstreamOrderNo\":null,\r\n            \"areaCodeList\":[],\r\n            \"areaNameList\":[],\r\n            \"mapCode\":\"SIVA\",\r\n            \"pointCode\":\"\",\r\n            \"pointName\":null,\r\n            \"x\":55717,\r\n            \"y\":6600,\r\n            \"errorCodes\":[],\r\n            \"orderState\":null,\r\n            \"executeState\":null,\r\n            \"robotHeading\":0\r\n        },\r\n        \r\n        {\r\n            \"robotCode\":\"Robot_6\",\r\n            \"state\":\"BUSY\",\r\n            \"power\":43,\r\n            \"transportObjectCode\":\"TempRack_20231219_000962\",\r\n            \"upstreamOrderNo\":\"644d8ac2\",\r\n            \"areaCodeList\":[],\r\n            \"areaNameList\":[],\r\n            \"mapCode\":\"SIVA\",\r\n            \"pointCode\":\"\",\r\n            \"pointName\":null,\r\n            \"x\":71516,\r\n            \"y\":0,\r\n            \"errorCodes\":[],\r\n            \"orderState\":\"EXECUTING\",\r\n            \"executeState\":\"RACK_MOVE_START\",\r\n            \"robotHeading\":0\r\n        }...."
    },
    {
        "id": "4d5dd10c86bee1eb",
        "type": "function",
        "z": "bd2d9e87f698392e",
        "name": "Parse pointCode values",
        "func": "// Parse the JSON payload\ntry {\n    var payload = JSON.parse(msg.payload);\n} catch (error) {\n    node.error(\"Invalid payload structure\", error);\n    return null\n};\n\n\n// Check if the payload has the expected structure\nif (payload.success && Array.isArray(payload.data) && payload.data.length > 0) {\n    // Extract the \"pointCode\" values from the \"data\" array\n    var pointCodes = payload.data.map(item => item.pointCode);\n\n    // Create a new message object with the extracted \"pointCode\" values\n    msg.payload = pointCodes;\n\n    // Return the modified message\n    return msg;\n} else {\n    // If the payload structure is not as expected, log an error\n    node.error(\"Invalid payload structure\");\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 80,
        "wires": [
            [
                "31c539497a640879"
            ]
        ]
    },
    {
        "id": "31c539497a640879",
        "type": "function",
        "z": "bd2d9e87f698392e",
        "name": "function 18",
        "func": "// Assuming msg.payload contains your pointCodes\nvar pointCodes = msg.payload;\n\n// Set the global variable\nglobal.set(\"pointCodes\", pointCodes);\n\n// You can also log the values for debugging purposes\nconsole.log(\"pointCodes:\", pointCodes);\n\n// Pass the message along\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 80,
        "wires": [
            [
                "024836a953759844"
            ]
        ],
        "info": "Parsing code points\r\n\r\nExample:\r\n[\"0568\",\"\",\"0561\",\"0408\",\"0559\",\"0085\"]"
    },
    {
        "id": "024836a953759844",
        "type": "debug",
        "z": "bd2d9e87f698392e",
        "name": "debug 10",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 80,
        "wires": []
    },
    {
        "id": "eb50c90d8415a930",
        "type": "function",
        "z": "bd2d9e87f698392e",
        "name": "function 23",
        "func": "// Assuming the incoming message object is stored in the variable 'msg'\n// You can access the payload using msg.payload\n\ntry {\n    // Parse the incoming JSON response\n    const jsonResponse = JSON.parse(msg.payload);\n\n    // Extract areaCodes from each object in the data array\n    const areaCodesList = jsonResponse.data.reduce((acc, robotData) => {\n        acc.push(...robotData.areaCodeList);\n        return acc;\n    }, []);\n\n    // Remove duplicate areaCodes using Set\n    const uniqueAreaCodes = [...new Set(areaCodesList)];\n\n    // Create the output message with the list of unique areaCodes\n    msg.payload = uniqueAreaCodes;\n\n    // Return the modified message object\n    return msg;\n\n} catch (error) {\n    // Handle parsing errors\n    msg.payload = {\n        error: \"Error parsing JSON response\"\n    };\n\n    // Return the error message\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "2959259670a995f6",
        "type": "subflow:f2ed34c2a4f393ef",
        "z": "bd2d9e87f698392e",
        "name": "Production",
        "env": [
            {
                "name": "Area_Name",
                "value": "AvoidArea_802",
                "type": "str"
            },
            {
                "name": "Modbus_IP",
                "value": "10.10.221.25",
                "type": "str"
            },
            {
                "name": "Adress_Green_1",
                "value": "16",
                "type": "str"
            },
            {
                "name": "Adress_Red_1",
                "value": "17",
                "type": "str"
            }
        ],
        "x": 710,
        "y": 560,
        "wires": [
            [
                "74fd889609728bb9"
            ],
            [
                "74fd889609728bb9"
            ]
        ]
    },
    {
        "id": "a0cbc293510ef8d6",
        "type": "debug",
        "z": "bd2d9e87f698392e",
        "name": "debug 44",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 200,
        "wires": []
    },
    {
        "id": "6bf18ea4a8757bc5",
        "type": "debug",
        "z": "bd2d9e87f698392e",
        "name": "debug 45",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 240,
        "wires": []
    },
    {
        "id": "15c01b421673e461",
        "type": "debug",
        "z": "bd2d9e87f698392e",
        "name": "debug 46",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 360,
        "wires": []
    },
    {
        "id": "d3fc11ad37d1c9c1",
        "type": "ui_template",
        "z": "bd2d9e87f698392e",
        "group": "ee08097582ed440c",
        "name": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<div style=\"text-align:center;\">\n    <svg height=\"100\" width=\"50\">\n\n        <!-- Green Light -->\n        <circle cx=\"25\" cy=\"25\" r=\"20\" stroke=\"black\" stroke-width=\"3\"\n            fill=\"{{msg.payload ? 'transparent' : 'green'}}\" />\n\n        <!-- Red Light -->\n        <circle cx=\"25\" cy=\"70\" r=\"20\" stroke=\"black\" stroke-width=\"3\" fill=\"{{msg.payload ? 'red' : 'transparent'}}\" />\n    </svg>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 900,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "6548cc89d8e53ee2",
        "type": "ui_template",
        "z": "bd2d9e87f698392e",
        "group": "b7133fdc3857d15a",
        "name": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<div style=\"text-align:center;\">\n    <svg height=\"100\" width=\"50\">\n        <!-- Green Light -->\n        <circle cx=\"25\" cy=\"25\" r=\"20\" stroke=\"black\" stroke-width=\"3\"\n            fill=\"{{msg.payload ? 'transparent' : 'green'}}\" />\n\n        <!-- Red Light -->\n        <circle cx=\"25\" cy=\"70\" r=\"20\" stroke=\"black\" stroke-width=\"3\" fill=\"{{msg.payload ? 'red' : 'transparent'}}\" />\n    </svg>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 900,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "5603a8129623509e",
        "type": "ui_template",
        "z": "bd2d9e87f698392e",
        "group": "99a90c9c53b2f9c8",
        "name": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<div style=\"text-align:center;\">\n    <svg height=\"100\" width=\"50\">\n        <!-- Green Light -->\n        <circle cx=\"25\" cy=\"25\" r=\"20\" stroke=\"black\" stroke-width=\"3\"\n            fill=\"{{msg.payload ? 'transparent' : 'green'}}\" />\n\n        <!-- Red Light -->\n        <circle cx=\"25\" cy=\"70\" r=\"20\" stroke=\"black\" stroke-width=\"3\" fill=\"{{msg.payload ? 'red' : 'transparent'}}\" />\n    </svg>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 900,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "74fd889609728bb9",
        "type": "ui_template",
        "z": "bd2d9e87f698392e",
        "group": "0e137b8a1d350609",
        "name": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<div style=\"text-align:center;\">\n    <svg height=\"100\" width=\"50\">\n        <!-- Green Light -->\n        <circle cx=\"25\" cy=\"25\" r=\"20\" stroke=\"black\" stroke-width=\"3\"\n            fill=\"{{msg.payload ? 'transparent' : 'green'}}\" />\n\n        <!-- Red Light -->\n        <circle cx=\"25\" cy=\"70\" r=\"20\" stroke=\"black\" stroke-width=\"3\" fill=\"{{msg.payload ? 'red' : 'transparent'}}\" />\n    </svg>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 900,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "f0dd4565442c1d21",
        "type": "subflow:f2ed34c2a4f393ef",
        "z": "bd2d9e87f698392e",
        "name": "Outside",
        "env": [
            {
                "name": "Area_Name",
                "value": "AvoidArea_821",
                "type": "str"
            },
            {
                "name": "Adress_Green_1",
                "value": "16",
                "type": "str"
            },
            {
                "name": "Adress_Red_1",
                "value": "17",
                "type": "str"
            }
        ],
        "x": 700,
        "y": 640,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "d21c53f750867535",
        "type": "function",
        "z": "42dfa7aa6508f4a9",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 3740,
        "wires": [
            [
                "01b6daa369a541ad"
            ]
        ]
    },
    {
        "id": "01b6daa369a541ad",
        "type": "http response",
        "z": "42dfa7aa6508f4a9",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1200,
        "y": 3740,
        "wires": []
    },
    {
        "id": "46c1d76cd3ae9134",
        "type": "comment",
        "z": "42dfa7aa6508f4a9",
        "name": "open door request http://sim-les.quicktron.eu:1880/door/command/open",
        "info": "{\n  \"requestId\": \"\", // uuid\n  \"doorCode\": \"\",  // 设备编码\n  \"command\": \"\"    // 暂时用不上 开门接口会传入OPEN，关门接口会传入CLOSE\n}",
        "x": 550,
        "y": 3760,
        "wires": []
    },
    {
        "id": "eb5f38e985840901",
        "type": "function",
        "z": "42dfa7aa6508f4a9",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nnode.log(msg);\n\nflow.set('isLoadingValue', null);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 4300,
        "wires": [
            [
                "93334fe2a25f61dd"
            ]
        ]
    },
    {
        "id": "93334fe2a25f61dd",
        "type": "http response",
        "z": "42dfa7aa6508f4a9",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1020,
        "y": 4300,
        "wires": []
    },
    {
        "id": "7d5827e8cd1e7afb",
        "type": "function",
        "z": "42dfa7aa6508f4a9",
        "name": "save close door arg",
        "func": "msg.parameter=msg.payload\nflow.set(\"closeArg\",msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 4300,
        "wires": [
            [
                "eb5f38e985840901"
            ]
        ]
    },
    {
        "id": "4ebd023f9270910d",
        "type": "function",
        "z": "42dfa7aa6508f4a9",
        "name": "save request arg (c)",
        "func": "\nvar response=msg.payload\nresponse.actionCode='OPEN'\nnode.warn(response)\n//151 IP\nif (response.doorCode != undefined){\n    flow.set(\"openArg\", response)\n    return [msg,null,null,null,null,null,null,null,null]\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 3800,
        "wires": [
            []
        ]
    },
    {
        "id": "a925e1c2257d5eee",
        "type": "function",
        "z": "42dfa7aa6508f4a9",
        "name": "save close door args",
        "func": "\nmsg.parameter = msg.payload\nnode.warn(\"close door request\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 4400,
        "wires": [
            [
                "7d5827e8cd1e7afb",
                "402bab5a9f30d812",
                "7a34b5a1147d07e2"
            ]
        ]
    },
    {
        "id": "c5756a476d9b2288",
        "type": "function",
        "z": "42dfa7aa6508f4a9",
        "name": "save open door args",
        "func": "msg.parameter = msg.payload\n//node.warn(\"receive open door args\");\n//node.warn(msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 3800,
        "wires": [
            [
                "4ebd023f9270910d",
                "d21c53f750867535"
            ]
        ]
    },
    {
        "id": "15434ed1e3c1cdeb",
        "type": "inject",
        "z": "42dfa7aa6508f4a9",
        "name": "Manual Overrite Pick/DropEnable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 430,
        "y": 4060,
        "wires": [
            [
                "3a0fef9bf92efa71"
            ]
        ]
    },
    {
        "id": "60391ba43f279da8",
        "type": "http request",
        "z": "42dfa7aa6508f4a9",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/door/command-finish",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1150,
        "y": 4040,
        "wires": [
            [
                "c0c7ad9e87d3a754"
            ]
        ]
    },
    {
        "id": "3a0fef9bf92efa71",
        "type": "function",
        "z": "42dfa7aa6508f4a9",
        "name": "get saved request arg",
        "func": "//读取modbus的值,只有读到了1,并且有当前请求开门的参数的时候该流程继续往下走\nvar readData=msg.payload\nreadData=[true]\nvar requestArg=flow.get(\"openArg\")\n\nif (requestArg != undefined && requestArg != null && requestArg.requestId!=undefined)\n{\n    //表明当前门开了\n    if (readData && readData != undefined && readData[0] == true) \n    {\n        //构造请求的参数\n        msg.payload=requestArg\n        flow.set(\"openArg\", null)\n        return msg\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 4040,
        "wires": [
            [
                "60391ba43f279da8"
            ]
        ]
    },
    {
        "id": "c0c7ad9e87d3a754",
        "type": "function",
        "z": "42dfa7aa6508f4a9",
        "name": "rcs response",
        "func": "var response=msg.payload\n\n\nnode.warn(response)\nif(response!=undefined && response!=null && response.success==true){\n    global.set(\"openArg\",null)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 4040,
        "wires": [
            []
        ]
    },
    {
        "id": "5adcf38b48a4135b",
        "type": "function",
        "z": "42dfa7aa6508f4a9",
        "name": "AutoOut (c)",
        "func": "// recieve openArg\nvar requestArg = flow.get(\"openArg\")\n// array of location codes\nvar staticValues = ['0515'];\n// Parsed location of all AMRs\nvar pointCodes = global.get(\"pointCodes\") || [];\n\n// chceck if there is data in openArg\nif (requestArg != undefined && requestArg != null && requestArg.requestId != undefined) {\n    // compare if any amr is in location\n    if (staticValues.some(value => pointCodes.includes(value))) {\n        // send command for ato out of location\n        msg.payload = requestArg;\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 4160,
        "wires": [
            [
                "3a0fef9bf92efa71"
            ]
        ]
    },
    {
        "id": "6bf2529f7bc06eef",
        "type": "inject",
        "z": "42dfa7aa6508f4a9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 4160,
        "wires": [
            [
                "5adcf38b48a4135b"
            ]
        ]
    },
    {
        "id": "f73fe24cfbb1bb56",
        "type": "comment",
        "z": "42dfa7aa6508f4a9",
        "name": "Auto out",
        "info": "",
        "x": 300,
        "y": 4120,
        "wires": []
    },
    {
        "id": "97ad84d21ea2052d",
        "type": "function",
        "z": "42dfa7aa6508f4a9",
        "name": "Reset Flow Values",
        "func": "//flow.set(\"PickBusy\", true)\nflow.set(\"PickRequest\", false)\nflow.set(\"DropRequest\", false)\nflow.set('isLoadingValue', null);\nnode.warn('reset values')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 4400,
        "wires": [
            []
        ]
    },
    {
        "id": "61d8909e46b15a10",
        "type": "comment",
        "z": "42dfa7aa6508f4a9",
        "name": "Send Pick/Drop Request",
        "info": "",
        "x": 1410,
        "y": 3640,
        "wires": []
    },
    {
        "id": "a335d21d1ebf7837",
        "type": "comment",
        "z": "42dfa7aa6508f4a9",
        "name": "Reset Pick/Drop Request",
        "info": "",
        "x": 930,
        "y": 4360,
        "wires": []
    },
    {
        "id": "4ece77e50997ee70",
        "type": "link in",
        "z": "42dfa7aa6508f4a9",
        "name": "Open_Stand_6",
        "links": [
            "ddc51d3b86818d48"
        ],
        "x": 525,
        "y": 3800,
        "wires": [
            [
                "c5756a476d9b2288"
            ]
        ]
    },
    {
        "id": "8d0d975f55288958",
        "type": "link in",
        "z": "42dfa7aa6508f4a9",
        "name": "Close_Stand_6",
        "links": [
            "d1244da4326448e1"
        ],
        "x": 135,
        "y": 4400,
        "wires": [
            [
                "a925e1c2257d5eee"
            ]
        ]
    },
    {
        "id": "5c6ce9514d245fcf",
        "type": "function",
        "z": "42dfa7aa6508f4a9",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 3600,
        "wires": [
            [
                "284ee661f6f0a572",
                "df8400a9cd5a4a8f"
            ]
        ]
    },
    {
        "id": "284ee661f6f0a572",
        "type": "http response",
        "z": "42dfa7aa6508f4a9",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1360,
        "y": 3600,
        "wires": []
    },
    {
        "id": "1b79bd1262a70b54",
        "type": "function",
        "z": "42dfa7aa6508f4a9",
        "name": "Check and save loaded status",
        "func": "// Extract isLoading value from the command property in the payload\nvar isLoadingValue = msg.payload.isLoading;\n\n// Save the isLoading value in a flow variable\nflow.set('isLoadingValue', isLoadingValue);\n\n// Pass the original message to the next node\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 3600,
        "wires": [
            [
                "5c6ce9514d245fcf"
            ]
        ]
    },
    {
        "id": "53c882ab1b4fa039",
        "type": "function",
        "z": "42dfa7aa6508f4a9",
        "name": "Set DropBusy",
        "func": "flow.set(\"DropBusy\", true)\nnode.warn(\"DropBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 3960,
        "wires": [
            [
                "eb9cd07dd56d168a"
            ]
        ]
    },
    {
        "id": "e383e3bf492e9561",
        "type": "function",
        "z": "42dfa7aa6508f4a9",
        "name": "Set PickBusy",
        "func": "flow.set(\"PickBusy\", true)\nnode.warn(\"PickBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 4000,
        "wires": [
            [
                "7dbff8a726c2ae73"
            ]
        ]
    },
    {
        "id": "167b2b3a2df43cde",
        "type": "http request",
        "z": "42dfa7aa6508f4a9",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/rcs/equipment/feedback",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 770,
        "y": 3560,
        "wires": [
            []
        ]
    },
    {
        "id": "bb910567d1b9e6ba",
        "type": "link in",
        "z": "42dfa7aa6508f4a9",
        "name": "link in 16",
        "links": [
            "c5957809d9b0e623"
        ],
        "x": 525,
        "y": 3600,
        "wires": [
            [
                "167b2b3a2df43cde",
                "1b79bd1262a70b54"
            ]
        ]
    },
    {
        "id": "7dbff8a726c2ae73",
        "type": "function",
        "z": "42dfa7aa6508f4a9",
        "name": "OPC msg PickBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 4000,
        "wires": [
            []
        ]
    },
    {
        "id": "8a370d18a7deed1a",
        "type": "function",
        "z": "42dfa7aa6508f4a9",
        "name": "Reset Pick Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 4440,
        "wires": [
            []
        ]
    },
    {
        "id": "90fc630bac5af6f4",
        "type": "function",
        "z": "42dfa7aa6508f4a9",
        "name": "Reset Pick Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 4540,
        "wires": [
            []
        ]
    },
    {
        "id": "402bab5a9f30d812",
        "type": "function",
        "z": "42dfa7aa6508f4a9",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") != null) \n{\n    // If true, send only the first value to the next node\n    node.warn('reset pick/drop')\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 4400,
        "wires": [
            [
                "97ad84d21ea2052d",
                "8a370d18a7deed1a",
                "c41ace905de71789"
            ]
        ]
    },
    {
        "id": "7a34b5a1147d07e2",
        "type": "function",
        "z": "42dfa7aa6508f4a9",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") === null) \n{\n    // If true, send only the first value to the next node\n    flow.set(\"PickBusy\", false);\n    flow.set(\"DropBusy\", false);\n    node.warn(\"Reset Pick/Drop Busy\");\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 4540,
        "wires": [
            [
                "90fc630bac5af6f4",
                "deeec1425291a1fb"
            ]
        ]
    },
    {
        "id": "eb9cd07dd56d168a",
        "type": "function",
        "z": "42dfa7aa6508f4a9",
        "name": "OPC msg DropBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 3960,
        "wires": [
            []
        ]
    },
    {
        "id": "deeec1425291a1fb",
        "type": "function",
        "z": "42dfa7aa6508f4a9",
        "name": "Resset Drop Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 4580,
        "wires": [
            []
        ]
    },
    {
        "id": "df8400a9cd5a4a8f",
        "type": "function",
        "z": "42dfa7aa6508f4a9",
        "name": "Pick/DropRequest (c)",
        "func": "if (flow.get(\"isLoadingValue\") === true) \n{\n    flow.set(\"DropRequest\", true)\n    node.warn(\"Drop Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"DropRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\nelse if (flow.get(\"isLoadingValue\") === false) {\n    flow.set(\"PickRequest\", true)\n    node.warn(\"Pick Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"PickRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 3680,
        "wires": [
            []
        ]
    },
    {
        "id": "c41ace905de71789",
        "type": "function",
        "z": "42dfa7aa6508f4a9",
        "name": "Reset Drop Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 4480,
        "wires": [
            []
        ]
    },
    {
        "id": "c7b45a86701e723b",
        "type": "modbus-read",
        "z": "42dfa7aa6508f4a9",
        "name": "",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Input",
        "adr": "00002",
        "quantity": "1",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "d395581b1150fb7e",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 370,
        "y": 3960,
        "wires": [
            [
                "791f032b033e346b",
                "6b378f6c24f3a830",
                "296cf94b9eca52be"
            ],
            []
        ]
    },
    {
        "id": "791f032b033e346b",
        "type": "function",
        "z": "42dfa7aa6508f4a9",
        "name": "Check for DropEnable",
        "func": "// Assuming msg.payload is the array [ false, false, false, false, false, false, false, false ]\n\n// Extract the first value from the array\nvar firstValue = msg.payload[0];\n\n// Check if the first value is true\nif (firstValue === false && flow.get(\"isLoadingValue\") === true && flow.get(\"DropRequest\") === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Drop Enable\")\n    return msg;\n}\n else {\n    // If false, do nothing (no need to return anything)\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 3960,
        "wires": [
            [
                "53c882ab1b4fa039",
                "3a0fef9bf92efa71"
            ]
        ]
    },
    {
        "id": "6b378f6c24f3a830",
        "type": "function",
        "z": "42dfa7aa6508f4a9",
        "name": "Check for PickEnable",
        "func": "var firstValue = msg.payload[0];\n\nif (firstValue === true && flow.get(\"isLoadingValue\") === false && flow.get('PickRequest') === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Pick Enable\")\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 4000,
        "wires": [
            [
                "e383e3bf492e9561",
                "3a0fef9bf92efa71"
            ]
        ]
    },
    {
        "id": "296cf94b9eca52be",
        "type": "subflow:4cc4a3bd7d66d150",
        "z": "42dfa7aa6508f4a9",
        "name": "",
        "env": [
            {
                "name": "OPC_Item",
                "value": "ns=3;s=\"AMR_Comm\".\"MA_OU_05\"",
                "type": "str"
            }
        ],
        "x": 580,
        "y": 3920,
        "wires": [
            [
                "b57ec7fee6e37235"
            ]
        ]
    },
    {
        "id": "b57ec7fee6e37235",
        "type": "link out",
        "z": "42dfa7aa6508f4a9",
        "name": "link out 24",
        "mode": "link",
        "links": [
            "20f3b1b189a355ab"
        ],
        "x": 725,
        "y": 3920,
        "wires": []
    },
    {
        "id": "a6698997d3b24163",
        "type": "function",
        "z": "851a07d714ca58e0",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 260,
        "wires": [
            [
                "714e0fa9373aea5a"
            ]
        ]
    },
    {
        "id": "714e0fa9373aea5a",
        "type": "http response",
        "z": "851a07d714ca58e0",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1240,
        "y": 260,
        "wires": []
    },
    {
        "id": "c65d530a0f57715e",
        "type": "comment",
        "z": "851a07d714ca58e0",
        "name": "open door request http://sim-les.quicktron.eu:1880/door/command/open",
        "info": "{\n  \"requestId\": \"\", // uuid\n  \"doorCode\": \"\",  // 设备编码\n  \"command\": \"\"    // 暂时用不上 开门接口会传入OPEN，关门接口会传入CLOSE\n}",
        "x": 590,
        "y": 280,
        "wires": []
    },
    {
        "id": "ab556b44b02fa2ef",
        "type": "function",
        "z": "851a07d714ca58e0",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nnode.log(msg);\n\nflow.set('isLoadingValue', null);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 820,
        "wires": [
            [
                "6c691ad33bf7d5e0"
            ]
        ]
    },
    {
        "id": "6c691ad33bf7d5e0",
        "type": "http response",
        "z": "851a07d714ca58e0",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1060,
        "y": 820,
        "wires": []
    },
    {
        "id": "2554395531eb5b21",
        "type": "function",
        "z": "851a07d714ca58e0",
        "name": "save close door arg",
        "func": "msg.parameter=msg.payload\nflow.set(\"closeArg\",msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 820,
        "wires": [
            [
                "ab556b44b02fa2ef"
            ]
        ]
    },
    {
        "id": "bd24904171264da6",
        "type": "function",
        "z": "851a07d714ca58e0",
        "name": "save request arg (c)",
        "func": "\nvar response=msg.payload\nresponse.actionCode='OPEN'\nnode.warn(response)\n//151 IP\nif (response.doorCode != undefined){\n    flow.set(\"openArg\", response)\n    return [msg,null,null,null,null,null,null,null,null]\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "251ef0d10d252d57",
        "type": "function",
        "z": "851a07d714ca58e0",
        "name": "save close door args",
        "func": "\nmsg.parameter = msg.payload\nnode.warn(\"close door request\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 920,
        "wires": [
            [
                "2554395531eb5b21",
                "d4b55b81b9065d15",
                "3e5980d9c01ef086"
            ]
        ]
    },
    {
        "id": "fe1b54b9e2366b7e",
        "type": "function",
        "z": "851a07d714ca58e0",
        "name": "save open door args",
        "func": "msg.parameter = msg.payload\n//node.warn(\"receive open door args\");\n//node.warn(msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 320,
        "wires": [
            [
                "bd24904171264da6",
                "a6698997d3b24163"
            ]
        ]
    },
    {
        "id": "fb18f1810c3d20b8",
        "type": "inject",
        "z": "851a07d714ca58e0",
        "name": "Manual Overrite Pick/DropEnable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 470,
        "y": 580,
        "wires": [
            [
                "77bbd890a7b6b199"
            ]
        ]
    },
    {
        "id": "62e0536f0d763331",
        "type": "http request",
        "z": "851a07d714ca58e0",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/door/command-finish",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1190,
        "y": 560,
        "wires": [
            [
                "dd054013ca7e8678"
            ]
        ]
    },
    {
        "id": "77bbd890a7b6b199",
        "type": "function",
        "z": "851a07d714ca58e0",
        "name": "get saved request arg",
        "func": "//读取modbus的值,只有读到了1,并且有当前请求开门的参数的时候该流程继续往下走\nvar readData=msg.payload\nreadData=[true]\nvar requestArg=flow.get(\"openArg\")\n\nif (requestArg != undefined && requestArg != null && requestArg.requestId!=undefined)\n{\n    //表明当前门开了\n    if (readData && readData != undefined && readData[0] == true) \n    {\n        //构造请求的参数\n        msg.payload=requestArg\n        flow.set(\"openArg\", null)\n        return msg\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 560,
        "wires": [
            [
                "62e0536f0d763331"
            ]
        ]
    },
    {
        "id": "dd054013ca7e8678",
        "type": "function",
        "z": "851a07d714ca58e0",
        "name": "rcs response",
        "func": "var response=msg.payload\n\n\nnode.warn(response)\nif(response!=undefined && response!=null && response.success==true){\n    global.set(\"openArg\",null)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "e874210908a1666e",
        "type": "function",
        "z": "851a07d714ca58e0",
        "name": "AutoOut (c)",
        "func": "// recieve openArg\nvar requestArg = flow.get(\"openArg\")\n// array of location codes\nvar staticValues = ['0503'];\n// Parsed location of all AMRs\nvar pointCodes = global.get(\"pointCodes\") || [];\n\n// chceck if there is data in openArg\nif (requestArg != undefined && requestArg != null && requestArg.requestId != undefined) {\n    // compare if any amr is in location\n    if (staticValues.some(value => pointCodes.includes(value))) {\n        // send command for ato out of location\n        msg.payload = requestArg;\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 680,
        "wires": [
            [
                "77bbd890a7b6b199"
            ]
        ]
    },
    {
        "id": "920c413a0c5f3084",
        "type": "inject",
        "z": "851a07d714ca58e0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 350,
        "y": 680,
        "wires": [
            [
                "e874210908a1666e"
            ]
        ]
    },
    {
        "id": "cae21fce397952dd",
        "type": "comment",
        "z": "851a07d714ca58e0",
        "name": "Auto out",
        "info": "",
        "x": 340,
        "y": 640,
        "wires": []
    },
    {
        "id": "7e88f7a382e506e6",
        "type": "function",
        "z": "851a07d714ca58e0",
        "name": "Reset Flow Values",
        "func": "//flow.set(\"PickBusy\", true)\nflow.set(\"PickRequest\", false)\nflow.set(\"DropRequest\", false)\nflow.set('isLoadingValue', null);\nnode.warn('reset values')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "7a1e4f0c9ece38f6",
        "type": "comment",
        "z": "851a07d714ca58e0",
        "name": "Send Pick/Drop Request",
        "info": "",
        "x": 1450,
        "y": 160,
        "wires": []
    },
    {
        "id": "cd959769b2851960",
        "type": "comment",
        "z": "851a07d714ca58e0",
        "name": "Reset Pick/Drop Request",
        "info": "",
        "x": 970,
        "y": 880,
        "wires": []
    },
    {
        "id": "0bfa9cd92453f4c7",
        "type": "link in",
        "z": "851a07d714ca58e0",
        "name": "Open_Stand_6",
        "links": [
            "01cfcc26861078dd"
        ],
        "x": 565,
        "y": 320,
        "wires": [
            [
                "fe1b54b9e2366b7e"
            ]
        ]
    },
    {
        "id": "6de1e6cd79f65933",
        "type": "link in",
        "z": "851a07d714ca58e0",
        "name": "Close_Stand_6",
        "links": [
            "33d6f3922f20210b"
        ],
        "x": 175,
        "y": 920,
        "wires": [
            [
                "251ef0d10d252d57"
            ]
        ]
    },
    {
        "id": "0a9c4c3c67bd0ef3",
        "type": "function",
        "z": "851a07d714ca58e0",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 120,
        "wires": [
            [
                "f62b7da019a8cf10",
                "7f4b6a54bf261885"
            ]
        ]
    },
    {
        "id": "f62b7da019a8cf10",
        "type": "http response",
        "z": "851a07d714ca58e0",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1400,
        "y": 120,
        "wires": []
    },
    {
        "id": "2bbe8fed0d73d88c",
        "type": "function",
        "z": "851a07d714ca58e0",
        "name": "Check and save loaded status",
        "func": "// Extract isLoading value from the command property in the payload\nvar isLoadingValue = msg.payload.isLoading;\n\n// Save the isLoading value in a flow variable\nflow.set('isLoadingValue', isLoadingValue);\n\n// Pass the original message to the next node\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 120,
        "wires": [
            [
                "0a9c4c3c67bd0ef3"
            ]
        ]
    },
    {
        "id": "b315bb1eac61c925",
        "type": "function",
        "z": "851a07d714ca58e0",
        "name": "Set DropBusy",
        "func": "flow.set(\"DropBusy\", true)\nnode.warn(\"DropBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 480,
        "wires": [
            [
                "bbfe0534d98a4192"
            ]
        ]
    },
    {
        "id": "c65e6e360a027e39",
        "type": "function",
        "z": "851a07d714ca58e0",
        "name": "Set PickBusy",
        "func": "flow.set(\"PickBusy\", true)\nnode.warn(\"PickBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 520,
        "wires": [
            [
                "fc52525f885cceb7"
            ]
        ]
    },
    {
        "id": "a1c00cda1756e280",
        "type": "http request",
        "z": "851a07d714ca58e0",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/rcs/equipment/feedback",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 810,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "228c6afc75179045",
        "type": "link in",
        "z": "851a07d714ca58e0",
        "name": "link in 20",
        "links": [
            "e56062d20b105e0b"
        ],
        "x": 565,
        "y": 120,
        "wires": [
            [
                "a1c00cda1756e280",
                "2bbe8fed0d73d88c"
            ]
        ]
    },
    {
        "id": "fc52525f885cceb7",
        "type": "function",
        "z": "851a07d714ca58e0",
        "name": "OPC msg PickBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "9abded2e532a3370",
        "type": "function",
        "z": "851a07d714ca58e0",
        "name": "Reset Pick Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "8c8702ab960dc41e",
        "type": "function",
        "z": "851a07d714ca58e0",
        "name": "Reset Pick Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "d4b55b81b9065d15",
        "type": "function",
        "z": "851a07d714ca58e0",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") != null) \n{\n    // If true, send only the first value to the next node\n    node.warn('reset pick/drop')\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 920,
        "wires": [
            [
                "7e88f7a382e506e6",
                "9abded2e532a3370",
                "f790602f2ccd3194"
            ]
        ]
    },
    {
        "id": "3e5980d9c01ef086",
        "type": "function",
        "z": "851a07d714ca58e0",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") === null) \n{\n    // If true, send only the first value to the next node\n    flow.set(\"PickBusy\", false);\n    flow.set(\"DropBusy\", false);\n    node.warn(\"Reset Pick/Drop Busy\");\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 1060,
        "wires": [
            [
                "8c8702ab960dc41e",
                "61d5aab6e1d3fd61"
            ]
        ]
    },
    {
        "id": "bbfe0534d98a4192",
        "type": "function",
        "z": "851a07d714ca58e0",
        "name": "OPC msg DropBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "61d5aab6e1d3fd61",
        "type": "function",
        "z": "851a07d714ca58e0",
        "name": "Resset Drop Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "7f4b6a54bf261885",
        "type": "function",
        "z": "851a07d714ca58e0",
        "name": "Pick/DropRequest (c)",
        "func": "if (flow.get(\"isLoadingValue\") === true) \n{\n    flow.set(\"DropRequest\", true)\n    node.warn(\"Drop Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"DropRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\nelse if (flow.get(\"isLoadingValue\") === false) {\n    flow.set(\"PickRequest\", true)\n    node.warn(\"Pick Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"PickRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "f790602f2ccd3194",
        "type": "function",
        "z": "851a07d714ca58e0",
        "name": "Reset Drop Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "ff81108d203fe605",
        "type": "modbus-read",
        "z": "851a07d714ca58e0",
        "name": "",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Input",
        "adr": "00001",
        "quantity": "1",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "89a8d1f0ed1f4df2",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 410,
        "y": 480,
        "wires": [
            [
                "f943f34ca65480a1",
                "1e16580522940f9e",
                "28a95227cedbce26"
            ],
            []
        ]
    },
    {
        "id": "f943f34ca65480a1",
        "type": "function",
        "z": "851a07d714ca58e0",
        "name": "Check for DropEnable",
        "func": "// Assuming msg.payload is the array [ false, false, false, false, false, false, false, false ]\n\n// Extract the first value from the array\nvar firstValue = msg.payload[0];\n\n// Check if the first value is true\nif (firstValue === false && flow.get(\"isLoadingValue\") === true && flow.get(\"DropRequest\") === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Drop Enable\")\n    return msg;\n}\n else {\n    // If false, do nothing (no need to return anything)\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 480,
        "wires": [
            [
                "b315bb1eac61c925",
                "77bbd890a7b6b199"
            ]
        ]
    },
    {
        "id": "1e16580522940f9e",
        "type": "function",
        "z": "851a07d714ca58e0",
        "name": "Check for PickEnable",
        "func": "var firstValue = msg.payload[0];\n\nif (firstValue === true && flow.get(\"isLoadingValue\") === false && flow.get('PickRequest') === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Pick Enable\")\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 520,
        "wires": [
            [
                "c65e6e360a027e39",
                "77bbd890a7b6b199"
            ]
        ]
    },
    {
        "id": "28a95227cedbce26",
        "type": "subflow:4cc4a3bd7d66d150",
        "z": "851a07d714ca58e0",
        "name": "",
        "env": [
            {
                "name": "OPC_Item",
                "value": "ns=3;s=\"AMR_Comm\".\"MA_OU_01\"",
                "type": "str"
            }
        ],
        "x": 620,
        "y": 440,
        "wires": [
            [
                "d98c1a31f8fa7eba"
            ]
        ]
    },
    {
        "id": "d98c1a31f8fa7eba",
        "type": "link out",
        "z": "851a07d714ca58e0",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "20f3b1b189a355ab"
        ],
        "x": 765,
        "y": 440,
        "wires": []
    },
    {
        "id": "4cb9d4f98c0d1d87",
        "type": "function",
        "z": "d6eece90716f71c5",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 260,
        "wires": [
            [
                "1832acf44a9fe84a"
            ]
        ]
    },
    {
        "id": "1832acf44a9fe84a",
        "type": "http response",
        "z": "d6eece90716f71c5",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1240,
        "y": 260,
        "wires": []
    },
    {
        "id": "fcee70586afa3030",
        "type": "comment",
        "z": "d6eece90716f71c5",
        "name": "open door request http://sim-les.quicktron.eu:1880/door/command/open",
        "info": "{\n  \"requestId\": \"\", // uuid\n  \"doorCode\": \"\",  // 设备编码\n  \"command\": \"\"    // 暂时用不上 开门接口会传入OPEN，关门接口会传入CLOSE\n}",
        "x": 590,
        "y": 280,
        "wires": []
    },
    {
        "id": "eab1e85e493c1c01",
        "type": "function",
        "z": "d6eece90716f71c5",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nnode.log(msg);\n\nflow.set('isLoadingValue', null);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 820,
        "wires": [
            [
                "012f6bbcc643675c"
            ]
        ]
    },
    {
        "id": "012f6bbcc643675c",
        "type": "http response",
        "z": "d6eece90716f71c5",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1060,
        "y": 820,
        "wires": []
    },
    {
        "id": "dbeca79cc3a9fbe6",
        "type": "function",
        "z": "d6eece90716f71c5",
        "name": "save close door arg",
        "func": "msg.parameter=msg.payload\nflow.set(\"closeArg\",msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 820,
        "wires": [
            [
                "eab1e85e493c1c01"
            ]
        ]
    },
    {
        "id": "f8c508153ea86ad6",
        "type": "function",
        "z": "d6eece90716f71c5",
        "name": "save request arg (c)",
        "func": "\nvar response=msg.payload\nresponse.actionCode='OPEN'\nnode.warn(response)\n//151 IP\nif (response.doorCode != undefined){\n    flow.set(\"openArg\", response)\n    return [msg,null,null,null,null,null,null,null,null]\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "76984a532b304df1",
        "type": "function",
        "z": "d6eece90716f71c5",
        "name": "save close door args",
        "func": "\nmsg.parameter = msg.payload\nnode.warn(\"close door request\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 920,
        "wires": [
            [
                "dbeca79cc3a9fbe6",
                "21e81ca5b7757e9e",
                "2620c4d808e64ab8"
            ]
        ]
    },
    {
        "id": "5363e7904a1e3a11",
        "type": "function",
        "z": "d6eece90716f71c5",
        "name": "save open door args",
        "func": "msg.parameter = msg.payload\n//node.warn(\"receive open door args\");\n//node.warn(msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 320,
        "wires": [
            [
                "f8c508153ea86ad6",
                "4cb9d4f98c0d1d87"
            ]
        ]
    },
    {
        "id": "0c31245c5e39bea7",
        "type": "inject",
        "z": "d6eece90716f71c5",
        "name": "Manual Overrite Pick/DropEnable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 470,
        "y": 580,
        "wires": [
            [
                "46aa4df02a01b428"
            ]
        ]
    },
    {
        "id": "6b85ea766677fb71",
        "type": "http request",
        "z": "d6eece90716f71c5",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/door/command-finish",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1190,
        "y": 560,
        "wires": [
            [
                "37d3e18e49020148"
            ]
        ]
    },
    {
        "id": "46aa4df02a01b428",
        "type": "function",
        "z": "d6eece90716f71c5",
        "name": "get saved request arg",
        "func": "//读取modbus的值,只有读到了1,并且有当前请求开门的参数的时候该流程继续往下走\nvar readData=msg.payload\nreadData=[true]\nvar requestArg=flow.get(\"openArg\")\n\nif (requestArg != undefined && requestArg != null && requestArg.requestId!=undefined)\n{\n    //表明当前门开了\n    if (readData && readData != undefined && readData[0] == true) \n    {\n        //构造请求的参数\n        msg.payload=requestArg\n        flow.set(\"openArg\", null)\n        return msg\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 560,
        "wires": [
            [
                "6b85ea766677fb71"
            ]
        ]
    },
    {
        "id": "37d3e18e49020148",
        "type": "function",
        "z": "d6eece90716f71c5",
        "name": "rcs response",
        "func": "var response=msg.payload\n\n\nnode.warn(response)\nif(response!=undefined && response!=null && response.success==true){\n    global.set(\"openArg\",null)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "4b526d0622ea98e7",
        "type": "function",
        "z": "d6eece90716f71c5",
        "name": "AutoOut (c)",
        "func": "// recieve openArg\nvar requestArg = flow.get(\"openArg\")\n// array of location codes\nvar staticValues = ['0506'];\n// Parsed location of all AMRs\nvar pointCodes = global.get(\"pointCodes\") || [];\n\n// chceck if there is data in openArg\nif (requestArg != undefined && requestArg != null && requestArg.requestId != undefined) {\n    // compare if any amr is in location\n    if (staticValues.some(value => pointCodes.includes(value))) {\n        // send command for ato out of location\n        msg.payload = requestArg;\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 680,
        "wires": [
            [
                "46aa4df02a01b428"
            ]
        ]
    },
    {
        "id": "701929041136bd4d",
        "type": "inject",
        "z": "d6eece90716f71c5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 350,
        "y": 680,
        "wires": [
            [
                "4b526d0622ea98e7"
            ]
        ]
    },
    {
        "id": "16ac731d0afc3562",
        "type": "comment",
        "z": "d6eece90716f71c5",
        "name": "Auto out",
        "info": "",
        "x": 340,
        "y": 640,
        "wires": []
    },
    {
        "id": "70f14d34fc80655a",
        "type": "function",
        "z": "d6eece90716f71c5",
        "name": "Reset Flow Values",
        "func": "//flow.set(\"PickBusy\", true)\nflow.set(\"PickRequest\", false)\nflow.set(\"DropRequest\", false)\nflow.set('isLoadingValue', null);\nnode.warn('reset values')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "80da86b64bd2e8ab",
        "type": "comment",
        "z": "d6eece90716f71c5",
        "name": "Send Pick/Drop Request",
        "info": "",
        "x": 1450,
        "y": 160,
        "wires": []
    },
    {
        "id": "d47dc2e48687156f",
        "type": "comment",
        "z": "d6eece90716f71c5",
        "name": "Reset Pick/Drop Request",
        "info": "",
        "x": 970,
        "y": 880,
        "wires": []
    },
    {
        "id": "35759cb536f08924",
        "type": "link in",
        "z": "d6eece90716f71c5",
        "name": "Open_Stand_6",
        "links": [
            "4bcff48399977fae"
        ],
        "x": 565,
        "y": 320,
        "wires": [
            [
                "5363e7904a1e3a11"
            ]
        ]
    },
    {
        "id": "a6ed00d1313410ce",
        "type": "link in",
        "z": "d6eece90716f71c5",
        "name": "Close_Stand_6",
        "links": [
            "48b7abd5b6e97d40"
        ],
        "x": 175,
        "y": 920,
        "wires": [
            [
                "76984a532b304df1"
            ]
        ]
    },
    {
        "id": "be9ba8d35e2b0528",
        "type": "function",
        "z": "d6eece90716f71c5",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 120,
        "wires": [
            [
                "eef34f1d48151a09",
                "38a20f2c397bf774"
            ]
        ]
    },
    {
        "id": "eef34f1d48151a09",
        "type": "http response",
        "z": "d6eece90716f71c5",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1400,
        "y": 120,
        "wires": []
    },
    {
        "id": "a982597dd8d8a366",
        "type": "function",
        "z": "d6eece90716f71c5",
        "name": "Check and save loaded status",
        "func": "// Extract isLoading value from the command property in the payload\nvar isLoadingValue = msg.payload.isLoading;\n\n// Save the isLoading value in a flow variable\nflow.set('isLoadingValue', isLoadingValue);\n\n// Pass the original message to the next node\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 120,
        "wires": [
            [
                "be9ba8d35e2b0528"
            ]
        ]
    },
    {
        "id": "31088e8fd6fd34c7",
        "type": "function",
        "z": "d6eece90716f71c5",
        "name": "Set DropBusy",
        "func": "flow.set(\"DropBusy\", true)\nnode.warn(\"DropBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 480,
        "wires": [
            [
                "bb1cf0efef425228"
            ]
        ]
    },
    {
        "id": "cc7b371ada6857f4",
        "type": "function",
        "z": "d6eece90716f71c5",
        "name": "Set PickBusy",
        "func": "flow.set(\"PickBusy\", true)\nnode.warn(\"PickBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 520,
        "wires": [
            [
                "5613905cfbf6df53"
            ]
        ]
    },
    {
        "id": "f170f6019c6eaf55",
        "type": "http request",
        "z": "d6eece90716f71c5",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/rcs/equipment/feedback",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 810,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "5748557e8faaeea9",
        "type": "link in",
        "z": "d6eece90716f71c5",
        "name": "link in 19",
        "links": [
            "f596d9bfe7d80cb4"
        ],
        "x": 565,
        "y": 120,
        "wires": [
            [
                "f170f6019c6eaf55",
                "a982597dd8d8a366"
            ]
        ]
    },
    {
        "id": "5613905cfbf6df53",
        "type": "function",
        "z": "d6eece90716f71c5",
        "name": "OPC msg PickBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "afd7b5a1f10e0c75",
        "type": "function",
        "z": "d6eece90716f71c5",
        "name": "Reset Pick Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "a0505d27fcb1538c",
        "type": "function",
        "z": "d6eece90716f71c5",
        "name": "Reset Pick Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "21e81ca5b7757e9e",
        "type": "function",
        "z": "d6eece90716f71c5",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") != null) \n{\n    // If true, send only the first value to the next node\n    node.warn('reset pick/drop')\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 920,
        "wires": [
            [
                "70f14d34fc80655a",
                "afd7b5a1f10e0c75",
                "318bae2e2725c209"
            ]
        ]
    },
    {
        "id": "2620c4d808e64ab8",
        "type": "function",
        "z": "d6eece90716f71c5",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") === null) \n{\n    // If true, send only the first value to the next node\n    flow.set(\"PickBusy\", false);\n    flow.set(\"DropBusy\", false);\n    node.warn(\"Reset Pick/Drop Busy\");\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 1060,
        "wires": [
            [
                "a0505d27fcb1538c",
                "b0fea32cb8fa528e"
            ]
        ]
    },
    {
        "id": "bb1cf0efef425228",
        "type": "function",
        "z": "d6eece90716f71c5",
        "name": "OPC msg DropBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "b0fea32cb8fa528e",
        "type": "function",
        "z": "d6eece90716f71c5",
        "name": "Resset Drop Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "38a20f2c397bf774",
        "type": "function",
        "z": "d6eece90716f71c5",
        "name": "Pick/DropRequest (c)",
        "func": "if (flow.get(\"isLoadingValue\") === true) \n{\n    flow.set(\"DropRequest\", true)\n    node.warn(\"Drop Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"DropRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\nelse if (flow.get(\"isLoadingValue\") === false) {\n    flow.set(\"PickRequest\", true)\n    node.warn(\"Pick Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"PickRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "318bae2e2725c209",
        "type": "function",
        "z": "d6eece90716f71c5",
        "name": "Reset Drop Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "1c970bb205128122",
        "type": "modbus-read",
        "z": "d6eece90716f71c5",
        "name": "",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Input",
        "adr": "00005",
        "quantity": "1",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "d395581b1150fb7e",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 410,
        "y": 480,
        "wires": [
            [
                "9b848ea7f225c076",
                "3c5a847154d6f8ce",
                "873bc9aa2e261010"
            ],
            []
        ]
    },
    {
        "id": "9b848ea7f225c076",
        "type": "function",
        "z": "d6eece90716f71c5",
        "name": "Check for DropEnable",
        "func": "// Assuming msg.payload is the array [ false, false, false, false, false, false, false, false ]\n\n// Extract the first value from the array\nvar firstValue = msg.payload[0];\n\n// Check if the first value is true\nif (firstValue === false && flow.get(\"isLoadingValue\") === true && flow.get(\"DropRequest\") === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Drop Enable\")\n    return msg;\n}\n else {\n    // If false, do nothing (no need to return anything)\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 480,
        "wires": [
            [
                "31088e8fd6fd34c7",
                "46aa4df02a01b428"
            ]
        ]
    },
    {
        "id": "3c5a847154d6f8ce",
        "type": "function",
        "z": "d6eece90716f71c5",
        "name": "Check for PickEnable",
        "func": "var firstValue = msg.payload[0];\n\nif (firstValue === true && flow.get(\"isLoadingValue\") === false && flow.get('PickRequest') === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Pick Enable\")\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 520,
        "wires": [
            [
                "cc7b371ada6857f4",
                "46aa4df02a01b428"
            ]
        ]
    },
    {
        "id": "873bc9aa2e261010",
        "type": "subflow:4cc4a3bd7d66d150",
        "z": "d6eece90716f71c5",
        "name": "",
        "env": [
            {
                "name": "OPC_Item",
                "value": "ns=3;s=\"AMR_Comm\".\"MA_OU_02\"",
                "type": "str"
            }
        ],
        "x": 620,
        "y": 440,
        "wires": [
            [
                "a58c4c5831e5fa46"
            ]
        ]
    },
    {
        "id": "a58c4c5831e5fa46",
        "type": "link out",
        "z": "d6eece90716f71c5",
        "name": "link out 4",
        "mode": "link",
        "links": [
            "20f3b1b189a355ab"
        ],
        "x": 765,
        "y": 440,
        "wires": []
    },
    {
        "id": "29d7616793beed5f",
        "type": "function",
        "z": "7134b1a6f019b638",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 260,
        "wires": [
            [
                "2e80e01d062d1d4f"
            ]
        ]
    },
    {
        "id": "2e80e01d062d1d4f",
        "type": "http response",
        "z": "7134b1a6f019b638",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1260,
        "y": 260,
        "wires": []
    },
    {
        "id": "7db5087ce9fdee1a",
        "type": "comment",
        "z": "7134b1a6f019b638",
        "name": "open door request http://sim-les.quicktron.eu:1880/door/command/open",
        "info": "{\n  \"requestId\": \"\", // uuid\n  \"doorCode\": \"\",  // 设备编码\n  \"command\": \"\"    // 暂时用不上 开门接口会传入OPEN，关门接口会传入CLOSE\n}",
        "x": 610,
        "y": 280,
        "wires": []
    },
    {
        "id": "56da9cb0a720de91",
        "type": "function",
        "z": "7134b1a6f019b638",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nnode.log(msg);\n\nflow.set('isLoadingValue', null);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 820,
        "wires": [
            [
                "d7c8370f20fa6ce0"
            ]
        ]
    },
    {
        "id": "d7c8370f20fa6ce0",
        "type": "http response",
        "z": "7134b1a6f019b638",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1080,
        "y": 820,
        "wires": []
    },
    {
        "id": "d759cf7adcb0da8e",
        "type": "function",
        "z": "7134b1a6f019b638",
        "name": "save close door arg",
        "func": "msg.parameter=msg.payload\nflow.set(\"closeArg\",msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 820,
        "wires": [
            [
                "56da9cb0a720de91"
            ]
        ]
    },
    {
        "id": "773828737c163507",
        "type": "function",
        "z": "7134b1a6f019b638",
        "name": "save request arg (c)",
        "func": "\nvar response=msg.payload\nresponse.actionCode='OPEN'\nnode.warn(response)\n//151 IP\nif (response.doorCode != undefined){\n    flow.set(\"openArg\", response)\n    return [msg,null,null,null,null,null,null,null,null]\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "517647d12aaaa8b5",
        "type": "function",
        "z": "7134b1a6f019b638",
        "name": "save close door args",
        "func": "\nmsg.parameter = msg.payload\nnode.warn(\"close door request\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 920,
        "wires": [
            [
                "d759cf7adcb0da8e",
                "fc531f71ad28f666",
                "9a892280fea6c41e"
            ]
        ]
    },
    {
        "id": "90a0d951d8a51691",
        "type": "function",
        "z": "7134b1a6f019b638",
        "name": "save open door args",
        "func": "msg.parameter = msg.payload\n//node.warn(\"receive open door args\");\n//node.warn(msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 320,
        "wires": [
            [
                "773828737c163507",
                "29d7616793beed5f"
            ]
        ]
    },
    {
        "id": "b70a6845f616e826",
        "type": "inject",
        "z": "7134b1a6f019b638",
        "name": "Manual Overrite Pick/DropEnable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 490,
        "y": 580,
        "wires": [
            [
                "a3ac436034f0fbad"
            ]
        ]
    },
    {
        "id": "748e3bf155883625",
        "type": "http request",
        "z": "7134b1a6f019b638",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/door/command-finish",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1210,
        "y": 560,
        "wires": [
            [
                "f3aa548f0c9dccbc"
            ]
        ]
    },
    {
        "id": "a3ac436034f0fbad",
        "type": "function",
        "z": "7134b1a6f019b638",
        "name": "get saved request arg",
        "func": "//读取modbus的值,只有读到了1,并且有当前请求开门的参数的时候该流程继续往下走\nvar readData=msg.payload\nreadData=[true]\nvar requestArg=flow.get(\"openArg\")\n\nif (requestArg != undefined && requestArg != null && requestArg.requestId!=undefined)\n{\n    //表明当前门开了\n    if (readData && readData != undefined && readData[0] == true) \n    {\n        //构造请求的参数\n        msg.payload=requestArg\n        flow.set(\"openArg\", null)\n        return msg\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 560,
        "wires": [
            [
                "748e3bf155883625"
            ]
        ]
    },
    {
        "id": "f3aa548f0c9dccbc",
        "type": "function",
        "z": "7134b1a6f019b638",
        "name": "rcs response",
        "func": "var response=msg.payload\n\n\nnode.warn(response)\nif(response!=undefined && response!=null && response.success==true){\n    global.set(\"openArg\",null)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "fdd3cce7c19c4a2a",
        "type": "function",
        "z": "7134b1a6f019b638",
        "name": "AutoOut (c)",
        "func": "// recieve openArg\nvar requestArg = flow.get(\"openArg\")\n// array of location codes\nvar staticValues = ['0509'];\n// Parsed location of all AMRs\nvar pointCodes = global.get(\"pointCodes\") || [];\n\n// chceck if there is data in openArg\nif (requestArg != undefined && requestArg != null && requestArg.requestId != undefined) {\n    // compare if any amr is in location\n    if (staticValues.some(value => pointCodes.includes(value))) {\n        // send command for ato out of location\n        msg.payload = requestArg;\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 680,
        "wires": [
            [
                "a3ac436034f0fbad"
            ]
        ]
    },
    {
        "id": "6b0294593b9694a1",
        "type": "inject",
        "z": "7134b1a6f019b638",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 370,
        "y": 680,
        "wires": [
            [
                "fdd3cce7c19c4a2a"
            ]
        ]
    },
    {
        "id": "58c4a356b2c7c7f0",
        "type": "comment",
        "z": "7134b1a6f019b638",
        "name": "Auto out",
        "info": "",
        "x": 360,
        "y": 640,
        "wires": []
    },
    {
        "id": "e69794187f9a8042",
        "type": "function",
        "z": "7134b1a6f019b638",
        "name": "Reset Flow Values",
        "func": "//flow.set(\"PickBusy\", true)\nflow.set(\"PickRequest\", false)\nflow.set(\"DropRequest\", false)\nflow.set('isLoadingValue', null);\nnode.warn('reset values')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "c1bb93ea188e6241",
        "type": "comment",
        "z": "7134b1a6f019b638",
        "name": "Send Pick/Drop Request",
        "info": "",
        "x": 1470,
        "y": 160,
        "wires": []
    },
    {
        "id": "5ad485590665826d",
        "type": "comment",
        "z": "7134b1a6f019b638",
        "name": "Reset Pick/Drop Request",
        "info": "",
        "x": 990,
        "y": 880,
        "wires": []
    },
    {
        "id": "9cdc81599a4749f5",
        "type": "link in",
        "z": "7134b1a6f019b638",
        "name": "Open_Stand_6",
        "links": [
            "067169ba685a485c"
        ],
        "x": 585,
        "y": 320,
        "wires": [
            [
                "90a0d951d8a51691"
            ]
        ]
    },
    {
        "id": "eac0a03baf0e065f",
        "type": "link in",
        "z": "7134b1a6f019b638",
        "name": "Close_Stand_6",
        "links": [
            "3f7a7de39e3edfa7"
        ],
        "x": 195,
        "y": 920,
        "wires": [
            [
                "517647d12aaaa8b5"
            ]
        ]
    },
    {
        "id": "ba0c0a10e345fd1e",
        "type": "function",
        "z": "7134b1a6f019b638",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 120,
        "wires": [
            [
                "643368669ab70754",
                "d91806dd4e97e924"
            ]
        ]
    },
    {
        "id": "643368669ab70754",
        "type": "http response",
        "z": "7134b1a6f019b638",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1420,
        "y": 120,
        "wires": []
    },
    {
        "id": "ce61c9a471d3549e",
        "type": "function",
        "z": "7134b1a6f019b638",
        "name": "Check and save loaded status",
        "func": "// Extract isLoading value from the command property in the payload\nvar isLoadingValue = msg.payload.isLoading;\n\n// Save the isLoading value in a flow variable\nflow.set('isLoadingValue', isLoadingValue);\n\n// Pass the original message to the next node\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 120,
        "wires": [
            [
                "ba0c0a10e345fd1e"
            ]
        ]
    },
    {
        "id": "a62952a35838d493",
        "type": "function",
        "z": "7134b1a6f019b638",
        "name": "Set DropBusy",
        "func": "flow.set(\"DropBusy\", true)\nnode.warn(\"DropBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 480,
        "wires": [
            [
                "2a11396622d08d7a"
            ]
        ]
    },
    {
        "id": "ef0fedbb561ef1fd",
        "type": "function",
        "z": "7134b1a6f019b638",
        "name": "Set PickBusy",
        "func": "flow.set(\"PickBusy\", true)\nnode.warn(\"PickBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 520,
        "wires": [
            [
                "416292a8515e8472"
            ]
        ]
    },
    {
        "id": "4cafb8007df47c17",
        "type": "http request",
        "z": "7134b1a6f019b638",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/rcs/equipment/feedback",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 830,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "c2835b2b0bf3acf9",
        "type": "link in",
        "z": "7134b1a6f019b638",
        "name": "link in 18",
        "links": [
            "03e24b118b2f2b21"
        ],
        "x": 585,
        "y": 120,
        "wires": [
            [
                "4cafb8007df47c17",
                "ce61c9a471d3549e"
            ]
        ]
    },
    {
        "id": "416292a8515e8472",
        "type": "function",
        "z": "7134b1a6f019b638",
        "name": "OPC msg PickBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "271f0af04d55e1d1",
        "type": "function",
        "z": "7134b1a6f019b638",
        "name": "Reset Pick Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "425a1e012a710e34",
        "type": "function",
        "z": "7134b1a6f019b638",
        "name": "Reset Pick Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "fc531f71ad28f666",
        "type": "function",
        "z": "7134b1a6f019b638",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") != null) \n{\n    // If true, send only the first value to the next node\n    node.warn('reset pick/drop')\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 920,
        "wires": [
            [
                "e69794187f9a8042",
                "271f0af04d55e1d1",
                "5fc69e441c7600cd"
            ]
        ]
    },
    {
        "id": "9a892280fea6c41e",
        "type": "function",
        "z": "7134b1a6f019b638",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") === null) \n{\n    // If true, send only the first value to the next node\n    flow.set(\"PickBusy\", false);\n    flow.set(\"DropBusy\", false);\n    node.warn(\"Reset Pick/Drop Busy\");\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1060,
        "wires": [
            [
                "425a1e012a710e34",
                "b4cfddf37ee5e5cc"
            ]
        ]
    },
    {
        "id": "2a11396622d08d7a",
        "type": "function",
        "z": "7134b1a6f019b638",
        "name": "OPC msg DropBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "b4cfddf37ee5e5cc",
        "type": "function",
        "z": "7134b1a6f019b638",
        "name": "Resset Drop Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "d91806dd4e97e924",
        "type": "function",
        "z": "7134b1a6f019b638",
        "name": "Pick/DropRequest (c)",
        "func": "if (flow.get(\"isLoadingValue\") === true) \n{\n    flow.set(\"DropRequest\", true)\n    node.warn(\"Drop Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"DropRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\nelse if (flow.get(\"isLoadingValue\") === false) {\n    flow.set(\"PickRequest\", true)\n    node.warn(\"Pick Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"PickRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "5fc69e441c7600cd",
        "type": "function",
        "z": "7134b1a6f019b638",
        "name": "Reset Drop Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "afd255cc6abeb770",
        "type": "modbus-read",
        "z": "7134b1a6f019b638",
        "name": "",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Input",
        "adr": "00004",
        "quantity": "1",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "d395581b1150fb7e",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 430,
        "y": 480,
        "wires": [
            [
                "faee46f00ca8e93f",
                "d1a125e3da76ae07",
                "9df7b7215353d6f5"
            ],
            []
        ]
    },
    {
        "id": "faee46f00ca8e93f",
        "type": "function",
        "z": "7134b1a6f019b638",
        "name": "Check for DropEnable",
        "func": "// Assuming msg.payload is the array [ false, false, false, false, false, false, false, false ]\n\n// Extract the first value from the array\nvar firstValue = msg.payload[0];\n\n// Check if the first value is true\nif (firstValue === false && flow.get(\"isLoadingValue\") === true && flow.get(\"DropRequest\") === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Drop Enable\")\n    return msg;\n}\n else {\n    // If false, do nothing (no need to return anything)\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 480,
        "wires": [
            [
                "a62952a35838d493",
                "a3ac436034f0fbad"
            ]
        ]
    },
    {
        "id": "d1a125e3da76ae07",
        "type": "function",
        "z": "7134b1a6f019b638",
        "name": "Check for PickEnable",
        "func": "var firstValue = msg.payload[0];\n\nif (firstValue === true && flow.get(\"isLoadingValue\") === false && flow.get('PickRequest') === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Pick Enable\")\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 520,
        "wires": [
            [
                "ef0fedbb561ef1fd",
                "a3ac436034f0fbad"
            ]
        ]
    },
    {
        "id": "9df7b7215353d6f5",
        "type": "subflow:4cc4a3bd7d66d150",
        "z": "7134b1a6f019b638",
        "name": "",
        "env": [
            {
                "name": "OPC_Item",
                "value": "ns=3;s=\"AMR_Comm\".\"MA_OU_03\"",
                "type": "str"
            }
        ],
        "x": 640,
        "y": 440,
        "wires": [
            [
                "035183ea3cf5a375"
            ]
        ]
    },
    {
        "id": "035183ea3cf5a375",
        "type": "link out",
        "z": "7134b1a6f019b638",
        "name": "link out 5",
        "mode": "link",
        "links": [
            "20f3b1b189a355ab"
        ],
        "x": 785,
        "y": 440,
        "wires": []
    },
    {
        "id": "18d18f9af9b9fc7f",
        "type": "function",
        "z": "5a6f939f0a632dfa",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 260,
        "wires": [
            [
                "a3d4eae8972854d8"
            ]
        ]
    },
    {
        "id": "a3d4eae8972854d8",
        "type": "http response",
        "z": "5a6f939f0a632dfa",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1260,
        "y": 260,
        "wires": []
    },
    {
        "id": "8da606469e58ce88",
        "type": "comment",
        "z": "5a6f939f0a632dfa",
        "name": "open door request http://sim-les.quicktron.eu:1880/door/command/open",
        "info": "{\n  \"requestId\": \"\", // uuid\n  \"doorCode\": \"\",  // 设备编码\n  \"command\": \"\"    // 暂时用不上 开门接口会传入OPEN，关门接口会传入CLOSE\n}",
        "x": 610,
        "y": 280,
        "wires": []
    },
    {
        "id": "1f05418ccf6a9d91",
        "type": "function",
        "z": "5a6f939f0a632dfa",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nnode.log(msg);\n\nflow.set('isLoadingValue', null);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 820,
        "wires": [
            [
                "94dc91e7ff23532c"
            ]
        ]
    },
    {
        "id": "94dc91e7ff23532c",
        "type": "http response",
        "z": "5a6f939f0a632dfa",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1080,
        "y": 820,
        "wires": []
    },
    {
        "id": "508471e150fb947b",
        "type": "function",
        "z": "5a6f939f0a632dfa",
        "name": "save close door arg",
        "func": "msg.parameter=msg.payload\nflow.set(\"closeArg\",msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 820,
        "wires": [
            [
                "1f05418ccf6a9d91"
            ]
        ]
    },
    {
        "id": "1066354113d12094",
        "type": "function",
        "z": "5a6f939f0a632dfa",
        "name": "save request arg (c)",
        "func": "\nvar response=msg.payload\nresponse.actionCode='OPEN'\nnode.warn(response)\n//151 IP\nif (response.doorCode != undefined){\n    flow.set(\"openArg\", response)\n    return [msg,null,null,null,null,null,null,null,null]\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "f27a38a79e8561b5",
        "type": "function",
        "z": "5a6f939f0a632dfa",
        "name": "save close door args",
        "func": "\nmsg.parameter = msg.payload\nnode.warn(\"close door request\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 920,
        "wires": [
            [
                "508471e150fb947b",
                "4a3fa9b6e902949e",
                "3308ae803d4ca420"
            ]
        ]
    },
    {
        "id": "be8540f6a3ce497d",
        "type": "function",
        "z": "5a6f939f0a632dfa",
        "name": "save open door args",
        "func": "msg.parameter = msg.payload\n//node.warn(\"receive open door args\");\n//node.warn(msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 320,
        "wires": [
            [
                "1066354113d12094",
                "18d18f9af9b9fc7f"
            ]
        ]
    },
    {
        "id": "5fad954258422b76",
        "type": "inject",
        "z": "5a6f939f0a632dfa",
        "name": "Manual Overrite Pick/DropEnable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 490,
        "y": 580,
        "wires": [
            [
                "baa8de28fe3a0ebb"
            ]
        ]
    },
    {
        "id": "8e702d096c367566",
        "type": "http request",
        "z": "5a6f939f0a632dfa",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/door/command-finish",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1210,
        "y": 560,
        "wires": [
            [
                "81d5c69664cfdd5f"
            ]
        ]
    },
    {
        "id": "baa8de28fe3a0ebb",
        "type": "function",
        "z": "5a6f939f0a632dfa",
        "name": "get saved request arg",
        "func": "//读取modbus的值,只有读到了1,并且有当前请求开门的参数的时候该流程继续往下走\nvar readData=msg.payload\nreadData=[true]\nvar requestArg=flow.get(\"openArg\")\n\nif (requestArg != undefined && requestArg != null && requestArg.requestId!=undefined)\n{\n    //表明当前门开了\n    if (readData && readData != undefined && readData[0] == true) \n    {\n        //构造请求的参数\n        msg.payload=requestArg\n        flow.set(\"openArg\", null)\n        return msg\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 560,
        "wires": [
            [
                "8e702d096c367566"
            ]
        ]
    },
    {
        "id": "81d5c69664cfdd5f",
        "type": "function",
        "z": "5a6f939f0a632dfa",
        "name": "rcs response",
        "func": "var response=msg.payload\n\n\nnode.warn(response)\nif(response!=undefined && response!=null && response.success==true){\n    global.set(\"openArg\",null)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "ecd62fc84fca2d0a",
        "type": "function",
        "z": "5a6f939f0a632dfa",
        "name": "AutoOut (c)",
        "func": "// recieve openArg\nvar requestArg = flow.get(\"openArg\")\n// array of location codes\nvar staticValues = ['0512'];\n// Parsed location of all AMRs\nvar pointCodes = global.get(\"pointCodes\") || [];\n\n// chceck if there is data in openArg\nif (requestArg != undefined && requestArg != null && requestArg.requestId != undefined) {\n    // compare if any amr is in location\n    if (staticValues.some(value => pointCodes.includes(value))) {\n        // send command for ato out of location\n        msg.payload = requestArg;\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 680,
        "wires": [
            [
                "baa8de28fe3a0ebb"
            ]
        ]
    },
    {
        "id": "133a7189aad3f905",
        "type": "inject",
        "z": "5a6f939f0a632dfa",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 370,
        "y": 680,
        "wires": [
            [
                "ecd62fc84fca2d0a"
            ]
        ]
    },
    {
        "id": "a8c14b366f616067",
        "type": "comment",
        "z": "5a6f939f0a632dfa",
        "name": "Auto out",
        "info": "",
        "x": 360,
        "y": 640,
        "wires": []
    },
    {
        "id": "891abc5f70f0560d",
        "type": "function",
        "z": "5a6f939f0a632dfa",
        "name": "Reset Flow Values",
        "func": "//flow.set(\"PickBusy\", true)\nflow.set(\"PickRequest\", false)\nflow.set(\"DropRequest\", false)\nflow.set('isLoadingValue', null);\nnode.warn('reset values')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "4bcb86b858d70036",
        "type": "comment",
        "z": "5a6f939f0a632dfa",
        "name": "Send Pick/Drop Request",
        "info": "",
        "x": 1470,
        "y": 160,
        "wires": []
    },
    {
        "id": "e2acb8283f2f97cb",
        "type": "comment",
        "z": "5a6f939f0a632dfa",
        "name": "Reset Pick/Drop Request",
        "info": "",
        "x": 990,
        "y": 880,
        "wires": []
    },
    {
        "id": "3e2a85f2e4766b16",
        "type": "link in",
        "z": "5a6f939f0a632dfa",
        "name": "Open_Stand_6",
        "links": [
            "2d514df988e38ce2"
        ],
        "x": 585,
        "y": 320,
        "wires": [
            [
                "be8540f6a3ce497d"
            ]
        ]
    },
    {
        "id": "f3b5c2b923fd7243",
        "type": "link in",
        "z": "5a6f939f0a632dfa",
        "name": "Close_Stand_6",
        "links": [
            "7b04236d2806fe52"
        ],
        "x": 195,
        "y": 920,
        "wires": [
            [
                "f27a38a79e8561b5"
            ]
        ]
    },
    {
        "id": "fa72fb8baeb77278",
        "type": "function",
        "z": "5a6f939f0a632dfa",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 120,
        "wires": [
            [
                "4a4c2f38dfd0f308",
                "6371c5428a32923f"
            ]
        ]
    },
    {
        "id": "4a4c2f38dfd0f308",
        "type": "http response",
        "z": "5a6f939f0a632dfa",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1420,
        "y": 120,
        "wires": []
    },
    {
        "id": "a7d1339bd0e0fa13",
        "type": "function",
        "z": "5a6f939f0a632dfa",
        "name": "Check and save loaded status",
        "func": "// Extract isLoading value from the command property in the payload\nvar isLoadingValue = msg.payload.isLoading;\n\n// Save the isLoading value in a flow variable\nflow.set('isLoadingValue', isLoadingValue);\n\n// Pass the original message to the next node\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 120,
        "wires": [
            [
                "fa72fb8baeb77278"
            ]
        ]
    },
    {
        "id": "d3d5d1d2c43b1ca5",
        "type": "function",
        "z": "5a6f939f0a632dfa",
        "name": "Set DropBusy",
        "func": "flow.set(\"DropBusy\", true)\nnode.warn(\"DropBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 480,
        "wires": [
            [
                "44c372a432926c9c"
            ]
        ]
    },
    {
        "id": "e71467f4c9e68fc6",
        "type": "function",
        "z": "5a6f939f0a632dfa",
        "name": "Set PickBusy",
        "func": "flow.set(\"PickBusy\", true)\nnode.warn(\"PickBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 520,
        "wires": [
            [
                "6aaa28542fbeeb70"
            ]
        ]
    },
    {
        "id": "0f731791897b44ee",
        "type": "http request",
        "z": "5a6f939f0a632dfa",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/rcs/equipment/feedback",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 830,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "5b2b59d09324a113",
        "type": "link in",
        "z": "5a6f939f0a632dfa",
        "name": "link in 17",
        "links": [
            "b6f6c187a7cee1d0"
        ],
        "x": 585,
        "y": 120,
        "wires": [
            [
                "0f731791897b44ee",
                "a7d1339bd0e0fa13"
            ]
        ]
    },
    {
        "id": "6aaa28542fbeeb70",
        "type": "function",
        "z": "5a6f939f0a632dfa",
        "name": "OPC msg PickBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "36189c4d3d5eb631",
        "type": "function",
        "z": "5a6f939f0a632dfa",
        "name": "Reset Pick Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "375c3040afb6cd1a",
        "type": "function",
        "z": "5a6f939f0a632dfa",
        "name": "Reset Pick Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "4a3fa9b6e902949e",
        "type": "function",
        "z": "5a6f939f0a632dfa",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") != null) \n{\n    // If true, send only the first value to the next node\n    node.warn('reset pick/drop')\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 920,
        "wires": [
            [
                "891abc5f70f0560d",
                "36189c4d3d5eb631",
                "42f1002a4126a3d4"
            ]
        ]
    },
    {
        "id": "3308ae803d4ca420",
        "type": "function",
        "z": "5a6f939f0a632dfa",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") === null) \n{\n    // If true, send only the first value to the next node\n    flow.set(\"PickBusy\", false);\n    flow.set(\"DropBusy\", false);\n    node.warn(\"Reset Pick/Drop Busy\");\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1060,
        "wires": [
            [
                "375c3040afb6cd1a",
                "ac45539b53c7ecde"
            ]
        ]
    },
    {
        "id": "44c372a432926c9c",
        "type": "function",
        "z": "5a6f939f0a632dfa",
        "name": "OPC msg DropBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "ac45539b53c7ecde",
        "type": "function",
        "z": "5a6f939f0a632dfa",
        "name": "Resset Drop Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "6371c5428a32923f",
        "type": "function",
        "z": "5a6f939f0a632dfa",
        "name": "Pick/DropRequest (c)",
        "func": "if (flow.get(\"isLoadingValue\") === true) \n{\n    flow.set(\"DropRequest\", true)\n    node.warn(\"Drop Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"DropRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\nelse if (flow.get(\"isLoadingValue\") === false) {\n    flow.set(\"PickRequest\", true)\n    node.warn(\"Pick Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"PickRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "42f1002a4126a3d4",
        "type": "function",
        "z": "5a6f939f0a632dfa",
        "name": "Reset Drop Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "13303e717d3ec987",
        "type": "modbus-read",
        "z": "5a6f939f0a632dfa",
        "name": "",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Input",
        "adr": "00003",
        "quantity": "1",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "d395581b1150fb7e",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 430,
        "y": 480,
        "wires": [
            [
                "32628f0f5a158b10",
                "397afb77aeb79bbc",
                "5e55b809612159d9"
            ],
            []
        ]
    },
    {
        "id": "32628f0f5a158b10",
        "type": "function",
        "z": "5a6f939f0a632dfa",
        "name": "Check for DropEnable",
        "func": "// Assuming msg.payload is the array [ false, false, false, false, false, false, false, false ]\n\n// Extract the first value from the array\nvar firstValue = msg.payload[0];\n\n// Check if the first value is true\nif (firstValue === false && flow.get(\"isLoadingValue\") === true && flow.get(\"DropRequest\") === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Drop Enable\")\n    return msg;\n}\n else {\n    // If false, do nothing (no need to return anything)\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 480,
        "wires": [
            [
                "d3d5d1d2c43b1ca5",
                "baa8de28fe3a0ebb"
            ]
        ]
    },
    {
        "id": "397afb77aeb79bbc",
        "type": "function",
        "z": "5a6f939f0a632dfa",
        "name": "Check for PickEnable",
        "func": "var firstValue = msg.payload[0];\n\nif (firstValue === true && flow.get(\"isLoadingValue\") === false && flow.get('PickRequest') === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Pick Enable\")\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 520,
        "wires": [
            [
                "e71467f4c9e68fc6",
                "baa8de28fe3a0ebb"
            ]
        ]
    },
    {
        "id": "5e55b809612159d9",
        "type": "subflow:4cc4a3bd7d66d150",
        "z": "5a6f939f0a632dfa",
        "name": "",
        "env": [
            {
                "name": "OPC_Item",
                "value": "ns=3;s=\"AMR_Comm\".\"MA_OU_04\"",
                "type": "str"
            }
        ],
        "x": 640,
        "y": 440,
        "wires": [
            [
                "2fdb6b19e8709314"
            ]
        ]
    },
    {
        "id": "2fdb6b19e8709314",
        "type": "link out",
        "z": "5a6f939f0a632dfa",
        "name": "link out 6",
        "mode": "link",
        "links": [
            "20f3b1b189a355ab"
        ],
        "x": 785,
        "y": 440,
        "wires": []
    },
    {
        "id": "e1ace3562de296f4",
        "type": "function",
        "z": "d07864b6b05aa4b1",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 200,
        "wires": [
            [
                "6f31d1a245d748a8"
            ]
        ]
    },
    {
        "id": "6f31d1a245d748a8",
        "type": "http response",
        "z": "d07864b6b05aa4b1",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1020,
        "y": 200,
        "wires": []
    },
    {
        "id": "7873c912f357e9fd",
        "type": "comment",
        "z": "d07864b6b05aa4b1",
        "name": "open door request http://sim-les.quicktron.eu:1880/door/command/open",
        "info": "{\n  \"requestId\": \"\", // uuid\n  \"doorCode\": \"\",  // 设备编码\n  \"command\": \"\"    // 暂时用不上 开门接口会传入OPEN，关门接口会传入CLOSE\n}",
        "x": 330,
        "y": 220,
        "wires": []
    },
    {
        "id": "a920928982e77818",
        "type": "function",
        "z": "d07864b6b05aa4b1",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nnode.log(msg);\n\nflow.set('isLoadingValue', null);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 800,
        "wires": [
            [
                "775c388e36da9a21"
            ]
        ]
    },
    {
        "id": "775c388e36da9a21",
        "type": "http response",
        "z": "d07864b6b05aa4b1",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1200,
        "y": 800,
        "wires": []
    },
    {
        "id": "6c2d817c17dffbd9",
        "type": "function",
        "z": "d07864b6b05aa4b1",
        "name": "save close door arg",
        "func": "msg.parameter=msg.payload\nflow.set(\"closeArg\",msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 800,
        "wires": [
            [
                "a920928982e77818"
            ]
        ]
    },
    {
        "id": "c08dfe1bb869696a",
        "type": "function",
        "z": "d07864b6b05aa4b1",
        "name": "save request arg",
        "func": "\nvar response=msg.payload\nresponse.actionCode='OPEN'\nnode.warn(response)\n//151 IP\nif (response.doorCode != undefined && response.doorCode =='Packing_Stand_6'){\n    flow.set(\"openArg\", response)\n    return [msg,null,null,null,null,null,null,null,null]\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "82c554c7604667b5",
        "type": "function",
        "z": "d07864b6b05aa4b1",
        "name": "save close door args",
        "func": "\nmsg.parameter = msg.payload\nnode.warn(\"close door request\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 900,
        "wires": [
            [
                "6c2d817c17dffbd9",
                "9025bb1127491db2"
            ]
        ]
    },
    {
        "id": "67f82fd9f75703ee",
        "type": "function",
        "z": "d07864b6b05aa4b1",
        "name": "save open door args",
        "func": "msg.parameter = msg.payload\n//node.warn(\"receive open door args\");\n//node.warn(msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 260,
        "wires": [
            [
                "c08dfe1bb869696a",
                "e1ace3562de296f4"
            ]
        ]
    },
    {
        "id": "9025bb1127491db2",
        "type": "function",
        "z": "d07864b6b05aa4b1",
        "name": "write to modbus？？？",
        "func": "\nvar response=msg.payload\n//151 IP\nif (response.doorCode != undefined && response.doorCode =='Packing_Stand_6'){\n    return [msg, null, null, null, null, null, null, null, null]\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "ab351c492a65a88f",
        "type": "inject",
        "z": "d07864b6b05aa4b1",
        "name": "Manual Overrite Pick/DropEnable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 460,
        "wires": [
            [
                "34b4e9f5dd6e34be"
            ]
        ]
    },
    {
        "id": "41382f484c69cd2d",
        "type": "http request",
        "z": "d07864b6b05aa4b1",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/door/command-finish",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 930,
        "y": 400,
        "wires": [
            [
                "6f6bac4c0147e7d8",
                "1bcdd05d4ae47d1a"
            ]
        ]
    },
    {
        "id": "34b4e9f5dd6e34be",
        "type": "function",
        "z": "d07864b6b05aa4b1",
        "name": "get saved request arg",
        "func": "//读取modbus的值,只有读到了1,并且有当前请求开门的参数的时候该流程继续往下走\nvar readData=msg.payload\nreadData=[true]\nvar requestArg=flow.get(\"openArg\")\n\nif (requestArg != undefined && requestArg != null && requestArg.requestId!=undefined)\n{\n    //表明当前门开了\n    if (readData && readData != undefined && readData[0] == true) \n    {\n        //构造请求的参数\n        msg.payload=requestArg\n        flow.set(\"openArg\", null)\n        return msg\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 400,
        "wires": [
            [
                "41382f484c69cd2d"
            ]
        ]
    },
    {
        "id": "6f6bac4c0147e7d8",
        "type": "function",
        "z": "d07864b6b05aa4b1",
        "name": "rcs response",
        "func": "var response=msg.payload\n//如果Rcs返回的值为true,表示已经接收了,清除掉当前的参数标识符\nnode.warn(\"门开151回报的参数:::\")\nnode.warn(response)\nif(response!=undefined && response!=null && response.success==true){\n    global.set(\"openArg\",null)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "ca9459c82a348932",
        "type": "function",
        "z": "d07864b6b05aa4b1",
        "name": "function 35",
        "func": "// recieve openArg\nvar requestArg = flow.get(\"openArg\")\n// array of location codes\nvar staticValues = ['0518', '//0517'];\n// Parsed location of all AMRs\nvar pointCodes = global.get(\"pointCodes\") || [];\n\n// chceck if there is data in openArg\nif (requestArg != undefined && requestArg != null && requestArg.requestId != undefined) {\n    // compare if any amr is in location\n    if (staticValues.some(value => pointCodes.includes(value))) {\n        // send command for ato out of location\n        msg.payload = requestArg;\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 540,
        "wires": [
            [
                "34b4e9f5dd6e34be"
            ]
        ]
    },
    {
        "id": "fa74c81e75c2e273",
        "type": "inject",
        "z": "d07864b6b05aa4b1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 540,
        "wires": [
            [
                "ca9459c82a348932"
            ]
        ]
    },
    {
        "id": "de89ab7a3fd4796a",
        "type": "comment",
        "z": "d07864b6b05aa4b1",
        "name": "Auto out",
        "info": "",
        "x": 140,
        "y": 500,
        "wires": []
    },
    {
        "id": "11e0cb7eee6143c0",
        "type": "inject",
        "z": "d07864b6b05aa4b1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 640,
        "wires": [
            [
                "ccc6b6b9a96186fa"
            ]
        ]
    },
    {
        "id": "1435d121d8db3494",
        "type": "comment",
        "z": "d07864b6b05aa4b1",
        "name": "Set/Reset Pick/Drop Busy",
        "info": "",
        "x": 550,
        "y": 600,
        "wires": []
    },
    {
        "id": "dd655e564d9d4f4d",
        "type": "function",
        "z": "d07864b6b05aa4b1",
        "name": "Set/Reset PickRequest and PickBusy",
        "func": "if  (flow.get('PickEnable') === true)\n{\n    flow.set(\"PickBusy\", true);\n    node.warn(\"Pick Busy\");\n    msg.payload(\"PickBusy\");\n}\n\nelse if (flow.get('DropEnable') === true) \n{\n    flow.set(\"DropBusy\", true);\n    node.warn(\"Drop Busy\");\n    msg.payload(\"DropBusy\");\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 640,
        "wires": [
            [
                "fb674af6a3d1f97b"
            ]
        ]
    },
    {
        "id": "8380917d0b5cf7c0",
        "type": "function",
        "z": "d07864b6b05aa4b1",
        "name": "function 41",
        "func": "//flow.set(\"PickBusy\", true)\nvar pointCodes = global.get(\"pointCodes\") || [];\n\nif (flow.get(\"isLoadingValue\") === false) {\n    flow.set(\"PickRequest\", true)\n    node.warn(\"Pick Request\");\n}\nelse if (flow.get(\"isLoadingValue\") === true) {\n    flow.set(\"DropRequest\", true)\n    node.warn(\"Drop Request\");\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "1379bb21498bc738",
        "type": "function",
        "z": "d07864b6b05aa4b1",
        "name": "function 42",
        "func": "//flow.set(\"PickBusy\", true)\nflow.set(\"PickRequest\", false)\nflow.set(\"DropRequest\", false)\nflow.set('isLoadingValue', null);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "ed90e511da4f41b1",
        "type": "comment",
        "z": "d07864b6b05aa4b1",
        "name": "Send Pick/Drop Request",
        "info": "",
        "x": 1190,
        "y": 100,
        "wires": []
    },
    {
        "id": "22fdc5b86898dd04",
        "type": "comment",
        "z": "d07864b6b05aa4b1",
        "name": "Reset Pick/Drop Request",
        "info": "",
        "x": 1330,
        "y": 460,
        "wires": []
    },
    {
        "id": "5fa5d20c577a29ec",
        "type": "link in",
        "z": "d07864b6b05aa4b1",
        "name": "Open_Stand_6",
        "links": [
            "0b408d01abd02635"
        ],
        "x": 305,
        "y": 260,
        "wires": [
            [
                "67f82fd9f75703ee"
            ]
        ]
    },
    {
        "id": "ac53e794c2ac48af",
        "type": "link in",
        "z": "d07864b6b05aa4b1",
        "name": "Close_Stand_6",
        "links": [
            "9ef2c09cbd8930ed",
            "ccbb0e3a1b9f8009"
        ],
        "x": 195,
        "y": 900,
        "wires": [
            [
                "82c554c7604667b5"
            ]
        ]
    },
    {
        "id": "07cd7c508342d2f2",
        "type": "function",
        "z": "d07864b6b05aa4b1",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 60,
        "wires": [
            [
                "8380917d0b5cf7c0",
                "2e6439652d15d1e9"
            ]
        ]
    },
    {
        "id": "2e6439652d15d1e9",
        "type": "http response",
        "z": "d07864b6b05aa4b1",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1140,
        "y": 60,
        "wires": []
    },
    {
        "id": "eb4b6b6f44bf5b99",
        "type": "function",
        "z": "d07864b6b05aa4b1",
        "name": "Check and save loaded status",
        "func": "// Extract isLoading value from the command property in the payload\nvar isLoadingValue = msg.payload.isLoading;\n\n// Save the isLoading value in a flow variable\nflow.set('isLoadingValue', isLoadingValue);\n\n// Pass the original message to the next node\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 60,
        "wires": [
            [
                "07cd7c508342d2f2",
                "d51f5ae69eda71d2"
            ]
        ]
    },
    {
        "id": "7b26fa7b95517af0",
        "type": "link in",
        "z": "d07864b6b05aa4b1",
        "name": "link in 1",
        "links": [
            "4ddd7ca9d1e3f810"
        ],
        "x": 285,
        "y": 60,
        "wires": [
            [
                "eb4b6b6f44bf5b99",
                "315a1a5610b1e2d2"
            ]
        ]
    },
    {
        "id": "f3bbd31bbca1f042",
        "type": "modbus-read",
        "z": "d07864b6b05aa4b1",
        "name": "",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Input",
        "adr": "00001",
        "quantity": "1",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "d395581b1150fb7e",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 110,
        "y": 360,
        "wires": [
            [
                "6c72d55f5853f665",
                "707a0bacbc71d4f9",
                "4647d2a069fbd834"
            ],
            []
        ]
    },
    {
        "id": "6c72d55f5853f665",
        "type": "function",
        "z": "d07864b6b05aa4b1",
        "name": "Check for DropEnable",
        "func": "// Assuming msg.payload is the array [ false, false, false, false, false, false, false, false ]\n\n// Extract the first value from the array\nvar firstValue = msg.payload[0];\n\n// Check if the first value is true\nif (firstValue === false && flow.get(\"isLoadingValue\") === true && flow.get(\"DropRequest\") === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Drop Enable\")\n    return msg;\n}\n else {\n    // If false, do nothing (no need to return anything)\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 360,
        "wires": [
            [
                "b36382cd30cba81c",
                "34b4e9f5dd6e34be"
            ]
        ]
    },
    {
        "id": "d51f5ae69eda71d2",
        "type": "debug",
        "z": "d07864b6b05aa4b1",
        "name": "debug 37",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 120,
        "wires": []
    },
    {
        "id": "ccc6b6b9a96186fa",
        "type": "function",
        "z": "d07864b6b05aa4b1",
        "name": "function 66",
        "func": "var pointCodes = global.get(\"pointCodes\") || [];\n\n\nif (pointCodes.includes('0517') && flow.get(\"PickBusy\") === true || flow.get(\"DropBusy\") === true && flow.get('isLoadingValue') == null)  \n{\n    flow.set(\"PickBusy\", false);\n    flow.set(\"DropBusy\", false);\n    node.warn(\"Reset Pick/Drop Busy\");\n}\n//return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 680,
        "wires": [
            [
                "f75c7370f609af5d"
            ]
        ]
    },
    {
        "id": "fb674af6a3d1f97b",
        "type": "debug",
        "z": "d07864b6b05aa4b1",
        "name": "debug 39",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 640,
        "wires": []
    },
    {
        "id": "f75c7370f609af5d",
        "type": "debug",
        "z": "d07864b6b05aa4b1",
        "name": "debug 40",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 680,
        "wires": []
    },
    {
        "id": "638f9a88033e7eac",
        "type": "function",
        "z": "d07864b6b05aa4b1",
        "name": "function 67",
        "func": "// Assuming msg.payload is the array [ false, false, false, false, false, false, false, false ]\n\n// Extract the first value from the array\nvar firstValue = msg.payload[0];\n\n// Check if the first value is true\nif (firstValue === false && flow.get(\"isLoadingValue\") === true && flow.get(\"DropRequest\") === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Drop Enable\")\n    return msg;\n}\nelse if (firstValue === true && flow.get(\"isLoadingValue\") === false && flow.get('PickRequest') === true) \n    {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Pick Enable\")\n    return msg;\n    }\n else {\n    // If false, do nothing (no need to return anything)\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "707a0bacbc71d4f9",
        "type": "function",
        "z": "d07864b6b05aa4b1",
        "name": "Check for PickEnable",
        "func": "var firstValue = msg.payload[0];\n\nif (firstValue === true && flow.get(\"isLoadingValue\") === false && flow.get('PickRequest') === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Pick Enable\")\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 400,
        "wires": [
            [
                "34b4e9f5dd6e34be",
                "0615399733b15e11"
            ]
        ]
    },
    {
        "id": "b36382cd30cba81c",
        "type": "function",
        "z": "d07864b6b05aa4b1",
        "name": "Set DropBusy",
        "func": "flow.set(\"DropBusy\", true)\nnode.warn(\"DropBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 320,
        "wires": [
            [
                "7b80b1681ac144b7"
            ]
        ]
    },
    {
        "id": "0615399733b15e11",
        "type": "function",
        "z": "d07864b6b05aa4b1",
        "name": "Set PickBusy",
        "func": "flow.set(\"PickBusy\", true)\nnode.warn(\"PickBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 360,
        "wires": [
            [
                "791e3885b92caa56"
            ]
        ]
    },
    {
        "id": "7b80b1681ac144b7",
        "type": "debug",
        "z": "d07864b6b05aa4b1",
        "name": "debug 41",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 320,
        "wires": []
    },
    {
        "id": "791e3885b92caa56",
        "type": "debug",
        "z": "d07864b6b05aa4b1",
        "name": "debug 42",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 360,
        "wires": []
    },
    {
        "id": "1bcdd05d4ae47d1a",
        "type": "delay",
        "z": "d07864b6b05aa4b1",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1140,
        "y": 500,
        "wires": [
            [
                "1379bb21498bc738"
            ]
        ]
    },
    {
        "id": "b21f858dcb54c94f",
        "type": "inject",
        "z": "d07864b6b05aa4b1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 1080,
        "wires": [
            [
                "78921040be556182"
            ]
        ]
    },
    {
        "id": "78921040be556182",
        "type": "function",
        "z": "d07864b6b05aa4b1",
        "name": "function 71",
        "func": "// Get the values of the flow variables\nvar pickRequest = flow.get('PickRequest');\nvar dropRequest = flow.get('DropRequest');\nvar pickEnable = flow.get('PickEnable');\nvar dropEnable = flow.get('DropEnable');\nvar pickBusy = flow.get('PickBusy');\nvar dropBusy = flow.get('DropBusy');\n\n// Log the values for debugging\nnode.warn('PickRequest: ' + pickRequest);\nnode.warn('DropRequest: ' + dropRequest);\nnode.warn('PickEnable: ' + pickEnable);\nnode.warn('DropEnable: ' + dropEnable);\nnode.warn('PickBusy: ' + pickBusy);\nnode.warn('DropBusy: ' + dropBusy);\n\n// Add your logic to check the values\n// For example, you can check if PickEnable is true and PickBusy is false\nif (pickEnable && !pickBusy) {\n    // Your logic here\n    node.warn('Pick is enabled and not busy');\n}\n\n// Optionally, you can set the payload of the message to convey information to the next nodes\nmsg.payload = 'Values checked successfully';\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1080,
        "wires": [
            [
                "fe1d0ca7ee311766"
            ]
        ]
    },
    {
        "id": "fe1d0ca7ee311766",
        "type": "debug",
        "z": "d07864b6b05aa4b1",
        "name": "debug 43",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 1080,
        "wires": []
    },
    {
        "id": "315a1a5610b1e2d2",
        "type": "http request",
        "z": "d07864b6b05aa4b1",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/rcs/equipment/feedback",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 550,
        "y": 20,
        "wires": [
            []
        ]
    },
    {
        "id": "4647d2a069fbd834",
        "type": "subflow:4cc4a3bd7d66d150",
        "z": "d07864b6b05aa4b1",
        "name": "",
        "env": [
            {
                "name": "OPC_Item",
                "value": "ns=3;s=\"AMR_Comm\".\"MA_ID_01\"",
                "type": "str"
            }
        ],
        "x": 320,
        "y": 320,
        "wires": [
            [
                "9744fd3a045abc1d"
            ]
        ]
    },
    {
        "id": "9744fd3a045abc1d",
        "type": "link out",
        "z": "d07864b6b05aa4b1",
        "name": "link out 7",
        "mode": "link",
        "links": [
            "20f3b1b189a355ab"
        ],
        "x": 465,
        "y": 320,
        "wires": []
    },
    {
        "id": "f7d7cc3a3e1a98a4",
        "type": "function",
        "z": "1ba65e07f15af05c",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 240,
        "wires": [
            [
                "f9dd4206cc6ad159"
            ]
        ]
    },
    {
        "id": "f9dd4206cc6ad159",
        "type": "http response",
        "z": "1ba65e07f15af05c",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1240,
        "y": 240,
        "wires": []
    },
    {
        "id": "218ca8f0d2206544",
        "type": "comment",
        "z": "1ba65e07f15af05c",
        "name": "open door request http://sim-les.quicktron.eu:1880/door/command/open",
        "info": "{\n  \"requestId\": \"\", // uuid\n  \"doorCode\": \"\",  // 设备编码\n  \"command\": \"\"    // 暂时用不上 开门接口会传入OPEN，关门接口会传入CLOSE\n}",
        "x": 590,
        "y": 260,
        "wires": []
    },
    {
        "id": "83ffda56e40106cd",
        "type": "function",
        "z": "1ba65e07f15af05c",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nnode.log(msg);\n\nflow.set('isLoadingValue', null);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 800,
        "wires": [
            [
                "8e0b95a6980ce60a"
            ]
        ]
    },
    {
        "id": "8e0b95a6980ce60a",
        "type": "http response",
        "z": "1ba65e07f15af05c",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1060,
        "y": 800,
        "wires": []
    },
    {
        "id": "be9fd299cd172626",
        "type": "function",
        "z": "1ba65e07f15af05c",
        "name": "save close door arg",
        "func": "msg.parameter=msg.payload\nflow.set(\"closeArg\",msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 800,
        "wires": [
            [
                "83ffda56e40106cd"
            ]
        ]
    },
    {
        "id": "073f1ba78f8fefaf",
        "type": "function",
        "z": "1ba65e07f15af05c",
        "name": "save request arg (c)",
        "func": "\nvar response=msg.payload\nresponse.actionCode='OPEN'\nnode.warn(response)\n//151 IP\nif (response.doorCode != undefined){\n    flow.set(\"openArg\", response)\n    return [msg,null,null,null,null,null,null,null,null]\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "fde81c0d13c60960",
        "type": "function",
        "z": "1ba65e07f15af05c",
        "name": "save close door args",
        "func": "\nmsg.parameter = msg.payload\nnode.warn(\"close door request\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 900,
        "wires": [
            [
                "be9fd299cd172626",
                "fb25e1255b3a8064",
                "51e83123d17c90c3"
            ]
        ]
    },
    {
        "id": "d433db17da7c3eda",
        "type": "function",
        "z": "1ba65e07f15af05c",
        "name": "save open door args",
        "func": "msg.parameter = msg.payload\n//node.warn(\"receive open door args\");\n//node.warn(msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 300,
        "wires": [
            [
                "073f1ba78f8fefaf",
                "f7d7cc3a3e1a98a4"
            ]
        ]
    },
    {
        "id": "c3a291b8d8972420",
        "type": "inject",
        "z": "1ba65e07f15af05c",
        "name": "Manual Overrite Pick/DropEnable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 470,
        "y": 560,
        "wires": [
            [
                "aecb24747f74dc95"
            ]
        ]
    },
    {
        "id": "b9ffb5e45b031078",
        "type": "http request",
        "z": "1ba65e07f15af05c",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/door/command-finish",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1190,
        "y": 540,
        "wires": [
            [
                "5f9b94903bb08bcb"
            ]
        ]
    },
    {
        "id": "aecb24747f74dc95",
        "type": "function",
        "z": "1ba65e07f15af05c",
        "name": "get saved request arg",
        "func": "//读取modbus的值,只有读到了1,并且有当前请求开门的参数的时候该流程继续往下走\nvar readData=msg.payload\nreadData=[true]\nvar requestArg=flow.get(\"openArg\")\n\nif (requestArg != undefined && requestArg != null && requestArg.requestId!=undefined)\n{\n    //表明当前门开了\n    if (readData && readData != undefined && readData[0] == true) \n    {\n        //构造请求的参数\n        msg.payload=requestArg\n        flow.set(\"openArg\", null)\n        return msg\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 540,
        "wires": [
            [
                "b9ffb5e45b031078"
            ]
        ]
    },
    {
        "id": "5f9b94903bb08bcb",
        "type": "function",
        "z": "1ba65e07f15af05c",
        "name": "rcs response",
        "func": "var response=msg.payload\n\n\nnode.warn(response)\nif(response!=undefined && response!=null && response.success==true){\n    global.set(\"openArg\",null)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "01cc16ab4a74572b",
        "type": "function",
        "z": "1ba65e07f15af05c",
        "name": "AutoOut (c)",
        "func": "// recieve openArg\nvar requestArg = flow.get(\"openArg\")\n// array of location codes\nvar staticValues = ['0521'];\n// Parsed location of all AMRs\nvar pointCodes = global.get(\"pointCodes\") || [];\n\n// chceck if there is data in openArg\nif (requestArg != undefined && requestArg != null && requestArg.requestId != undefined) {\n    // compare if any amr is in location\n    if (staticValues.some(value => pointCodes.includes(value))) {\n        // send command for ato out of location\n        msg.payload = requestArg;\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 660,
        "wires": [
            [
                "aecb24747f74dc95"
            ]
        ]
    },
    {
        "id": "b370ca708b7faaf6",
        "type": "inject",
        "z": "1ba65e07f15af05c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 350,
        "y": 660,
        "wires": [
            [
                "01cc16ab4a74572b"
            ]
        ]
    },
    {
        "id": "3dc9297fb18c4576",
        "type": "comment",
        "z": "1ba65e07f15af05c",
        "name": "Auto out",
        "info": "",
        "x": 340,
        "y": 620,
        "wires": []
    },
    {
        "id": "284feebe13e259de",
        "type": "function",
        "z": "1ba65e07f15af05c",
        "name": "Reset Flow Values",
        "func": "//flow.set(\"PickBusy\", true)\nflow.set(\"PickRequest\", false)\nflow.set(\"DropRequest\", false)\nflow.set('isLoadingValue', null);\nnode.warn('reset values')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "9d2ea2c456390df6",
        "type": "comment",
        "z": "1ba65e07f15af05c",
        "name": "Send Pick/Drop Request",
        "info": "",
        "x": 1450,
        "y": 140,
        "wires": []
    },
    {
        "id": "6334932d95a7e3f4",
        "type": "comment",
        "z": "1ba65e07f15af05c",
        "name": "Reset Pick/Drop Request",
        "info": "",
        "x": 970,
        "y": 860,
        "wires": []
    },
    {
        "id": "6d2cfb9542279541",
        "type": "link in",
        "z": "1ba65e07f15af05c",
        "name": "Open_Stand_6",
        "links": [
            "bf8107bad85036e0"
        ],
        "x": 565,
        "y": 300,
        "wires": [
            [
                "d433db17da7c3eda"
            ]
        ]
    },
    {
        "id": "76e3734442049ea7",
        "type": "link in",
        "z": "1ba65e07f15af05c",
        "name": "Close_Stand_6",
        "links": [
            "53669cc25449e084"
        ],
        "x": 175,
        "y": 900,
        "wires": [
            [
                "fde81c0d13c60960"
            ]
        ]
    },
    {
        "id": "ec04bce733a972ea",
        "type": "function",
        "z": "1ba65e07f15af05c",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 100,
        "wires": [
            [
                "74d68c35046f8d78",
                "07f7f6b9a646cfb3"
            ]
        ]
    },
    {
        "id": "74d68c35046f8d78",
        "type": "http response",
        "z": "1ba65e07f15af05c",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1400,
        "y": 100,
        "wires": []
    },
    {
        "id": "694f4a4bc1e7d763",
        "type": "function",
        "z": "1ba65e07f15af05c",
        "name": "Check and save loaded status",
        "func": "// Extract isLoading value from the command property in the payload\nvar isLoadingValue = msg.payload.isLoading;\n\n// Save the isLoading value in a flow variable\nflow.set('isLoadingValue', isLoadingValue);\n\n// Pass the original message to the next node\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 100,
        "wires": [
            [
                "ec04bce733a972ea"
            ]
        ]
    },
    {
        "id": "238599f94f910864",
        "type": "function",
        "z": "1ba65e07f15af05c",
        "name": "Set DropBusy",
        "func": "flow.set(\"DropBusy\", true)\nnode.warn(\"DropBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 460,
        "wires": [
            [
                "4da080ceb367b4bb"
            ]
        ]
    },
    {
        "id": "6411111f6bec3bb7",
        "type": "function",
        "z": "1ba65e07f15af05c",
        "name": "Set PickBusy",
        "func": "flow.set(\"PickBusy\", true)\nnode.warn(\"PickBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 500,
        "wires": [
            [
                "bcfafd0e1dd4792a"
            ]
        ]
    },
    {
        "id": "32a2468f922da4d9",
        "type": "http request",
        "z": "1ba65e07f15af05c",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/rcs/equipment/feedback",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 810,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "f7565a7e17292718",
        "type": "link in",
        "z": "1ba65e07f15af05c",
        "name": "link in 15",
        "links": [
            "ed2021948ebe473c"
        ],
        "x": 565,
        "y": 100,
        "wires": [
            [
                "32a2468f922da4d9",
                "694f4a4bc1e7d763"
            ]
        ]
    },
    {
        "id": "bcfafd0e1dd4792a",
        "type": "function",
        "z": "1ba65e07f15af05c",
        "name": "OPC msg PickBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "5fabe24b58c9d25e",
        "type": "function",
        "z": "1ba65e07f15af05c",
        "name": "Reset Pick Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "9e5773ffdb856206",
        "type": "function",
        "z": "1ba65e07f15af05c",
        "name": "Reset Pick Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "fb25e1255b3a8064",
        "type": "function",
        "z": "1ba65e07f15af05c",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") != null) \n{\n    // If true, send only the first value to the next node\n    node.warn('reset pick/drop')\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 900,
        "wires": [
            [
                "284feebe13e259de",
                "5fabe24b58c9d25e",
                "d51ebba557169377"
            ]
        ]
    },
    {
        "id": "51e83123d17c90c3",
        "type": "function",
        "z": "1ba65e07f15af05c",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") === null) \n{\n    // If true, send only the first value to the next node\n    flow.set(\"PickBusy\", false);\n    flow.set(\"DropBusy\", false);\n    node.warn(\"Reset Pick/Drop Busy\");\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 1040,
        "wires": [
            [
                "9e5773ffdb856206",
                "0e242524ecba73b0"
            ]
        ]
    },
    {
        "id": "4da080ceb367b4bb",
        "type": "function",
        "z": "1ba65e07f15af05c",
        "name": "OPC msg DropBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "0e242524ecba73b0",
        "type": "function",
        "z": "1ba65e07f15af05c",
        "name": "Resset Drop Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "07f7f6b9a646cfb3",
        "type": "function",
        "z": "1ba65e07f15af05c",
        "name": "Pick/DropRequest (c)",
        "func": "if (flow.get(\"isLoadingValue\") === true) \n{\n    flow.set(\"DropRequest\", true)\n    node.warn(\"Drop Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"DropRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\nelse if (flow.get(\"isLoadingValue\") === false) {\n    flow.set(\"PickRequest\", true)\n    node.warn(\"Pick Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"PickRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "d51ebba557169377",
        "type": "function",
        "z": "1ba65e07f15af05c",
        "name": "Reset Drop Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "4a0bcfcc5e80481d",
        "type": "modbus-read",
        "z": "1ba65e07f15af05c",
        "name": "",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Input",
        "adr": "00000",
        "quantity": "1",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "d395581b1150fb7e",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 410,
        "y": 460,
        "wires": [
            [
                "255131554a3b77e0",
                "fc404115891a4e74",
                "f70a453afa4c8d65"
            ],
            []
        ]
    },
    {
        "id": "255131554a3b77e0",
        "type": "function",
        "z": "1ba65e07f15af05c",
        "name": "Check for DropEnable",
        "func": "// Assuming msg.payload is the array [ false, false, false, false, false, false, false, false ]\n\n// Extract the first value from the array\nvar firstValue = msg.payload[0];\n\n// Check if the first value is true\nif (firstValue === false && flow.get(\"isLoadingValue\") === true && flow.get(\"DropRequest\") === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Drop Enable\")\n    return msg;\n}\n else {\n    // If false, do nothing (no need to return anything)\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 460,
        "wires": [
            [
                "238599f94f910864",
                "aecb24747f74dc95"
            ]
        ]
    },
    {
        "id": "fc404115891a4e74",
        "type": "function",
        "z": "1ba65e07f15af05c",
        "name": "Check for PickEnable",
        "func": "var firstValue = msg.payload[0];\n\nif (firstValue === true && flow.get(\"isLoadingValue\") === false && flow.get('PickRequest') === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Pick Enable\")\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 500,
        "wires": [
            [
                "6411111f6bec3bb7",
                "aecb24747f74dc95"
            ]
        ]
    },
    {
        "id": "f70a453afa4c8d65",
        "type": "subflow:4cc4a3bd7d66d150",
        "z": "1ba65e07f15af05c",
        "name": "",
        "env": [
            {
                "name": "OPC_Item",
                "value": "ns=3;s=\"AMR_Comm\".\"MA_ID_02\"",
                "type": "str"
            }
        ],
        "x": 620,
        "y": 420,
        "wires": [
            [
                "c478fbb34f074ff8"
            ]
        ]
    },
    {
        "id": "c478fbb34f074ff8",
        "type": "link out",
        "z": "1ba65e07f15af05c",
        "name": "link out 8",
        "mode": "link",
        "links": [
            "20f3b1b189a355ab"
        ],
        "x": 765,
        "y": 420,
        "wires": []
    },
    {
        "id": "d5f8300e5650207f",
        "type": "function",
        "z": "92e65491828266ec",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 280,
        "wires": [
            [
                "213042eb6a2f4f62"
            ]
        ]
    },
    {
        "id": "213042eb6a2f4f62",
        "type": "http response",
        "z": "92e65491828266ec",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1280,
        "y": 280,
        "wires": []
    },
    {
        "id": "afd30ddc5ccea22d",
        "type": "comment",
        "z": "92e65491828266ec",
        "name": "open door request http://sim-les.quicktron.eu:1880/door/command/open",
        "info": "{\n  \"requestId\": \"\", // uuid\n  \"doorCode\": \"\",  // 设备编码\n  \"command\": \"\"    // 暂时用不上 开门接口会传入OPEN，关门接口会传入CLOSE\n}",
        "x": 630,
        "y": 300,
        "wires": []
    },
    {
        "id": "21b7a79f63b6766c",
        "type": "function",
        "z": "92e65491828266ec",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nnode.log(msg);\n\nflow.set('isLoadingValue', null);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 840,
        "wires": [
            [
                "4d19be41e73ca34d"
            ]
        ]
    },
    {
        "id": "4d19be41e73ca34d",
        "type": "http response",
        "z": "92e65491828266ec",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1100,
        "y": 840,
        "wires": []
    },
    {
        "id": "92cc6648cc4f1d07",
        "type": "function",
        "z": "92e65491828266ec",
        "name": "save close door arg",
        "func": "msg.parameter=msg.payload\nflow.set(\"closeArg\",msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 840,
        "wires": [
            [
                "21b7a79f63b6766c"
            ]
        ]
    },
    {
        "id": "8746b2177e53d410",
        "type": "function",
        "z": "92e65491828266ec",
        "name": "save request arg (c)",
        "func": "\nvar response=msg.payload\nresponse.actionCode='OPEN'\nnode.warn(response)\n//151 IP\nif (response.doorCode != undefined){\n    flow.set(\"openArg\", response)\n    return [msg,null,null,null,null,null,null,null,null]\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "1f3fb1f81ec0c0d5",
        "type": "function",
        "z": "92e65491828266ec",
        "name": "save close door args",
        "func": "\nmsg.parameter = msg.payload\nnode.warn(\"close door request\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 940,
        "wires": [
            [
                "92cc6648cc4f1d07",
                "65ee2496f6e1b355",
                "3378b62dde44ca3d"
            ]
        ]
    },
    {
        "id": "4b9ba9858efaca5e",
        "type": "function",
        "z": "92e65491828266ec",
        "name": "save open door args",
        "func": "msg.parameter = msg.payload\n//node.warn(\"receive open door args\");\n//node.warn(msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 340,
        "wires": [
            [
                "8746b2177e53d410",
                "d5f8300e5650207f"
            ]
        ]
    },
    {
        "id": "992212285a403675",
        "type": "inject",
        "z": "92e65491828266ec",
        "name": "Manual Overrite Pick/DropEnable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 510,
        "y": 600,
        "wires": [
            [
                "c855d4487cba1bf2"
            ]
        ]
    },
    {
        "id": "7bfeb7748244346e",
        "type": "http request",
        "z": "92e65491828266ec",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/door/command-finish",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1230,
        "y": 580,
        "wires": [
            [
                "9be67092ce1acd8c"
            ]
        ]
    },
    {
        "id": "c855d4487cba1bf2",
        "type": "function",
        "z": "92e65491828266ec",
        "name": "get saved request arg",
        "func": "//读取modbus的值,只有读到了1,并且有当前请求开门的参数的时候该流程继续往下走\nvar readData=msg.payload\nreadData=[true]\nvar requestArg=flow.get(\"openArg\")\n\nif (requestArg != undefined && requestArg != null && requestArg.requestId!=undefined)\n{\n    //表明当前门开了\n    if (readData && readData != undefined && readData[0] == true) \n    {\n        //构造请求的参数\n        msg.payload=requestArg\n        flow.set(\"openArg\", null)\n        return msg\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 580,
        "wires": [
            [
                "7bfeb7748244346e"
            ]
        ]
    },
    {
        "id": "9be67092ce1acd8c",
        "type": "function",
        "z": "92e65491828266ec",
        "name": "rcs response",
        "func": "var response=msg.payload\n\n\nnode.warn(response)\nif(response!=undefined && response!=null && response.success==true){\n    global.set(\"openArg\",null)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "06e9dd069209122d",
        "type": "function",
        "z": "92e65491828266ec",
        "name": "AutoOut (c)",
        "func": "// recieve openArg\nvar requestArg = flow.get(\"openArg\")\n// array of location codes\nvar staticValues = ['0524'];\n// Parsed location of all AMRs\nvar pointCodes = global.get(\"pointCodes\") || [];\n\n// chceck if there is data in openArg\nif (requestArg != undefined && requestArg != null && requestArg.requestId != undefined) {\n    // compare if any amr is in location\n    if (staticValues.some(value => pointCodes.includes(value))) {\n        // send command for ato out of location\n        msg.payload = requestArg;\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 700,
        "wires": [
            [
                "c855d4487cba1bf2"
            ]
        ]
    },
    {
        "id": "82fc58f5f151eebe",
        "type": "inject",
        "z": "92e65491828266ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 390,
        "y": 700,
        "wires": [
            [
                "06e9dd069209122d"
            ]
        ]
    },
    {
        "id": "da56d490830e8749",
        "type": "comment",
        "z": "92e65491828266ec",
        "name": "Auto out",
        "info": "",
        "x": 380,
        "y": 660,
        "wires": []
    },
    {
        "id": "289acc547fc78440",
        "type": "function",
        "z": "92e65491828266ec",
        "name": "Reset Flow Values",
        "func": "//flow.set(\"PickBusy\", true)\nflow.set(\"PickRequest\", false)\nflow.set(\"DropRequest\", false)\nflow.set('isLoadingValue', null);\nnode.warn('reset values')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "c4a9056aa2503896",
        "type": "comment",
        "z": "92e65491828266ec",
        "name": "Send Pick/Drop Request",
        "info": "",
        "x": 1490,
        "y": 180,
        "wires": []
    },
    {
        "id": "989909bf428fa4a6",
        "type": "comment",
        "z": "92e65491828266ec",
        "name": "Reset Pick/Drop Request",
        "info": "",
        "x": 1010,
        "y": 900,
        "wires": []
    },
    {
        "id": "0c0b8c4a40f08f25",
        "type": "link in",
        "z": "92e65491828266ec",
        "name": "Open_Stand_6",
        "links": [
            "98e5fc1a2d6bef8a"
        ],
        "x": 605,
        "y": 340,
        "wires": [
            [
                "4b9ba9858efaca5e"
            ]
        ]
    },
    {
        "id": "e4bab36ede5cc582",
        "type": "link in",
        "z": "92e65491828266ec",
        "name": "Close_Stand_6",
        "links": [
            "db36d6675bba0ee2"
        ],
        "x": 215,
        "y": 940,
        "wires": [
            [
                "1f3fb1f81ec0c0d5"
            ]
        ]
    },
    {
        "id": "23ee660bb5d278b6",
        "type": "function",
        "z": "92e65491828266ec",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 140,
        "wires": [
            [
                "e146ca7769e7adf3",
                "e2e5360f482db5a6"
            ]
        ]
    },
    {
        "id": "e146ca7769e7adf3",
        "type": "http response",
        "z": "92e65491828266ec",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1440,
        "y": 140,
        "wires": []
    },
    {
        "id": "af6db4211e6aa1bd",
        "type": "function",
        "z": "92e65491828266ec",
        "name": "Check and save loaded status",
        "func": "// Extract isLoading value from the command property in the payload\nvar isLoadingValue = msg.payload.isLoading;\n\n// Save the isLoading value in a flow variable\nflow.set('isLoadingValue', isLoadingValue);\n\n// Pass the original message to the next node\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 140,
        "wires": [
            [
                "23ee660bb5d278b6"
            ]
        ]
    },
    {
        "id": "de5e6bb357561343",
        "type": "function",
        "z": "92e65491828266ec",
        "name": "Set DropBusy",
        "func": "flow.set(\"DropBusy\", true)\nnode.warn(\"DropBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 500,
        "wires": [
            [
                "63080d3ce8b86c27"
            ]
        ]
    },
    {
        "id": "1d23ea907f27a780",
        "type": "function",
        "z": "92e65491828266ec",
        "name": "Set PickBusy",
        "func": "flow.set(\"PickBusy\", true)\nnode.warn(\"PickBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 540,
        "wires": [
            [
                "8aace195403f20a4"
            ]
        ]
    },
    {
        "id": "4fdd862d942e95c8",
        "type": "http request",
        "z": "92e65491828266ec",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/rcs/equipment/feedback",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 850,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "a73b8b086fb3aca4",
        "type": "link in",
        "z": "92e65491828266ec",
        "name": "link in 14",
        "links": [
            "c19e2c49a97174fb"
        ],
        "x": 605,
        "y": 140,
        "wires": [
            [
                "4fdd862d942e95c8",
                "af6db4211e6aa1bd"
            ]
        ]
    },
    {
        "id": "8aace195403f20a4",
        "type": "function",
        "z": "92e65491828266ec",
        "name": "OPC msg PickBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "e7977a32551fb531",
        "type": "function",
        "z": "92e65491828266ec",
        "name": "Reset Pick Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "e1a1b8a71957d192",
        "type": "function",
        "z": "92e65491828266ec",
        "name": "Reset Pick Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "65ee2496f6e1b355",
        "type": "function",
        "z": "92e65491828266ec",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") != null) \n{\n    // If true, send only the first value to the next node\n    node.warn('reset pick/drop')\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 940,
        "wires": [
            [
                "289acc547fc78440",
                "e7977a32551fb531",
                "f450299182c0fc6d"
            ]
        ]
    },
    {
        "id": "3378b62dde44ca3d",
        "type": "function",
        "z": "92e65491828266ec",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") === null) \n{\n    // If true, send only the first value to the next node\n    flow.set(\"PickBusy\", false);\n    flow.set(\"DropBusy\", false);\n    node.warn(\"Reset Pick/Drop Busy\");\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1080,
        "wires": [
            [
                "e1a1b8a71957d192",
                "fb6c0d7aab428499"
            ]
        ]
    },
    {
        "id": "63080d3ce8b86c27",
        "type": "function",
        "z": "92e65491828266ec",
        "name": "OPC msg DropBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "fb6c0d7aab428499",
        "type": "function",
        "z": "92e65491828266ec",
        "name": "Resset Drop Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "e2e5360f482db5a6",
        "type": "function",
        "z": "92e65491828266ec",
        "name": "Pick/DropRequest (c)",
        "func": "if (flow.get(\"isLoadingValue\") === true) \n{\n    flow.set(\"DropRequest\", true)\n    node.warn(\"Drop Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"DropRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\nelse if (flow.get(\"isLoadingValue\") === false) {\n    flow.set(\"PickRequest\", true)\n    node.warn(\"Pick Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"PickRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "f450299182c0fc6d",
        "type": "function",
        "z": "92e65491828266ec",
        "name": "Reset Drop Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "85e1338291acd6a0",
        "type": "modbus-read",
        "z": "92e65491828266ec",
        "name": "",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Input",
        "adr": "00005",
        "quantity": "1",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "8afe91b60295333b",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 450,
        "y": 500,
        "wires": [
            [
                "42c073838b3ce8ce",
                "ac8601821f0df7eb",
                "5c87245255fa4208"
            ],
            []
        ]
    },
    {
        "id": "42c073838b3ce8ce",
        "type": "function",
        "z": "92e65491828266ec",
        "name": "Check for DropEnable",
        "func": "// Assuming msg.payload is the array [ false, false, false, false, false, false, false, false ]\n\n// Extract the first value from the array\nvar firstValue = msg.payload[0];\n\n// Check if the first value is true\nif (firstValue === false && flow.get(\"isLoadingValue\") === true && flow.get(\"DropRequest\") === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Drop Enable\")\n    return msg;\n}\n else {\n    // If false, do nothing (no need to return anything)\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 500,
        "wires": [
            [
                "de5e6bb357561343",
                "c855d4487cba1bf2"
            ]
        ]
    },
    {
        "id": "ac8601821f0df7eb",
        "type": "function",
        "z": "92e65491828266ec",
        "name": "Check for PickEnable",
        "func": "var firstValue = msg.payload[0];\n\nif (firstValue === true && flow.get(\"isLoadingValue\") === false && flow.get('PickRequest') === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Pick Enable\")\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 540,
        "wires": [
            [
                "1d23ea907f27a780",
                "c855d4487cba1bf2"
            ]
        ]
    },
    {
        "id": "5c87245255fa4208",
        "type": "subflow:4cc4a3bd7d66d150",
        "z": "92e65491828266ec",
        "name": "",
        "env": [
            {
                "name": "OPC_Item",
                "value": "ns=3;s=\"AMR_Comm\".\"MA_ID_03\"",
                "type": "str"
            }
        ],
        "x": 660,
        "y": 460,
        "wires": [
            [
                "28b80804be7b90db"
            ]
        ]
    },
    {
        "id": "28b80804be7b90db",
        "type": "link out",
        "z": "92e65491828266ec",
        "name": "link out 9",
        "mode": "link",
        "links": [
            "20f3b1b189a355ab"
        ],
        "x": 805,
        "y": 460,
        "wires": []
    },
    {
        "id": "44888c6db4538dd5",
        "type": "function",
        "z": "90605943bab2dc55",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 240,
        "wires": [
            [
                "d73025a45b1cfc3b"
            ]
        ]
    },
    {
        "id": "d73025a45b1cfc3b",
        "type": "http response",
        "z": "90605943bab2dc55",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1280,
        "y": 240,
        "wires": []
    },
    {
        "id": "e419b4c945c8e79c",
        "type": "comment",
        "z": "90605943bab2dc55",
        "name": "open door request http://sim-les.quicktron.eu:1880/door/command/open",
        "info": "{\n  \"requestId\": \"\", // uuid\n  \"doorCode\": \"\",  // 设备编码\n  \"command\": \"\"    // 暂时用不上 开门接口会传入OPEN，关门接口会传入CLOSE\n}",
        "x": 630,
        "y": 260,
        "wires": []
    },
    {
        "id": "3e03f943654fdf4e",
        "type": "function",
        "z": "90605943bab2dc55",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nnode.log(msg);\n\nflow.set('isLoadingValue', null);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 800,
        "wires": [
            [
                "e0c8fae3a22a0f29"
            ]
        ]
    },
    {
        "id": "e0c8fae3a22a0f29",
        "type": "http response",
        "z": "90605943bab2dc55",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1100,
        "y": 800,
        "wires": []
    },
    {
        "id": "dfa1ad9955eb97cb",
        "type": "function",
        "z": "90605943bab2dc55",
        "name": "save close door arg",
        "func": "msg.parameter=msg.payload\nflow.set(\"closeArg\",msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 800,
        "wires": [
            [
                "3e03f943654fdf4e"
            ]
        ]
    },
    {
        "id": "0564e61badb266a4",
        "type": "function",
        "z": "90605943bab2dc55",
        "name": "save request arg (c)",
        "func": "\nvar response=msg.payload\nresponse.actionCode='OPEN'\nnode.warn(response)\n//151 IP\nif (response.doorCode != undefined){\n    flow.set(\"openArg\", response)\n    return [msg,null,null,null,null,null,null,null,null]\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "03d89f57709785dd",
        "type": "function",
        "z": "90605943bab2dc55",
        "name": "save close door args",
        "func": "\nmsg.parameter = msg.payload\nnode.warn(\"close door request\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 900,
        "wires": [
            [
                "dfa1ad9955eb97cb",
                "f6e98424a8f93716",
                "567ec0d2a4d0a77d"
            ]
        ]
    },
    {
        "id": "d46ac9db7e3eea86",
        "type": "function",
        "z": "90605943bab2dc55",
        "name": "save open door args",
        "func": "msg.parameter = msg.payload\n//node.warn(\"receive open door args\");\n//node.warn(msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 300,
        "wires": [
            [
                "0564e61badb266a4",
                "44888c6db4538dd5"
            ]
        ]
    },
    {
        "id": "0de56ecf1749e096",
        "type": "inject",
        "z": "90605943bab2dc55",
        "name": "Manual Overrite Pick/DropEnable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 510,
        "y": 560,
        "wires": [
            [
                "bb699e7b972f9707"
            ]
        ]
    },
    {
        "id": "c0c61d2270b939c6",
        "type": "http request",
        "z": "90605943bab2dc55",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/door/command-finish",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1230,
        "y": 540,
        "wires": [
            [
                "0763265f92b686ba"
            ]
        ]
    },
    {
        "id": "bb699e7b972f9707",
        "type": "function",
        "z": "90605943bab2dc55",
        "name": "get saved request arg",
        "func": "//读取modbus的值,只有读到了1,并且有当前请求开门的参数的时候该流程继续往下走\nvar readData=msg.payload\nreadData=[true]\nvar requestArg=flow.get(\"openArg\")\n\nif (requestArg != undefined && requestArg != null && requestArg.requestId!=undefined)\n{\n    //表明当前门开了\n    if (readData && readData != undefined && readData[0] == true) \n    {\n        //构造请求的参数\n        msg.payload=requestArg\n        flow.set(\"openArg\", null)\n        return msg\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 540,
        "wires": [
            [
                "c0c61d2270b939c6"
            ]
        ]
    },
    {
        "id": "0763265f92b686ba",
        "type": "function",
        "z": "90605943bab2dc55",
        "name": "rcs response",
        "func": "var response=msg.payload\n\n\nnode.warn(response)\nif(response!=undefined && response!=null && response.success==true){\n    global.set(\"openArg\",null)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "634c3ad660a29793",
        "type": "function",
        "z": "90605943bab2dc55",
        "name": "AutoOut (c)",
        "func": "// recieve openArg\nvar requestArg = flow.get(\"openArg\")\n// array of location codes\nvar staticValues = ['0527'];\n// Parsed location of all AMRs\nvar pointCodes = global.get(\"pointCodes\") || [];\n\n// chceck if there is data in openArg\nif (requestArg != undefined && requestArg != null && requestArg.requestId != undefined) {\n    // compare if any amr is in location\n    if (staticValues.some(value => pointCodes.includes(value))) {\n        // send command for ato out of location\n        msg.payload = requestArg;\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 660,
        "wires": [
            [
                "bb699e7b972f9707"
            ]
        ]
    },
    {
        "id": "f8cc3fab1e1035f0",
        "type": "inject",
        "z": "90605943bab2dc55",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 390,
        "y": 660,
        "wires": [
            [
                "634c3ad660a29793"
            ]
        ]
    },
    {
        "id": "311446042ecbe44f",
        "type": "comment",
        "z": "90605943bab2dc55",
        "name": "Auto out",
        "info": "",
        "x": 380,
        "y": 620,
        "wires": []
    },
    {
        "id": "0b281aa191fc2d59",
        "type": "function",
        "z": "90605943bab2dc55",
        "name": "Reset Flow Values",
        "func": "//flow.set(\"PickBusy\", true)\nflow.set(\"PickRequest\", false)\nflow.set(\"DropRequest\", false)\nflow.set('isLoadingValue', null);\nnode.warn('reset values')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "33f05c660350d139",
        "type": "comment",
        "z": "90605943bab2dc55",
        "name": "Send Pick/Drop Request",
        "info": "",
        "x": 1490,
        "y": 140,
        "wires": []
    },
    {
        "id": "b1fc1609d08d7164",
        "type": "comment",
        "z": "90605943bab2dc55",
        "name": "Reset Pick/Drop Request",
        "info": "",
        "x": 1010,
        "y": 860,
        "wires": []
    },
    {
        "id": "9ce9175dd6964b26",
        "type": "link in",
        "z": "90605943bab2dc55",
        "name": "Open_Stand_6",
        "links": [
            "bb0e2a3cb8488ebd"
        ],
        "x": 605,
        "y": 300,
        "wires": [
            [
                "d46ac9db7e3eea86"
            ]
        ]
    },
    {
        "id": "1febe34f727e351b",
        "type": "link in",
        "z": "90605943bab2dc55",
        "name": "Close_Stand_6",
        "links": [
            "6421c1d4f1b0ec1b"
        ],
        "x": 215,
        "y": 900,
        "wires": [
            [
                "03d89f57709785dd"
            ]
        ]
    },
    {
        "id": "b999e7fd49581a79",
        "type": "function",
        "z": "90605943bab2dc55",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 100,
        "wires": [
            [
                "2d3594a83c9d8bc4",
                "39604aea0bc1c620"
            ]
        ]
    },
    {
        "id": "2d3594a83c9d8bc4",
        "type": "http response",
        "z": "90605943bab2dc55",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1440,
        "y": 100,
        "wires": []
    },
    {
        "id": "4b75d0b2e41c4654",
        "type": "function",
        "z": "90605943bab2dc55",
        "name": "Check and save loaded status",
        "func": "// Extract isLoading value from the command property in the payload\nvar isLoadingValue = msg.payload.isLoading;\n\n// Save the isLoading value in a flow variable\nflow.set('isLoadingValue', isLoadingValue);\n\n// Pass the original message to the next node\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 100,
        "wires": [
            [
                "b999e7fd49581a79"
            ]
        ]
    },
    {
        "id": "4c3da803dc9d9d65",
        "type": "function",
        "z": "90605943bab2dc55",
        "name": "Set DropBusy",
        "func": "flow.set(\"DropBusy\", true)\nnode.warn(\"DropBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 460,
        "wires": [
            [
                "eef7561b998ef7d2"
            ]
        ]
    },
    {
        "id": "6b35340c9acd3372",
        "type": "function",
        "z": "90605943bab2dc55",
        "name": "Set PickBusy",
        "func": "flow.set(\"PickBusy\", true)\nnode.warn(\"PickBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 500,
        "wires": [
            [
                "e7b0faa2934f1f7c"
            ]
        ]
    },
    {
        "id": "1026f7ef7e4df737",
        "type": "http request",
        "z": "90605943bab2dc55",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/rcs/equipment/feedback",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 850,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "d7c3f4182324b0a2",
        "type": "link in",
        "z": "90605943bab2dc55",
        "name": "link in 13",
        "links": [
            "1e0aa3d9b93ee963"
        ],
        "x": 605,
        "y": 100,
        "wires": [
            [
                "1026f7ef7e4df737",
                "4b75d0b2e41c4654"
            ]
        ]
    },
    {
        "id": "e7b0faa2934f1f7c",
        "type": "function",
        "z": "90605943bab2dc55",
        "name": "OPC msg PickBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "8842425175f8b4da",
        "type": "function",
        "z": "90605943bab2dc55",
        "name": "Reset Pick Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "9e2e17a469c97a72",
        "type": "function",
        "z": "90605943bab2dc55",
        "name": "Reset Pick Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "f6e98424a8f93716",
        "type": "function",
        "z": "90605943bab2dc55",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") != null) \n{\n    // If true, send only the first value to the next node\n    node.warn('reset pick/drop')\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 900,
        "wires": [
            [
                "0b281aa191fc2d59",
                "8842425175f8b4da",
                "36b6be38617d7079"
            ]
        ]
    },
    {
        "id": "567ec0d2a4d0a77d",
        "type": "function",
        "z": "90605943bab2dc55",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") === null) \n{\n    // If true, send only the first value to the next node\n    flow.set(\"PickBusy\", false);\n    flow.set(\"DropBusy\", false);\n    node.warn(\"Reset Pick/Drop Busy\");\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1040,
        "wires": [
            [
                "9e2e17a469c97a72",
                "301ee45a4a7c2b01"
            ]
        ]
    },
    {
        "id": "eef7561b998ef7d2",
        "type": "function",
        "z": "90605943bab2dc55",
        "name": "OPC msg DropBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "301ee45a4a7c2b01",
        "type": "function",
        "z": "90605943bab2dc55",
        "name": "Resset Drop Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "39604aea0bc1c620",
        "type": "function",
        "z": "90605943bab2dc55",
        "name": "Pick/DropRequest (c)",
        "func": "if (flow.get(\"isLoadingValue\") === true) \n{\n    flow.set(\"DropRequest\", true)\n    node.warn(\"Drop Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"DropRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\nelse if (flow.get(\"isLoadingValue\") === false) {\n    flow.set(\"PickRequest\", true)\n    node.warn(\"Pick Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"PickRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "36b6be38617d7079",
        "type": "function",
        "z": "90605943bab2dc55",
        "name": "Reset Drop Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "6103b87e4757d70c",
        "type": "modbus-read",
        "z": "90605943bab2dc55",
        "name": "",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Input",
        "adr": "00004",
        "quantity": "1",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "8afe91b60295333b",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 450,
        "y": 460,
        "wires": [
            [
                "11209d90d25e761b",
                "f975f9ef623b0fa0",
                "28575da5fda4fc06"
            ],
            []
        ]
    },
    {
        "id": "11209d90d25e761b",
        "type": "function",
        "z": "90605943bab2dc55",
        "name": "Check for DropEnable",
        "func": "// Assuming msg.payload is the array [ false, false, false, false, false, false, false, false ]\n\n// Extract the first value from the array\nvar firstValue = msg.payload[0];\n\n// Check if the first value is true\nif (firstValue === false && flow.get(\"isLoadingValue\") === true && flow.get(\"DropRequest\") === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Drop Enable\")\n    return msg;\n}\n else {\n    // If false, do nothing (no need to return anything)\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 460,
        "wires": [
            [
                "4c3da803dc9d9d65",
                "bb699e7b972f9707"
            ]
        ]
    },
    {
        "id": "f975f9ef623b0fa0",
        "type": "function",
        "z": "90605943bab2dc55",
        "name": "Check for PickEnable",
        "func": "var firstValue = msg.payload[0];\n\nif (firstValue === true && flow.get(\"isLoadingValue\") === false && flow.get('PickRequest') === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Pick Enable\")\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 500,
        "wires": [
            [
                "6b35340c9acd3372",
                "bb699e7b972f9707"
            ]
        ]
    },
    {
        "id": "28575da5fda4fc06",
        "type": "subflow:4cc4a3bd7d66d150",
        "z": "90605943bab2dc55",
        "name": "",
        "env": [
            {
                "name": "OPC_Item",
                "value": "ns=3;s=\"AMR_Comm\".\"MA_ID_04\"",
                "type": "str"
            }
        ],
        "x": 660,
        "y": 420,
        "wires": [
            [
                "e4f1920e635ab606"
            ]
        ]
    },
    {
        "id": "e4f1920e635ab606",
        "type": "link out",
        "z": "90605943bab2dc55",
        "name": "link out 10",
        "mode": "link",
        "links": [
            "20f3b1b189a355ab"
        ],
        "x": 805,
        "y": 420,
        "wires": []
    },
    {
        "id": "d68a301c3205f545",
        "type": "function",
        "z": "1984869b17cac090",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 280,
        "wires": [
            [
                "a48c2ba429d195e7"
            ]
        ]
    },
    {
        "id": "a48c2ba429d195e7",
        "type": "http response",
        "z": "1984869b17cac090",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1320,
        "y": 280,
        "wires": []
    },
    {
        "id": "ae8b1cdabceceec4",
        "type": "comment",
        "z": "1984869b17cac090",
        "name": "open door request http://sim-les.quicktron.eu:1880/door/command/open",
        "info": "{\n  \"requestId\": \"\", // uuid\n  \"doorCode\": \"\",  // 设备编码\n  \"command\": \"\"    // 暂时用不上 开门接口会传入OPEN，关门接口会传入CLOSE\n}",
        "x": 670,
        "y": 300,
        "wires": []
    },
    {
        "id": "cec839a19ead945a",
        "type": "function",
        "z": "1984869b17cac090",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nnode.log(msg);\n\nflow.set('isLoadingValue', null);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 840,
        "wires": [
            [
                "9f63e132c16f865d"
            ]
        ]
    },
    {
        "id": "9f63e132c16f865d",
        "type": "http response",
        "z": "1984869b17cac090",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1140,
        "y": 840,
        "wires": []
    },
    {
        "id": "9e0185127f13a3f9",
        "type": "function",
        "z": "1984869b17cac090",
        "name": "save close door arg",
        "func": "msg.parameter=msg.payload\nflow.set(\"closeArg\",msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 840,
        "wires": [
            [
                "cec839a19ead945a"
            ]
        ]
    },
    {
        "id": "525f2781fb89bb76",
        "type": "function",
        "z": "1984869b17cac090",
        "name": "save request arg (c)",
        "func": "\nvar response=msg.payload\nresponse.actionCode='OPEN'\nnode.warn(response)\n//151 IP\nif (response.doorCode != undefined){\n    flow.set(\"openArg\", response)\n    return [msg,null,null,null,null,null,null,null,null]\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "0ba2d9825f2c4705",
        "type": "function",
        "z": "1984869b17cac090",
        "name": "save close door args",
        "func": "\nmsg.parameter = msg.payload\nnode.warn(\"close door request\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 940,
        "wires": [
            [
                "9e0185127f13a3f9",
                "ea73c0cbe9ed7e23",
                "1ba104223d50521a"
            ]
        ]
    },
    {
        "id": "3f72395bd794b653",
        "type": "function",
        "z": "1984869b17cac090",
        "name": "save open door args",
        "func": "msg.parameter = msg.payload\n//node.warn(\"receive open door args\");\n//node.warn(msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 340,
        "wires": [
            [
                "525f2781fb89bb76",
                "d68a301c3205f545"
            ]
        ]
    },
    {
        "id": "7a423e00f8258873",
        "type": "inject",
        "z": "1984869b17cac090",
        "name": "Manual Overrite Pick/DropEnable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 550,
        "y": 600,
        "wires": [
            [
                "7f6d8269824550c7"
            ]
        ]
    },
    {
        "id": "9ab292fc914fa8fe",
        "type": "http request",
        "z": "1984869b17cac090",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/door/command-finish",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1270,
        "y": 580,
        "wires": [
            [
                "c2eb72d8381ca7e2"
            ]
        ]
    },
    {
        "id": "7f6d8269824550c7",
        "type": "function",
        "z": "1984869b17cac090",
        "name": "get saved request arg",
        "func": "//读取modbus的值,只有读到了1,并且有当前请求开门的参数的时候该流程继续往下走\nvar readData=msg.payload\nreadData=[true]\nvar requestArg=flow.get(\"openArg\")\n\nif (requestArg != undefined && requestArg != null && requestArg.requestId!=undefined)\n{\n    //表明当前门开了\n    if (readData && readData != undefined && readData[0] == true) \n    {\n        //构造请求的参数\n        msg.payload=requestArg\n        flow.set(\"openArg\", null)\n        return msg\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 580,
        "wires": [
            [
                "9ab292fc914fa8fe"
            ]
        ]
    },
    {
        "id": "c2eb72d8381ca7e2",
        "type": "function",
        "z": "1984869b17cac090",
        "name": "rcs response",
        "func": "var response=msg.payload\n\n\nnode.warn(response)\nif(response!=undefined && response!=null && response.success==true){\n    global.set(\"openArg\",null)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "542c7e1066ed35b1",
        "type": "function",
        "z": "1984869b17cac090",
        "name": "AutoOut (c)",
        "func": "// recieve openArg\nvar requestArg = flow.get(\"openArg\")\n// array of location codes\nvar staticValues = ['0530'];\n// Parsed location of all AMRs\nvar pointCodes = global.get(\"pointCodes\") || [];\n\n// chceck if there is data in openArg\nif (requestArg != undefined && requestArg != null && requestArg.requestId != undefined) {\n    // compare if any amr is in location\n    if (staticValues.some(value => pointCodes.includes(value))) {\n        // send command for ato out of location\n        msg.payload = requestArg;\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 700,
        "wires": [
            [
                "7f6d8269824550c7"
            ]
        ]
    },
    {
        "id": "949d2a91569b2304",
        "type": "inject",
        "z": "1984869b17cac090",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 430,
        "y": 700,
        "wires": [
            [
                "542c7e1066ed35b1"
            ]
        ]
    },
    {
        "id": "55d7eb6e36be8e22",
        "type": "comment",
        "z": "1984869b17cac090",
        "name": "Auto out",
        "info": "",
        "x": 420,
        "y": 660,
        "wires": []
    },
    {
        "id": "edbf829062d81264",
        "type": "function",
        "z": "1984869b17cac090",
        "name": "Reset Flow Values",
        "func": "//flow.set(\"PickBusy\", true)\nflow.set(\"PickRequest\", false)\nflow.set(\"DropRequest\", false)\nflow.set('isLoadingValue', null);\nnode.warn('reset values')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "69a62a2a636549f1",
        "type": "comment",
        "z": "1984869b17cac090",
        "name": "Send Pick/Drop Request",
        "info": "",
        "x": 1530,
        "y": 180,
        "wires": []
    },
    {
        "id": "70cb2f1935691e48",
        "type": "comment",
        "z": "1984869b17cac090",
        "name": "Reset Pick/Drop Request",
        "info": "",
        "x": 1050,
        "y": 900,
        "wires": []
    },
    {
        "id": "4a0f3db490a8d125",
        "type": "link in",
        "z": "1984869b17cac090",
        "name": "Open_Stand_6",
        "links": [
            "ceafc53737a30571"
        ],
        "x": 645,
        "y": 340,
        "wires": [
            [
                "3f72395bd794b653"
            ]
        ]
    },
    {
        "id": "4807f6efd17e1cf0",
        "type": "link in",
        "z": "1984869b17cac090",
        "name": "Close_Stand_6",
        "links": [
            "4deb682832e52fef"
        ],
        "x": 255,
        "y": 940,
        "wires": [
            [
                "0ba2d9825f2c4705"
            ]
        ]
    },
    {
        "id": "3f86702546a63964",
        "type": "function",
        "z": "1984869b17cac090",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 140,
        "wires": [
            [
                "55792207b44391aa",
                "7a3a7b627dfd9d4e"
            ]
        ]
    },
    {
        "id": "55792207b44391aa",
        "type": "http response",
        "z": "1984869b17cac090",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1480,
        "y": 140,
        "wires": []
    },
    {
        "id": "8e86e665beff2421",
        "type": "function",
        "z": "1984869b17cac090",
        "name": "Check and save loaded status",
        "func": "// Extract isLoading value from the command property in the payload\nvar isLoadingValue = msg.payload.isLoading;\n\n// Save the isLoading value in a flow variable\nflow.set('isLoadingValue', isLoadingValue);\n\n// Pass the original message to the next node\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 140,
        "wires": [
            [
                "3f86702546a63964"
            ]
        ]
    },
    {
        "id": "0fb0fa8920ca17cc",
        "type": "function",
        "z": "1984869b17cac090",
        "name": "Set DropBusy",
        "func": "flow.set(\"DropBusy\", true)\nnode.warn(\"DropBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 500,
        "wires": [
            [
                "8f3d70f896f2877e"
            ]
        ]
    },
    {
        "id": "a2ba4d8642033e27",
        "type": "function",
        "z": "1984869b17cac090",
        "name": "Set PickBusy",
        "func": "flow.set(\"PickBusy\", true)\nnode.warn(\"PickBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 540,
        "wires": [
            [
                "dcc001491531b7e2"
            ]
        ]
    },
    {
        "id": "9e5d2897d1df1708",
        "type": "http request",
        "z": "1984869b17cac090",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/rcs/equipment/feedback",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 890,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "2abcf61162a958c3",
        "type": "link in",
        "z": "1984869b17cac090",
        "name": "link in 12",
        "links": [
            "f36647a4e6811b2d"
        ],
        "x": 645,
        "y": 140,
        "wires": [
            [
                "9e5d2897d1df1708",
                "8e86e665beff2421"
            ]
        ]
    },
    {
        "id": "dcc001491531b7e2",
        "type": "function",
        "z": "1984869b17cac090",
        "name": "OPC msg PickBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "d7daa085ad23b121",
        "type": "function",
        "z": "1984869b17cac090",
        "name": "Reset Pick Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "c8c2c0c6d4d79079",
        "type": "function",
        "z": "1984869b17cac090",
        "name": "Reset Pick Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "ea73c0cbe9ed7e23",
        "type": "function",
        "z": "1984869b17cac090",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") != null) \n{\n    // If true, send only the first value to the next node\n    node.warn('reset pick/drop')\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 940,
        "wires": [
            [
                "edbf829062d81264",
                "d7daa085ad23b121",
                "5b17ce983d157ceb"
            ]
        ]
    },
    {
        "id": "1ba104223d50521a",
        "type": "function",
        "z": "1984869b17cac090",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") === null) \n{\n    // If true, send only the first value to the next node\n    flow.set(\"PickBusy\", false);\n    flow.set(\"DropBusy\", false);\n    node.warn(\"Reset Pick/Drop Busy\");\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1080,
        "wires": [
            [
                "c8c2c0c6d4d79079",
                "5132129ad30efeb9"
            ]
        ]
    },
    {
        "id": "8f3d70f896f2877e",
        "type": "function",
        "z": "1984869b17cac090",
        "name": "OPC msg DropBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "5132129ad30efeb9",
        "type": "function",
        "z": "1984869b17cac090",
        "name": "Resset Drop Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "7a3a7b627dfd9d4e",
        "type": "function",
        "z": "1984869b17cac090",
        "name": "Pick/DropRequest (c)",
        "func": "if (flow.get(\"isLoadingValue\") === true) \n{\n    flow.set(\"DropRequest\", true)\n    node.warn(\"Drop Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"DropRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\nelse if (flow.get(\"isLoadingValue\") === false) {\n    flow.set(\"PickRequest\", true)\n    node.warn(\"Pick Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"PickRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "5b17ce983d157ceb",
        "type": "function",
        "z": "1984869b17cac090",
        "name": "Reset Drop Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "808a81256fa8798b",
        "type": "modbus-read",
        "z": "1984869b17cac090",
        "name": "",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Input",
        "adr": "00003",
        "quantity": "1",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "8afe91b60295333b",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 490,
        "y": 500,
        "wires": [
            [
                "60d1ecdf9df89781",
                "e48bc7c3eeba3cb5",
                "6b414c27badaa820"
            ],
            []
        ]
    },
    {
        "id": "60d1ecdf9df89781",
        "type": "function",
        "z": "1984869b17cac090",
        "name": "Check for DropEnable",
        "func": "// Assuming msg.payload is the array [ false, false, false, false, false, false, false, false ]\n\n// Extract the first value from the array\nvar firstValue = msg.payload[0];\n\n// Check if the first value is true\nif (firstValue === false && flow.get(\"isLoadingValue\") === true && flow.get(\"DropRequest\") === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Drop Enable\")\n    return msg;\n}\n else {\n    // If false, do nothing (no need to return anything)\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 500,
        "wires": [
            [
                "0fb0fa8920ca17cc",
                "7f6d8269824550c7"
            ]
        ]
    },
    {
        "id": "e48bc7c3eeba3cb5",
        "type": "function",
        "z": "1984869b17cac090",
        "name": "Check for PickEnable",
        "func": "var firstValue = msg.payload[0];\n\nif (firstValue === true && flow.get(\"isLoadingValue\") === false && flow.get('PickRequest') === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Pick Enable\")\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 540,
        "wires": [
            [
                "a2ba4d8642033e27",
                "7f6d8269824550c7"
            ]
        ]
    },
    {
        "id": "6b414c27badaa820",
        "type": "subflow:4cc4a3bd7d66d150",
        "z": "1984869b17cac090",
        "name": "",
        "env": [
            {
                "name": "OPC_Item",
                "value": "ns=3;s=\"AMR_Comm\".\"MA_ID_05\"",
                "type": "str"
            }
        ],
        "x": 700,
        "y": 460,
        "wires": [
            [
                "648f1ac7000c0f9e"
            ]
        ]
    },
    {
        "id": "648f1ac7000c0f9e",
        "type": "link out",
        "z": "1984869b17cac090",
        "name": "link out 11",
        "mode": "link",
        "links": [
            "20f3b1b189a355ab"
        ],
        "x": 845,
        "y": 460,
        "wires": []
    },
    {
        "id": "52c4e9bdd0b4e59c",
        "type": "link out",
        "z": "ebd156bd64966870",
        "name": "Out Heartbeat WH",
        "mode": "link",
        "links": [
            "334118ba93f3261b"
        ],
        "x": 585,
        "y": 80,
        "wires": []
    },
    {
        "id": "97136783694affbb",
        "type": "function",
        "z": "ebd156bd64966870",
        "name": "Heartbeat WH",
        "func": "const OPC_Item = 'ns=3;s=\"AMR_Comm\".\"CommAlive\";datatype=Boolean';\n\n\n// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = OPC_Item;\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 80,
        "wires": [
            [
                "52c4e9bdd0b4e59c"
            ]
        ]
    },
    {
        "id": "7fbf65f3abaa7cbf",
        "type": "link out",
        "z": "ebd156bd64966870",
        "name": "Out Heartbeat F2",
        "mode": "link",
        "links": [
            "8217909c9254d8d6"
        ],
        "x": 585,
        "y": 180,
        "wires": []
    },
    {
        "id": "43cdd69c578a86f5",
        "type": "function",
        "z": "ebd156bd64966870",
        "name": "Heartbeat F2",
        "func": "const OPC_Item = 'ns=3;s=\"AMR_Comm\".\"CommAlive\";datatype=Boolean';\n\n\n// Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = OPC_Item;\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 180,
        "wires": [
            [
                "7fbf65f3abaa7cbf"
            ]
        ]
    },
    {
        "id": "0c58ce5f3f50f096",
        "type": "inject",
        "z": "ebd156bd64966870",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 180,
        "wires": [
            [
                "43cdd69c578a86f5",
                "97136783694affbb"
            ]
        ]
    },
    {
        "id": "7cc82a9101fada26",
        "type": "function",
        "z": "4f2c9a5f536c026c",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 280,
        "wires": [
            [
                "2ddec8c173ac3384"
            ]
        ]
    },
    {
        "id": "2ddec8c173ac3384",
        "type": "http response",
        "z": "4f2c9a5f536c026c",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1320,
        "y": 280,
        "wires": []
    },
    {
        "id": "737e139c98fe1188",
        "type": "comment",
        "z": "4f2c9a5f536c026c",
        "name": "open door request http://sim-les.quicktron.eu:1880/door/command/open",
        "info": "{\n  \"requestId\": \"\", // uuid\n  \"doorCode\": \"\",  // 设备编码\n  \"command\": \"\"    // 暂时用不上 开门接口会传入OPEN，关门接口会传入CLOSE\n}",
        "x": 670,
        "y": 300,
        "wires": []
    },
    {
        "id": "191cfc4b4055026d",
        "type": "function",
        "z": "4f2c9a5f536c026c",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nnode.log(msg);\n\nflow.set('isLoadingValue', null);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 840,
        "wires": [
            [
                "0b947fe021bd601d"
            ]
        ]
    },
    {
        "id": "0b947fe021bd601d",
        "type": "http response",
        "z": "4f2c9a5f536c026c",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1140,
        "y": 840,
        "wires": []
    },
    {
        "id": "ad324bcd2a7a7fdb",
        "type": "function",
        "z": "4f2c9a5f536c026c",
        "name": "save close door arg",
        "func": "msg.parameter=msg.payload\nflow.set(\"closeArg\",msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 840,
        "wires": [
            [
                "191cfc4b4055026d"
            ]
        ]
    },
    {
        "id": "3e1f78cc8598829a",
        "type": "function",
        "z": "4f2c9a5f536c026c",
        "name": "save request arg (c)",
        "func": "\nvar response=msg.payload\nresponse.actionCode='OPEN'\nnode.warn(response)\n//151 IP\nif (response.doorCode != undefined){\n    flow.set(\"openArg\", response)\n    return [msg,null,null,null,null,null,null,null,null]\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "c6eb8019db72a15b",
        "type": "function",
        "z": "4f2c9a5f536c026c",
        "name": "save close door args",
        "func": "\nmsg.parameter = msg.payload\nnode.warn(\"close door request\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 940,
        "wires": [
            [
                "ad324bcd2a7a7fdb",
                "5c9242469427c614",
                "6f7f4b893363c8cf"
            ]
        ]
    },
    {
        "id": "c7e188988d038a60",
        "type": "function",
        "z": "4f2c9a5f536c026c",
        "name": "save open door args",
        "func": "msg.parameter = msg.payload\n//node.warn(\"receive open door args\");\n//node.warn(msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 340,
        "wires": [
            [
                "3e1f78cc8598829a",
                "7cc82a9101fada26"
            ]
        ]
    },
    {
        "id": "1eefdc1ce1e461d4",
        "type": "inject",
        "z": "4f2c9a5f536c026c",
        "name": "Manual Overrite Pick/DropEnable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 550,
        "y": 600,
        "wires": [
            [
                "6169f64b1fa75201"
            ]
        ]
    },
    {
        "id": "6ce8618294fed39c",
        "type": "http request",
        "z": "4f2c9a5f536c026c",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/door/command-finish",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1270,
        "y": 580,
        "wires": [
            [
                "a8cd7e9112bc13b8"
            ]
        ]
    },
    {
        "id": "6169f64b1fa75201",
        "type": "function",
        "z": "4f2c9a5f536c026c",
        "name": "get saved request arg",
        "func": "//读取modbus的值,只有读到了1,并且有当前请求开门的参数的时候该流程继续往下走\nvar readData=msg.payload\nreadData=[true]\nvar requestArg=flow.get(\"openArg\")\n\nif (requestArg != undefined && requestArg != null && requestArg.requestId!=undefined)\n{\n    //表明当前门开了\n    if (readData && readData != undefined && readData[0] == true) \n    {\n        //构造请求的参数\n        msg.payload=requestArg\n        flow.set(\"openArg\", null)\n        return msg\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 580,
        "wires": [
            [
                "6ce8618294fed39c"
            ]
        ]
    },
    {
        "id": "a8cd7e9112bc13b8",
        "type": "function",
        "z": "4f2c9a5f536c026c",
        "name": "rcs response",
        "func": "var response=msg.payload\n\n\nnode.warn(response)\nif(response!=undefined && response!=null && response.success==true){\n    global.set(\"openArg\",null)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "72cc99de885473f9",
        "type": "function",
        "z": "4f2c9a5f536c026c",
        "name": "AutoOut (c)",
        "func": "// recieve openArg\nvar requestArg = flow.get(\"openArg\")\n// array of location codes\nvar staticValues = ['0533'];\n// Parsed location of all AMRs\nvar pointCodes = global.get(\"pointCodes\") || [];\n\n// chceck if there is data in openArg\nif (requestArg != undefined && requestArg != null && requestArg.requestId != undefined) {\n    // compare if any amr is in location\n    if (staticValues.some(value => pointCodes.includes(value))) {\n        // send command for ato out of location\n        msg.payload = requestArg;\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 700,
        "wires": [
            [
                "6169f64b1fa75201"
            ]
        ]
    },
    {
        "id": "88d4cc7f7c703ec2",
        "type": "inject",
        "z": "4f2c9a5f536c026c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 430,
        "y": 700,
        "wires": [
            [
                "72cc99de885473f9"
            ]
        ]
    },
    {
        "id": "f9fb121da7c5777e",
        "type": "comment",
        "z": "4f2c9a5f536c026c",
        "name": "Auto out",
        "info": "",
        "x": 420,
        "y": 660,
        "wires": []
    },
    {
        "id": "747fe152847bc897",
        "type": "function",
        "z": "4f2c9a5f536c026c",
        "name": "Reset Flow Values",
        "func": "//flow.set(\"PickBusy\", true)\nflow.set(\"PickRequest\", false)\nflow.set(\"DropRequest\", false)\nflow.set('isLoadingValue', null);\nnode.warn('reset values')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "6a3c86c40f1e6189",
        "type": "comment",
        "z": "4f2c9a5f536c026c",
        "name": "Send Pick/Drop Request",
        "info": "",
        "x": 1530,
        "y": 180,
        "wires": []
    },
    {
        "id": "7354300c3467c96a",
        "type": "comment",
        "z": "4f2c9a5f536c026c",
        "name": "Reset Pick/Drop Request",
        "info": "",
        "x": 1050,
        "y": 900,
        "wires": []
    },
    {
        "id": "8dfeafe23b640cdd",
        "type": "link in",
        "z": "4f2c9a5f536c026c",
        "name": "Open_Stand_6",
        "links": [
            "9bed9e5036306917"
        ],
        "x": 645,
        "y": 340,
        "wires": [
            [
                "c7e188988d038a60"
            ]
        ]
    },
    {
        "id": "b391eba196a46d61",
        "type": "link in",
        "z": "4f2c9a5f536c026c",
        "name": "Close_Stand_6",
        "links": [
            "ce310c140816e172"
        ],
        "x": 255,
        "y": 940,
        "wires": [
            [
                "c6eb8019db72a15b"
            ]
        ]
    },
    {
        "id": "ec969d7ed85ac476",
        "type": "function",
        "z": "4f2c9a5f536c026c",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 140,
        "wires": [
            [
                "f921fe4641e9c54a",
                "25c2b4437d5db11d"
            ]
        ]
    },
    {
        "id": "f921fe4641e9c54a",
        "type": "http response",
        "z": "4f2c9a5f536c026c",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1480,
        "y": 140,
        "wires": []
    },
    {
        "id": "c07b65995088a7e6",
        "type": "function",
        "z": "4f2c9a5f536c026c",
        "name": "Check and save loaded status",
        "func": "// Extract isLoading value from the command property in the payload\nvar isLoadingValue = msg.payload.isLoading;\n\n// Save the isLoading value in a flow variable\nflow.set('isLoadingValue', isLoadingValue);\n\n// Pass the original message to the next node\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 140,
        "wires": [
            [
                "ec969d7ed85ac476"
            ]
        ]
    },
    {
        "id": "11437685e6981aec",
        "type": "function",
        "z": "4f2c9a5f536c026c",
        "name": "Set DropBusy",
        "func": "flow.set(\"DropBusy\", true)\nnode.warn(\"DropBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 500,
        "wires": [
            [
                "48259c0d44ad92f3"
            ]
        ]
    },
    {
        "id": "c3b82f2f55363d77",
        "type": "function",
        "z": "4f2c9a5f536c026c",
        "name": "Set PickBusy",
        "func": "flow.set(\"PickBusy\", true)\nnode.warn(\"PickBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 540,
        "wires": [
            [
                "f50387c153124820"
            ]
        ]
    },
    {
        "id": "7f207bef0f59372b",
        "type": "http request",
        "z": "4f2c9a5f536c026c",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/rcs/equipment/feedback",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 890,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "4a89dc48510d56d5",
        "type": "link in",
        "z": "4f2c9a5f536c026c",
        "name": "link in 11",
        "links": [
            "3d8fd5f136c133be"
        ],
        "x": 645,
        "y": 140,
        "wires": [
            [
                "7f207bef0f59372b",
                "c07b65995088a7e6"
            ]
        ]
    },
    {
        "id": "f50387c153124820",
        "type": "function",
        "z": "4f2c9a5f536c026c",
        "name": "OPC msg PickBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "67f205da0a13f4c7",
        "type": "function",
        "z": "4f2c9a5f536c026c",
        "name": "Reset Pick Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "3efa8f305b19c6db",
        "type": "function",
        "z": "4f2c9a5f536c026c",
        "name": "Reset Pick Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "5c9242469427c614",
        "type": "function",
        "z": "4f2c9a5f536c026c",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") != null) \n{\n    // If true, send only the first value to the next node\n    node.warn('reset pick/drop')\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 940,
        "wires": [
            [
                "747fe152847bc897",
                "67f205da0a13f4c7",
                "01a0b293158b2b98"
            ]
        ]
    },
    {
        "id": "6f7f4b893363c8cf",
        "type": "function",
        "z": "4f2c9a5f536c026c",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") === null) \n{\n    // If true, send only the first value to the next node\n    flow.set(\"PickBusy\", false);\n    flow.set(\"DropBusy\", false);\n    node.warn(\"Reset Pick/Drop Busy\");\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1080,
        "wires": [
            [
                "3efa8f305b19c6db",
                "07f771f819895510"
            ]
        ]
    },
    {
        "id": "48259c0d44ad92f3",
        "type": "function",
        "z": "4f2c9a5f536c026c",
        "name": "OPC msg DropBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "07f771f819895510",
        "type": "function",
        "z": "4f2c9a5f536c026c",
        "name": "Resset Drop Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "25c2b4437d5db11d",
        "type": "function",
        "z": "4f2c9a5f536c026c",
        "name": "Pick/DropRequest (c)",
        "func": "if (flow.get(\"isLoadingValue\") === true) \n{\n    flow.set(\"DropRequest\", true)\n    node.warn(\"Drop Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"DropRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\nelse if (flow.get(\"isLoadingValue\") === false) {\n    flow.set(\"PickRequest\", true)\n    node.warn(\"Pick Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"PickRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "ad7012abc6579970",
        "type": "inject",
        "z": "4f2c9a5f536c026c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 540,
        "y": 1220,
        "wires": [
            [
                "19c232ed6d5bcc3f"
            ]
        ]
    },
    {
        "id": "19c232ed6d5bcc3f",
        "type": "function",
        "z": "4f2c9a5f536c026c",
        "name": "function 118",
        "func": "// Get the values of the flow variables\nvar pickRequest = flow.get('PickRequest');\nvar dropRequest = flow.get('DropRequest');\nvar pickEnable = flow.get('PickEnable');\nvar dropEnable = flow.get('DropEnable');\nvar pickBusy = flow.get('PickBusy');\nvar dropBusy = flow.get('DropBusy');\nvar isLoading = flow.get('isLoadingValue');\n\n// Log the values for debugging\nnode.warn('PickRequest: ' + pickRequest);\nnode.warn('DropRequest: ' + dropRequest);\nnode.warn('PickEnable: ' + pickEnable);\nnode.warn('DropEnable: ' + dropEnable);\nnode.warn('PickBusy: ' + pickBusy);\nnode.warn('DropBusy: ' + dropBusy);\nnode.warn('isLoading: ' + isLoading);\n\n// Add your logic to check the values\n// For example, you can check if PickEnable is true and PickBusy is false\nif (pickEnable && !pickBusy) {\n    // Your logic here\n    node.warn('Pick is enabled and not busy');\n}\n\n// Optionally, you can set the payload of the message to convey information to the next nodes\nmsg.payload = 'Values checked successfully';\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1220,
        "wires": [
            [
                "4851417fe5621515"
            ]
        ]
    },
    {
        "id": "4851417fe5621515",
        "type": "debug",
        "z": "4f2c9a5f536c026c",
        "name": "debug 72",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 1220,
        "wires": []
    },
    {
        "id": "01a0b293158b2b98",
        "type": "function",
        "z": "4f2c9a5f536c026c",
        "name": "Reset Drop Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "2454bad0be1fcdb9",
        "type": "modbus-read",
        "z": "4f2c9a5f536c026c",
        "name": "",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Input",
        "adr": "00002",
        "quantity": "1",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "8afe91b60295333b",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 490,
        "y": 500,
        "wires": [
            [
                "96378561a391278a",
                "daa92b082239a2fa",
                "86ca186ff6948628"
            ],
            []
        ]
    },
    {
        "id": "96378561a391278a",
        "type": "function",
        "z": "4f2c9a5f536c026c",
        "name": "Check for DropEnable",
        "func": "// Assuming msg.payload is the array [ false, false, false, false, false, false, false, false ]\n\n// Extract the first value from the array\nvar firstValue = msg.payload[0];\n\n// Check if the first value is true\nif (firstValue === false && flow.get(\"isLoadingValue\") === true && flow.get(\"DropRequest\") === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Drop Enable\")\n    return msg;\n}\n else {\n    // If false, do nothing (no need to return anything)\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 500,
        "wires": [
            [
                "11437685e6981aec",
                "6169f64b1fa75201"
            ]
        ]
    },
    {
        "id": "daa92b082239a2fa",
        "type": "function",
        "z": "4f2c9a5f536c026c",
        "name": "Check for PickEnable",
        "func": "var firstValue = msg.payload[0];\n\nif (firstValue === true && flow.get(\"isLoadingValue\") === false && flow.get('PickRequest') === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Pick Enable\")\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 540,
        "wires": [
            [
                "c3b82f2f55363d77",
                "6169f64b1fa75201"
            ]
        ]
    },
    {
        "id": "86ca186ff6948628",
        "type": "subflow:4cc4a3bd7d66d150",
        "z": "4f2c9a5f536c026c",
        "name": "",
        "env": [
            {
                "name": "OPC_Item",
                "value": "ns=3;s=\"AMR_Comm\".\"MA_ID_06\"",
                "type": "str"
            }
        ],
        "x": 700,
        "y": 460,
        "wires": [
            [
                "d1f0aa15684a0b21"
            ]
        ]
    },
    {
        "id": "d1f0aa15684a0b21",
        "type": "link out",
        "z": "4f2c9a5f536c026c",
        "name": "link out 12",
        "mode": "link",
        "links": [
            "20f3b1b189a355ab"
        ],
        "x": 845,
        "y": 460,
        "wires": []
    },
    {
        "id": "5ceddfe69e107bc2",
        "type": "function",
        "z": "b992f563126ed998",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 260,
        "wires": [
            [
                "b1bfa5ce312e5a64"
            ]
        ]
    },
    {
        "id": "b1bfa5ce312e5a64",
        "type": "http response",
        "z": "b992f563126ed998",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1320,
        "y": 260,
        "wires": []
    },
    {
        "id": "1415595bca2bba8e",
        "type": "comment",
        "z": "b992f563126ed998",
        "name": "open door request http://sim-les.quicktron.eu:1880/door/command/open",
        "info": "{\n  \"requestId\": \"\", // uuid\n  \"doorCode\": \"\",  // 设备编码\n  \"command\": \"\"    // 暂时用不上 开门接口会传入OPEN，关门接口会传入CLOSE\n}",
        "x": 670,
        "y": 280,
        "wires": []
    },
    {
        "id": "7fe20645803ea7b4",
        "type": "function",
        "z": "b992f563126ed998",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nnode.log(msg);\n\nflow.set('isLoadingValue', null);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 820,
        "wires": [
            [
                "1c8c2a5d185c8d16"
            ]
        ]
    },
    {
        "id": "1c8c2a5d185c8d16",
        "type": "http response",
        "z": "b992f563126ed998",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1140,
        "y": 820,
        "wires": []
    },
    {
        "id": "b1fdc127f23c3611",
        "type": "function",
        "z": "b992f563126ed998",
        "name": "save close door arg",
        "func": "msg.parameter=msg.payload\nflow.set(\"closeArg\",msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 820,
        "wires": [
            [
                "7fe20645803ea7b4"
            ]
        ]
    },
    {
        "id": "d6e24fa6809e8a95",
        "type": "function",
        "z": "b992f563126ed998",
        "name": "save request arg (c)",
        "func": "\nvar response=msg.payload\nresponse.actionCode='OPEN'\nnode.warn(response)\n//151 IP\nif (response.doorCode != undefined){\n    flow.set(\"openArg\", response)\n    return [msg,null,null,null,null,null,null,null,null]\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "07e5db6a9b8c3095",
        "type": "function",
        "z": "b992f563126ed998",
        "name": "save close door args",
        "func": "\nmsg.parameter = msg.payload\nnode.warn(\"close door request\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 920,
        "wires": [
            [
                "b1fdc127f23c3611",
                "93a50d2084b03f47",
                "c9bb6f21167f34f2"
            ]
        ]
    },
    {
        "id": "a506e832fc66a868",
        "type": "function",
        "z": "b992f563126ed998",
        "name": "save open door args",
        "func": "msg.parameter = msg.payload\n//node.warn(\"receive open door args\");\n//node.warn(msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 320,
        "wires": [
            [
                "d6e24fa6809e8a95",
                "5ceddfe69e107bc2"
            ]
        ]
    },
    {
        "id": "6ed133ead18d8f37",
        "type": "inject",
        "z": "b992f563126ed998",
        "name": "Manual Overrite Pick/DropEnable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 550,
        "y": 580,
        "wires": [
            [
                "4ee6a908748e0781"
            ]
        ]
    },
    {
        "id": "13933da8181fe7ca",
        "type": "http request",
        "z": "b992f563126ed998",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/door/command-finish",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1270,
        "y": 560,
        "wires": [
            [
                "6c6fa8e8afe9c551"
            ]
        ]
    },
    {
        "id": "4ee6a908748e0781",
        "type": "function",
        "z": "b992f563126ed998",
        "name": "get saved request arg",
        "func": "//读取modbus的值,只有读到了1,并且有当前请求开门的参数的时候该流程继续往下走\nvar readData=msg.payload\nreadData=[true]\nvar requestArg=flow.get(\"openArg\")\n\nif (requestArg != undefined && requestArg != null && requestArg.requestId!=undefined)\n{\n    //表明当前门开了\n    if (readData && readData != undefined && readData[0] == true) \n    {\n        //构造请求的参数\n        msg.payload=requestArg\n        flow.set(\"openArg\", null)\n        return msg\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 560,
        "wires": [
            [
                "13933da8181fe7ca"
            ]
        ]
    },
    {
        "id": "6c6fa8e8afe9c551",
        "type": "function",
        "z": "b992f563126ed998",
        "name": "rcs response",
        "func": "var response=msg.payload\n\n\nnode.warn(response)\nif(response!=undefined && response!=null && response.success==true){\n    global.set(\"openArg\",null)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "195f783a6bf2abdc",
        "type": "function",
        "z": "b992f563126ed998",
        "name": "AutoOut (c)",
        "func": "// recieve openArg\nvar requestArg = flow.get(\"openArg\")\n// array of location codes\nvar staticValues = ['0457'];\n// Parsed location of all AMRs\nvar pointCodes = global.get(\"pointCodes\") || [];\n\n// chceck if there is data in openArg\nif (requestArg != undefined && requestArg != null && requestArg.requestId != undefined) {\n    // compare if any amr is in location\n    if (staticValues.some(value => pointCodes.includes(value))) {\n        // send command for ato out of location\n        msg.payload = requestArg;\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 680,
        "wires": [
            [
                "4ee6a908748e0781"
            ]
        ]
    },
    {
        "id": "40c4e8c19e2e3f6b",
        "type": "inject",
        "z": "b992f563126ed998",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 430,
        "y": 680,
        "wires": [
            [
                "195f783a6bf2abdc"
            ]
        ]
    },
    {
        "id": "9925ce020130075c",
        "type": "comment",
        "z": "b992f563126ed998",
        "name": "Auto out",
        "info": "",
        "x": 420,
        "y": 640,
        "wires": []
    },
    {
        "id": "17cb055d1b690ab5",
        "type": "function",
        "z": "b992f563126ed998",
        "name": "Reset Flow Values",
        "func": "//flow.set(\"PickBusy\", true)\nflow.set(\"PickRequest\", false)\nflow.set(\"DropRequest\", false)\nflow.set('isLoadingValue', null);\nnode.warn('reset values')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "16a800a5c1fc881d",
        "type": "comment",
        "z": "b992f563126ed998",
        "name": "Send Pick/Drop Request",
        "info": "",
        "x": 1530,
        "y": 160,
        "wires": []
    },
    {
        "id": "dca125e92228eead",
        "type": "comment",
        "z": "b992f563126ed998",
        "name": "Reset Pick/Drop Request",
        "info": "",
        "x": 1050,
        "y": 880,
        "wires": []
    },
    {
        "id": "18e1c58ed32b8c83",
        "type": "link in",
        "z": "b992f563126ed998",
        "name": "Open_Stand_6",
        "links": [
            "22dc5224a2588380"
        ],
        "x": 645,
        "y": 320,
        "wires": [
            [
                "a506e832fc66a868"
            ]
        ]
    },
    {
        "id": "a4747d33ad8008e9",
        "type": "link in",
        "z": "b992f563126ed998",
        "name": "Close_Stand_6",
        "links": [
            "f4de65e26efa958e"
        ],
        "x": 255,
        "y": 920,
        "wires": [
            [
                "07e5db6a9b8c3095"
            ]
        ]
    },
    {
        "id": "2a778fad7f63ea9a",
        "type": "function",
        "z": "b992f563126ed998",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 120,
        "wires": [
            [
                "8f60f2389f883950",
                "111554dd50cb49da"
            ]
        ]
    },
    {
        "id": "8f60f2389f883950",
        "type": "http response",
        "z": "b992f563126ed998",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1480,
        "y": 120,
        "wires": []
    },
    {
        "id": "3bedf50009a2f4b2",
        "type": "function",
        "z": "b992f563126ed998",
        "name": "Check and save loaded status",
        "func": "// Extract isLoading value from the command property in the payload\nvar isLoadingValue = msg.payload.isLoading;\n\n// Save the isLoading value in a flow variable\nflow.set('isLoadingValue', isLoadingValue);\n\n// Pass the original message to the next node\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 120,
        "wires": [
            [
                "2a778fad7f63ea9a"
            ]
        ]
    },
    {
        "id": "97dde7853c3bdbbb",
        "type": "function",
        "z": "b992f563126ed998",
        "name": "Set DropBusy",
        "func": "flow.set(\"DropBusy\", true)\nnode.warn(\"DropBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 480,
        "wires": [
            [
                "ace4fa083c02c73c"
            ]
        ]
    },
    {
        "id": "4e970e877c5bc2bc",
        "type": "function",
        "z": "b992f563126ed998",
        "name": "Set PickBusy",
        "func": "flow.set(\"PickBusy\", true)\nnode.warn(\"PickBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 520,
        "wires": [
            [
                "42b5378874bc93dd"
            ]
        ]
    },
    {
        "id": "b72265699fb6cef1",
        "type": "http request",
        "z": "b992f563126ed998",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/rcs/equipment/feedback",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 890,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "b4c4bf83ecb8eadd",
        "type": "link in",
        "z": "b992f563126ed998",
        "name": "link in 10",
        "links": [
            "b24555ae818d58ea"
        ],
        "x": 645,
        "y": 120,
        "wires": [
            [
                "b72265699fb6cef1",
                "3bedf50009a2f4b2"
            ]
        ]
    },
    {
        "id": "42b5378874bc93dd",
        "type": "function",
        "z": "b992f563126ed998",
        "name": "OPC msg PickBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "8d24a041582348cb",
        "type": "function",
        "z": "b992f563126ed998",
        "name": "Reset Pick Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "6d87ecfecbbd392a",
        "type": "function",
        "z": "b992f563126ed998",
        "name": "Reset Pick Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "93a50d2084b03f47",
        "type": "function",
        "z": "b992f563126ed998",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") != null) \n{\n    // If true, send only the first value to the next node\n    node.warn('reset pick/drop')\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 920,
        "wires": [
            [
                "17cb055d1b690ab5",
                "8d24a041582348cb",
                "612e66e842482124"
            ]
        ]
    },
    {
        "id": "c9bb6f21167f34f2",
        "type": "function",
        "z": "b992f563126ed998",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") === null) \n{\n    // If true, send only the first value to the next node\n    flow.set(\"PickBusy\", false);\n    flow.set(\"DropBusy\", false);\n    node.warn(\"Reset Pick/Drop Busy\");\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1060,
        "wires": [
            [
                "6d87ecfecbbd392a",
                "f6417e04e1f4f0db"
            ]
        ]
    },
    {
        "id": "ace4fa083c02c73c",
        "type": "function",
        "z": "b992f563126ed998",
        "name": "OPC msg DropBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "f6417e04e1f4f0db",
        "type": "function",
        "z": "b992f563126ed998",
        "name": "Resset Drop Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "111554dd50cb49da",
        "type": "function",
        "z": "b992f563126ed998",
        "name": "Pick/DropRequest (c)",
        "func": "if (flow.get(\"isLoadingValue\") === true) \n{\n    flow.set(\"DropRequest\", true)\n    node.warn(\"Drop Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"DropRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\nelse if (flow.get(\"isLoadingValue\") === false) {\n    flow.set(\"PickRequest\", true)\n    node.warn(\"Pick Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"PickRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "4574c0f6a8963081",
        "type": "inject",
        "z": "b992f563126ed998",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 540,
        "y": 1200,
        "wires": [
            [
                "e51b9cdf553870ef"
            ]
        ]
    },
    {
        "id": "e51b9cdf553870ef",
        "type": "function",
        "z": "b992f563126ed998",
        "name": "function 117",
        "func": "// Get the values of the flow variables\nvar pickRequest = flow.get('PickRequest');\nvar dropRequest = flow.get('DropRequest');\nvar pickEnable = flow.get('PickEnable');\nvar dropEnable = flow.get('DropEnable');\nvar pickBusy = flow.get('PickBusy');\nvar dropBusy = flow.get('DropBusy');\nvar isLoading = flow.get('isLoadingValue');\n\n// Log the values for debugging\nnode.warn('PickRequest: ' + pickRequest);\nnode.warn('DropRequest: ' + dropRequest);\nnode.warn('PickEnable: ' + pickEnable);\nnode.warn('DropEnable: ' + dropEnable);\nnode.warn('PickBusy: ' + pickBusy);\nnode.warn('DropBusy: ' + dropBusy);\nnode.warn('isLoading: ' + isLoading);\n\n// Add your logic to check the values\n// For example, you can check if PickEnable is true and PickBusy is false\nif (pickEnable && !pickBusy) {\n    // Your logic here\n    node.warn('Pick is enabled and not busy');\n}\n\n// Optionally, you can set the payload of the message to convey information to the next nodes\nmsg.payload = 'Values checked successfully';\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1200,
        "wires": [
            [
                "eb5490d82862efa1"
            ]
        ]
    },
    {
        "id": "eb5490d82862efa1",
        "type": "debug",
        "z": "b992f563126ed998",
        "name": "debug 70",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 1200,
        "wires": []
    },
    {
        "id": "612e66e842482124",
        "type": "function",
        "z": "b992f563126ed998",
        "name": "Reset Drop Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "07d6daab252993cb",
        "type": "modbus-read",
        "z": "b992f563126ed998",
        "name": "",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Input",
        "adr": "00001",
        "quantity": "1",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "8afe91b60295333b",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 490,
        "y": 480,
        "wires": [
            [
                "5acc89c417a122a1",
                "c7beb528996ba381",
                "5e6af2c2f51e559a"
            ],
            []
        ]
    },
    {
        "id": "5acc89c417a122a1",
        "type": "function",
        "z": "b992f563126ed998",
        "name": "Check for DropEnable",
        "func": "// Assuming msg.payload is the array [ false, false, false, false, false, false, false, false ]\n\n// Extract the first value from the array\nvar firstValue = msg.payload[0];\n\n// Check if the first value is true\nif (firstValue === false && flow.get(\"isLoadingValue\") === true && flow.get(\"DropRequest\") === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Drop Enable\")\n    return msg;\n}\n else {\n    // If false, do nothing (no need to return anything)\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 480,
        "wires": [
            [
                "97dde7853c3bdbbb",
                "4ee6a908748e0781"
            ]
        ]
    },
    {
        "id": "c7beb528996ba381",
        "type": "function",
        "z": "b992f563126ed998",
        "name": "Check for PickEnable",
        "func": "var firstValue = msg.payload[0];\n\nif (firstValue === true && flow.get(\"isLoadingValue\") === false && flow.get('PickRequest') === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Pick Enable\")\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 520,
        "wires": [
            [
                "4e970e877c5bc2bc",
                "4ee6a908748e0781"
            ]
        ]
    },
    {
        "id": "5e6af2c2f51e559a",
        "type": "subflow:4cc4a3bd7d66d150",
        "z": "b992f563126ed998",
        "name": "",
        "env": [
            {
                "name": "OPC_Item",
                "value": "ns=3;s=\"AMR_Comm\".\"MA_ID_07\"",
                "type": "str"
            }
        ],
        "x": 700,
        "y": 440,
        "wires": [
            [
                "63493dc9c9a5fc79"
            ]
        ]
    },
    {
        "id": "63493dc9c9a5fc79",
        "type": "link out",
        "z": "b992f563126ed998",
        "name": "link out 13",
        "mode": "link",
        "links": [
            "20f3b1b189a355ab"
        ],
        "x": 845,
        "y": 440,
        "wires": []
    },
    {
        "id": "50e50483536d4eb8",
        "type": "function",
        "z": "6b85e06aaa6fc609",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 260,
        "wires": [
            [
                "ddd139150eddc508"
            ]
        ]
    },
    {
        "id": "ddd139150eddc508",
        "type": "http response",
        "z": "6b85e06aaa6fc609",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1440,
        "y": 260,
        "wires": []
    },
    {
        "id": "a8f8463bc72f7e17",
        "type": "comment",
        "z": "6b85e06aaa6fc609",
        "name": "open door request http://sim-les.quicktron.eu:1880/door/command/open",
        "info": "{\n  \"requestId\": \"\", // uuid\n  \"doorCode\": \"\",  // 设备编码\n  \"command\": \"\"    // 暂时用不上 开门接口会传入OPEN，关门接口会传入CLOSE\n}",
        "x": 790,
        "y": 280,
        "wires": []
    },
    {
        "id": "dd89aec325d909d5",
        "type": "function",
        "z": "6b85e06aaa6fc609",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nnode.log(msg);\n\nflow.set('isLoadingValue', null);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 820,
        "wires": [
            [
                "d9d3a66b20d6d6e2"
            ]
        ]
    },
    {
        "id": "d9d3a66b20d6d6e2",
        "type": "http response",
        "z": "6b85e06aaa6fc609",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1260,
        "y": 820,
        "wires": []
    },
    {
        "id": "c6250f9b66ce73dd",
        "type": "function",
        "z": "6b85e06aaa6fc609",
        "name": "save close door arg",
        "func": "msg.parameter=msg.payload\nflow.set(\"closeArg\",msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 820,
        "wires": [
            [
                "dd89aec325d909d5"
            ]
        ]
    },
    {
        "id": "932420152eb5d958",
        "type": "function",
        "z": "6b85e06aaa6fc609",
        "name": "save request arg (c)",
        "func": "\nvar response=msg.payload\nresponse.actionCode='OPEN'\nnode.warn(response)\n//151 IP\nif (response.doorCode != undefined){\n    flow.set(\"openArg\", response)\n    return [msg,null,null,null,null,null,null,null,null]\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "52ddb25e5ade3a69",
        "type": "function",
        "z": "6b85e06aaa6fc609",
        "name": "save close door args",
        "func": "\nmsg.parameter = msg.payload\nnode.warn(\"close door request\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 920,
        "wires": [
            [
                "c6250f9b66ce73dd",
                "cfdf68a15744c7e2",
                "876261ad04b32f93"
            ]
        ]
    },
    {
        "id": "55c2ce603179d1ce",
        "type": "function",
        "z": "6b85e06aaa6fc609",
        "name": "save open door args",
        "func": "msg.parameter = msg.payload\n//node.warn(\"receive open door args\");\n//node.warn(msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 320,
        "wires": [
            [
                "932420152eb5d958",
                "50e50483536d4eb8"
            ]
        ]
    },
    {
        "id": "8cd447985c66209c",
        "type": "inject",
        "z": "6b85e06aaa6fc609",
        "name": "Manual Overrite Pick/DropEnable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 670,
        "y": 580,
        "wires": [
            [
                "63de9a11ef167d86"
            ]
        ]
    },
    {
        "id": "f6fa7bd2bdc6fb09",
        "type": "http request",
        "z": "6b85e06aaa6fc609",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/door/command-finish",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1390,
        "y": 560,
        "wires": [
            [
                "e2ad70fedbef07e9"
            ]
        ]
    },
    {
        "id": "63de9a11ef167d86",
        "type": "function",
        "z": "6b85e06aaa6fc609",
        "name": "get saved request arg",
        "func": "//读取modbus的值,只有读到了1,并且有当前请求开门的参数的时候该流程继续往下走\nvar readData=msg.payload\nreadData=[true]\nvar requestArg=flow.get(\"openArg\")\n\nif (requestArg != undefined && requestArg != null && requestArg.requestId!=undefined)\n{\n    //表明当前门开了\n    if (readData && readData != undefined && readData[0] == true) \n    {\n        //构造请求的参数\n        msg.payload=requestArg\n        flow.set(\"openArg\", null)\n        return msg\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 560,
        "wires": [
            [
                "f6fa7bd2bdc6fb09"
            ]
        ]
    },
    {
        "id": "e2ad70fedbef07e9",
        "type": "function",
        "z": "6b85e06aaa6fc609",
        "name": "rcs response",
        "func": "var response=msg.payload\n\n\nnode.warn(response)\nif(response!=undefined && response!=null && response.success==true){\n    global.set(\"openArg\",null)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "a46575582ba9c56c",
        "type": "function",
        "z": "6b85e06aaa6fc609",
        "name": "AutoOut (c)",
        "func": "// recieve openArg\nvar requestArg = flow.get(\"openArg\")\n// array of location codes\nvar staticValues = ['0458'];\n// Parsed location of all AMRs\nvar pointCodes = global.get(\"pointCodes\") || [];\n\n// chceck if there is data in openArg\nif (requestArg != undefined && requestArg != null && requestArg.requestId != undefined) {\n    // compare if any amr is in location\n    if (staticValues.some(value => pointCodes.includes(value))) {\n        // send command for ato out of location\n        msg.payload = requestArg;\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 680,
        "wires": [
            [
                "63de9a11ef167d86"
            ]
        ]
    },
    {
        "id": "8d7137660bc6a884",
        "type": "inject",
        "z": "6b85e06aaa6fc609",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 550,
        "y": 680,
        "wires": [
            [
                "a46575582ba9c56c"
            ]
        ]
    },
    {
        "id": "af1c3eda793d1a96",
        "type": "comment",
        "z": "6b85e06aaa6fc609",
        "name": "Auto out",
        "info": "",
        "x": 540,
        "y": 640,
        "wires": []
    },
    {
        "id": "69c45fec55441cbb",
        "type": "function",
        "z": "6b85e06aaa6fc609",
        "name": "Reset Flow Values",
        "func": "//flow.set(\"PickBusy\", true)\nflow.set(\"PickRequest\", false)\nflow.set(\"DropRequest\", false)\nflow.set('isLoadingValue', null);\nnode.warn('reset values')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "ac170a2ac98d2fa0",
        "type": "comment",
        "z": "6b85e06aaa6fc609",
        "name": "Send Pick/Drop Request",
        "info": "",
        "x": 1650,
        "y": 160,
        "wires": []
    },
    {
        "id": "983c3323c8721c63",
        "type": "comment",
        "z": "6b85e06aaa6fc609",
        "name": "Reset Pick/Drop Request",
        "info": "",
        "x": 1170,
        "y": 880,
        "wires": []
    },
    {
        "id": "7689a32b9306ad1b",
        "type": "link in",
        "z": "6b85e06aaa6fc609",
        "name": "Open_Stand_6",
        "links": [
            "64cd36c299562c22"
        ],
        "x": 765,
        "y": 320,
        "wires": [
            [
                "55c2ce603179d1ce"
            ]
        ]
    },
    {
        "id": "41939549c1e3ac9d",
        "type": "link in",
        "z": "6b85e06aaa6fc609",
        "name": "Close_Stand_6",
        "links": [
            "b837156845c4dc30"
        ],
        "x": 375,
        "y": 920,
        "wires": [
            [
                "52ddb25e5ade3a69"
            ]
        ]
    },
    {
        "id": "1e21718394dd9679",
        "type": "function",
        "z": "6b85e06aaa6fc609",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 120,
        "wires": [
            [
                "6d1b22f4c297a2c5",
                "c046c6cc17d92936"
            ]
        ]
    },
    {
        "id": "6d1b22f4c297a2c5",
        "type": "http response",
        "z": "6b85e06aaa6fc609",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1600,
        "y": 120,
        "wires": []
    },
    {
        "id": "93e011101169270e",
        "type": "function",
        "z": "6b85e06aaa6fc609",
        "name": "Check and save loaded status",
        "func": "// Extract isLoading value from the command property in the payload\nvar isLoadingValue = msg.payload.isLoading;\n\n// Save the isLoading value in a flow variable\nflow.set('isLoadingValue', isLoadingValue);\n\n// Pass the original message to the next node\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 120,
        "wires": [
            [
                "1e21718394dd9679"
            ]
        ]
    },
    {
        "id": "8d0e4b2a29869a20",
        "type": "function",
        "z": "6b85e06aaa6fc609",
        "name": "Set DropBusy",
        "func": "flow.set(\"DropBusy\", true)\nnode.warn(\"DropBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 480,
        "wires": [
            [
                "7820f78619ef04e5"
            ]
        ]
    },
    {
        "id": "29ec3a9dd8418cb1",
        "type": "function",
        "z": "6b85e06aaa6fc609",
        "name": "Set PickBusy",
        "func": "flow.set(\"PickBusy\", true)\nnode.warn(\"PickBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 520,
        "wires": [
            [
                "bf932753736c009d"
            ]
        ]
    },
    {
        "id": "9e0c289f6e736103",
        "type": "http request",
        "z": "6b85e06aaa6fc609",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/rcs/equipment/feedback",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1010,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "894cc1615087a534",
        "type": "link in",
        "z": "6b85e06aaa6fc609",
        "name": "link in 9",
        "links": [
            "2a39e2cacbbdbb08"
        ],
        "x": 765,
        "y": 120,
        "wires": [
            [
                "9e0c289f6e736103",
                "93e011101169270e"
            ]
        ]
    },
    {
        "id": "bf932753736c009d",
        "type": "function",
        "z": "6b85e06aaa6fc609",
        "name": "OPC msg PickBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "94cc00fb99216f53",
        "type": "function",
        "z": "6b85e06aaa6fc609",
        "name": "Reset Pick Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "8c14e819f4a2f060",
        "type": "function",
        "z": "6b85e06aaa6fc609",
        "name": "Reset Pick Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "cfdf68a15744c7e2",
        "type": "function",
        "z": "6b85e06aaa6fc609",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") != null) \n{\n    // If true, send only the first value to the next node\n    node.warn('reset pick/drop')\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 920,
        "wires": [
            [
                "69c45fec55441cbb",
                "94cc00fb99216f53",
                "675c6c818ad3e2fa"
            ]
        ]
    },
    {
        "id": "876261ad04b32f93",
        "type": "function",
        "z": "6b85e06aaa6fc609",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") === null) \n{\n    // If true, send only the first value to the next node\n    flow.set(\"PickBusy\", false);\n    flow.set(\"DropBusy\", false);\n    node.warn(\"Reset Pick/Drop Busy\");\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1060,
        "wires": [
            [
                "8c14e819f4a2f060",
                "64e71c71dba9ec60"
            ]
        ]
    },
    {
        "id": "7820f78619ef04e5",
        "type": "function",
        "z": "6b85e06aaa6fc609",
        "name": "OPC msg DropBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "64e71c71dba9ec60",
        "type": "function",
        "z": "6b85e06aaa6fc609",
        "name": "Resset Drop Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "c046c6cc17d92936",
        "type": "function",
        "z": "6b85e06aaa6fc609",
        "name": "Pick/DropRequest (c)",
        "func": "if (flow.get(\"isLoadingValue\") === true) \n{\n    flow.set(\"DropRequest\", true)\n    node.warn(\"Drop Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"DropRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\nelse if (flow.get(\"isLoadingValue\") === false) {\n    flow.set(\"PickRequest\", true)\n    node.warn(\"Pick Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"PickRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "d97ef5244cb524cb",
        "type": "inject",
        "z": "6b85e06aaa6fc609",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 660,
        "y": 1200,
        "wires": [
            [
                "cf172a2d0b0296cd"
            ]
        ]
    },
    {
        "id": "cf172a2d0b0296cd",
        "type": "function",
        "z": "6b85e06aaa6fc609",
        "name": "function 116",
        "func": "// Get the values of the flow variables\nvar pickRequest = flow.get('PickRequest');\nvar dropRequest = flow.get('DropRequest');\nvar pickEnable = flow.get('PickEnable');\nvar dropEnable = flow.get('DropEnable');\nvar pickBusy = flow.get('PickBusy');\nvar dropBusy = flow.get('DropBusy');\nvar isLoading = flow.get('isLoadingValue');\n\n// Log the values for debugging\nnode.warn('PickRequest: ' + pickRequest);\nnode.warn('DropRequest: ' + dropRequest);\nnode.warn('PickEnable: ' + pickEnable);\nnode.warn('DropEnable: ' + dropEnable);\nnode.warn('PickBusy: ' + pickBusy);\nnode.warn('DropBusy: ' + dropBusy);\nnode.warn('isLoading: ' + isLoading);\n\n// Add your logic to check the values\n// For example, you can check if PickEnable is true and PickBusy is false\nif (pickEnable && !pickBusy) {\n    // Your logic here\n    node.warn('Pick is enabled and not busy');\n}\n\n// Optionally, you can set the payload of the message to convey information to the next nodes\nmsg.payload = 'Values checked successfully';\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1200,
        "wires": [
            [
                "591b26521078ba17"
            ]
        ]
    },
    {
        "id": "591b26521078ba17",
        "type": "debug",
        "z": "6b85e06aaa6fc609",
        "name": "debug 68",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 1200,
        "wires": []
    },
    {
        "id": "675c6c818ad3e2fa",
        "type": "function",
        "z": "6b85e06aaa6fc609",
        "name": "Reset Drop Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "8738a81f507014e7",
        "type": "modbus-read",
        "z": "6b85e06aaa6fc609",
        "name": "",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Input",
        "adr": "00000",
        "quantity": "1",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "8afe91b60295333b",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 610,
        "y": 480,
        "wires": [
            [
                "f7bea60df71355d2",
                "18cb1a80a7bac79c",
                "f9bb099f9abf7163"
            ],
            []
        ]
    },
    {
        "id": "f7bea60df71355d2",
        "type": "function",
        "z": "6b85e06aaa6fc609",
        "name": "Check for DropEnable",
        "func": "// Assuming msg.payload is the array [ false, false, false, false, false, false, false, false ]\n\n// Extract the first value from the array\nvar firstValue = msg.payload[0];\n\n// Check if the first value is true\nif (firstValue === false && flow.get(\"isLoadingValue\") === true && flow.get(\"DropRequest\") === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Drop Enable\")\n    return msg;\n}\n else {\n    // If false, do nothing (no need to return anything)\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 480,
        "wires": [
            [
                "8d0e4b2a29869a20",
                "63de9a11ef167d86"
            ]
        ]
    },
    {
        "id": "18cb1a80a7bac79c",
        "type": "function",
        "z": "6b85e06aaa6fc609",
        "name": "Check for PickEnable",
        "func": "var firstValue = msg.payload[0];\n\nif (firstValue === true && flow.get(\"isLoadingValue\") === false && flow.get('PickRequest') === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Pick Enable\")\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 520,
        "wires": [
            [
                "29ec3a9dd8418cb1",
                "63de9a11ef167d86"
            ]
        ]
    },
    {
        "id": "f9bb099f9abf7163",
        "type": "subflow:4cc4a3bd7d66d150",
        "z": "6b85e06aaa6fc609",
        "name": "",
        "env": [
            {
                "name": "OPC_Item",
                "value": "ns=3;s=\"AMR_Comm\".\"MA_ID_08\"",
                "type": "str"
            }
        ],
        "x": 820,
        "y": 440,
        "wires": [
            [
                "29a91e327dbaec6c"
            ]
        ]
    },
    {
        "id": "29a91e327dbaec6c",
        "type": "link out",
        "z": "6b85e06aaa6fc609",
        "name": "link out 14",
        "mode": "link",
        "links": [
            "20f3b1b189a355ab"
        ],
        "x": 965,
        "y": 440,
        "wires": []
    },
    {
        "id": "348edea26c529f14",
        "type": "function",
        "z": "56e18617ca26db7a",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 240,
        "wires": [
            [
                "ceb31ed6130d99c2"
            ]
        ]
    },
    {
        "id": "ceb31ed6130d99c2",
        "type": "http response",
        "z": "56e18617ca26db7a",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1340,
        "y": 240,
        "wires": []
    },
    {
        "id": "aac9c7c0398adcd1",
        "type": "comment",
        "z": "56e18617ca26db7a",
        "name": "open door request http://sim-les.quicktron.eu:1880/door/command/open",
        "info": "{\n  \"requestId\": \"\", // uuid\n  \"doorCode\": \"\",  // 设备编码\n  \"command\": \"\"    // 暂时用不上 开门接口会传入OPEN，关门接口会传入CLOSE\n}",
        "x": 690,
        "y": 260,
        "wires": []
    },
    {
        "id": "099d4dac034ff132",
        "type": "function",
        "z": "56e18617ca26db7a",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nnode.log(msg);\n\nflow.set('isLoadingValue', null);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 800,
        "wires": [
            [
                "181a1bdb6fa44f36"
            ]
        ]
    },
    {
        "id": "181a1bdb6fa44f36",
        "type": "http response",
        "z": "56e18617ca26db7a",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1160,
        "y": 800,
        "wires": []
    },
    {
        "id": "19d59b9fffbc1de1",
        "type": "function",
        "z": "56e18617ca26db7a",
        "name": "save close door arg",
        "func": "msg.parameter=msg.payload\nflow.set(\"closeArg\",msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 800,
        "wires": [
            [
                "099d4dac034ff132"
            ]
        ]
    },
    {
        "id": "8415c1e82814a208",
        "type": "function",
        "z": "56e18617ca26db7a",
        "name": "save request arg (c)",
        "func": "\nvar response=msg.payload\nresponse.actionCode='OPEN'\nnode.warn(response)\n//151 IP\nif (response.doorCode != undefined){\n    flow.set(\"openArg\", response)\n    return [msg,null,null,null,null,null,null,null,null]\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "ddd42b608ac41274",
        "type": "function",
        "z": "56e18617ca26db7a",
        "name": "save close door args",
        "func": "\nmsg.parameter = msg.payload\nnode.warn(\"close door request\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 900,
        "wires": [
            [
                "19d59b9fffbc1de1",
                "1dcc88bba18b04f5",
                "af1b2e0bc4e9cfb4"
            ]
        ]
    },
    {
        "id": "4b06b33915401b09",
        "type": "function",
        "z": "56e18617ca26db7a",
        "name": "save open door args",
        "func": "msg.parameter = msg.payload\n//node.warn(\"receive open door args\");\n//node.warn(msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 300,
        "wires": [
            [
                "8415c1e82814a208",
                "348edea26c529f14"
            ]
        ]
    },
    {
        "id": "715efac48a3875dc",
        "type": "inject",
        "z": "56e18617ca26db7a",
        "name": "Manual Overrite Pick/DropEnable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 570,
        "y": 560,
        "wires": [
            [
                "d5b6db52827ec9a3"
            ]
        ]
    },
    {
        "id": "a2be8e976ebe1f0d",
        "type": "http request",
        "z": "56e18617ca26db7a",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/door/command-finish",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1290,
        "y": 540,
        "wires": [
            [
                "39dda7d355625e76"
            ]
        ]
    },
    {
        "id": "d5b6db52827ec9a3",
        "type": "function",
        "z": "56e18617ca26db7a",
        "name": "get saved request arg",
        "func": "//读取modbus的值,只有读到了1,并且有当前请求开门的参数的时候该流程继续往下走\nvar readData=msg.payload\nreadData=[true]\nvar requestArg=flow.get(\"openArg\")\n\nif (requestArg != undefined && requestArg != null && requestArg.requestId!=undefined)\n{\n    //表明当前门开了\n    if (readData && readData != undefined && readData[0] == true) \n    {\n        //构造请求的参数\n        msg.payload=requestArg\n        flow.set(\"openArg\", null)\n        return msg\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 540,
        "wires": [
            [
                "a2be8e976ebe1f0d"
            ]
        ]
    },
    {
        "id": "39dda7d355625e76",
        "type": "function",
        "z": "56e18617ca26db7a",
        "name": "rcs response",
        "func": "var response=msg.payload\n\n\nnode.warn(response)\nif(response!=undefined && response!=null && response.success==true){\n    global.set(\"openArg\",null)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "3a1e106db2823f40",
        "type": "function",
        "z": "56e18617ca26db7a",
        "name": "AutoOut (c)",
        "func": "// recieve openArg\nvar requestArg = flow.get(\"openArg\")\n// array of location codes\nvar staticValues = ['0355'];\n// Parsed location of all AMRs\nvar pointCodes = global.get(\"pointCodes\") || [];\n\n// chceck if there is data in openArg\nif (requestArg != undefined && requestArg != null && requestArg.requestId != undefined) {\n    // compare if any amr is in location\n    if (staticValues.some(value => pointCodes.includes(value))) {\n        // send command for ato out of location\n        msg.payload = requestArg;\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 660,
        "wires": [
            [
                "d5b6db52827ec9a3"
            ]
        ]
    },
    {
        "id": "6f051864b8ad5204",
        "type": "inject",
        "z": "56e18617ca26db7a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 450,
        "y": 660,
        "wires": [
            [
                "3a1e106db2823f40"
            ]
        ]
    },
    {
        "id": "591e6a3c48369e7f",
        "type": "comment",
        "z": "56e18617ca26db7a",
        "name": "Auto out",
        "info": "",
        "x": 440,
        "y": 620,
        "wires": []
    },
    {
        "id": "249da214e4fdbf52",
        "type": "function",
        "z": "56e18617ca26db7a",
        "name": "Reset Flow Values",
        "func": "//flow.set(\"PickBusy\", true)\nflow.set(\"PickRequest\", false)\nflow.set(\"DropRequest\", false)\nflow.set('isLoadingValue', null);\nnode.warn('reset values')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "770286edf4d562b4",
        "type": "comment",
        "z": "56e18617ca26db7a",
        "name": "Send Pick/Drop Request",
        "info": "",
        "x": 1550,
        "y": 140,
        "wires": []
    },
    {
        "id": "56491d7ba50320c2",
        "type": "comment",
        "z": "56e18617ca26db7a",
        "name": "Reset Pick/Drop Request",
        "info": "",
        "x": 1070,
        "y": 860,
        "wires": []
    },
    {
        "id": "5406b03cc03236c3",
        "type": "link in",
        "z": "56e18617ca26db7a",
        "name": "Open_Stand_6",
        "links": [
            "e12f8ff2b62f949f"
        ],
        "x": 665,
        "y": 300,
        "wires": [
            [
                "4b06b33915401b09"
            ]
        ]
    },
    {
        "id": "2488abe311629542",
        "type": "link in",
        "z": "56e18617ca26db7a",
        "name": "Close_Stand_6",
        "links": [
            "63d8ea5cbba2da45"
        ],
        "x": 275,
        "y": 900,
        "wires": [
            [
                "ddd42b608ac41274"
            ]
        ]
    },
    {
        "id": "3ce981069d6f4466",
        "type": "function",
        "z": "56e18617ca26db7a",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 100,
        "wires": [
            [
                "edd9afa14f154ec8",
                "89951136fb24ce15"
            ]
        ]
    },
    {
        "id": "edd9afa14f154ec8",
        "type": "http response",
        "z": "56e18617ca26db7a",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1500,
        "y": 100,
        "wires": []
    },
    {
        "id": "4e97988d34f2746c",
        "type": "function",
        "z": "56e18617ca26db7a",
        "name": "Check and save loaded status",
        "func": "// Extract isLoading value from the command property in the payload\nvar isLoadingValue = msg.payload.isLoading;\n\n// Save the isLoading value in a flow variable\nflow.set('isLoadingValue', isLoadingValue);\n\n// Pass the original message to the next node\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 100,
        "wires": [
            [
                "3ce981069d6f4466"
            ]
        ]
    },
    {
        "id": "6962bbc94e011d4c",
        "type": "function",
        "z": "56e18617ca26db7a",
        "name": "Set DropBusy",
        "func": "flow.set(\"DropBusy\", true)\nnode.warn(\"DropBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 460,
        "wires": [
            [
                "fdbe5d9d54315051"
            ]
        ]
    },
    {
        "id": "cd101ddcc490fddd",
        "type": "function",
        "z": "56e18617ca26db7a",
        "name": "Set PickBusy",
        "func": "flow.set(\"PickBusy\", true)\nnode.warn(\"PickBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 500,
        "wires": [
            [
                "3d2036fcd67f1da0"
            ]
        ]
    },
    {
        "id": "022838ce3a5036cf",
        "type": "http request",
        "z": "56e18617ca26db7a",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/rcs/equipment/feedback",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 910,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "41c23d3a0236ce97",
        "type": "link in",
        "z": "56e18617ca26db7a",
        "name": "link in 21",
        "links": [
            "b71ea53271ecb782"
        ],
        "x": 665,
        "y": 100,
        "wires": [
            [
                "022838ce3a5036cf",
                "4e97988d34f2746c"
            ]
        ]
    },
    {
        "id": "3d2036fcd67f1da0",
        "type": "function",
        "z": "56e18617ca26db7a",
        "name": "OPC msg PickBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "cc797298f8dcf081",
        "type": "function",
        "z": "56e18617ca26db7a",
        "name": "Reset Pick Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "0d39aa766ec5f014",
        "type": "function",
        "z": "56e18617ca26db7a",
        "name": "Reset Pick Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "1dcc88bba18b04f5",
        "type": "function",
        "z": "56e18617ca26db7a",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") != null) \n{\n    // If true, send only the first value to the next node\n    node.warn('reset pick/drop')\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 900,
        "wires": [
            [
                "249da214e4fdbf52",
                "cc797298f8dcf081",
                "4f1c6f832bee796f"
            ]
        ]
    },
    {
        "id": "af1b2e0bc4e9cfb4",
        "type": "function",
        "z": "56e18617ca26db7a",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") === null) \n{\n    // If true, send only the first value to the next node\n    flow.set(\"PickBusy\", false);\n    flow.set(\"DropBusy\", false);\n    node.warn(\"Reset Pick/Drop Busy\");\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 1040,
        "wires": [
            [
                "0d39aa766ec5f014",
                "9690fc28c95340bc"
            ]
        ]
    },
    {
        "id": "fdbe5d9d54315051",
        "type": "function",
        "z": "56e18617ca26db7a",
        "name": "OPC msg DropBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "9690fc28c95340bc",
        "type": "function",
        "z": "56e18617ca26db7a",
        "name": "Resset Drop Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "89951136fb24ce15",
        "type": "function",
        "z": "56e18617ca26db7a",
        "name": "Pick/DropRequest (c)",
        "func": "if (flow.get(\"isLoadingValue\") === true) \n{\n    flow.set(\"DropRequest\", true)\n    node.warn(\"Drop Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"DropRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\nelse if (flow.get(\"isLoadingValue\") === false) {\n    flow.set(\"PickRequest\", true)\n    node.warn(\"Pick Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"PickRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "4f1c6f832bee796f",
        "type": "function",
        "z": "56e18617ca26db7a",
        "name": "Reset Drop Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "a68268d8e774566d",
        "type": "modbus-read",
        "z": "56e18617ca26db7a",
        "name": "",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Input",
        "adr": "00000",
        "quantity": "1",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "43a0b4825a7b24f2",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 510,
        "y": 460,
        "wires": [
            [
                "4781aee6de58fa1e",
                "d246f64d46bb20ff",
                "af1f70c3c91e1b4a"
            ],
            []
        ]
    },
    {
        "id": "4781aee6de58fa1e",
        "type": "function",
        "z": "56e18617ca26db7a",
        "name": "Check for DropEnable",
        "func": "// Assuming msg.payload is the array [ false, false, false, false, false, false, false, false ]\n\n// Extract the first value from the array\nvar firstValue = msg.payload[0];\n\n// Check if the first value is true\nif (firstValue === false && flow.get(\"isLoadingValue\") === true && flow.get(\"DropRequest\") === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Drop Enable\")\n    return msg;\n}\n else {\n    // If false, do nothing (no need to return anything)\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 460,
        "wires": [
            [
                "6962bbc94e011d4c",
                "d5b6db52827ec9a3"
            ]
        ]
    },
    {
        "id": "d246f64d46bb20ff",
        "type": "function",
        "z": "56e18617ca26db7a",
        "name": "Check for PickEnable",
        "func": "var firstValue = msg.payload[0];\n\nif (firstValue === true && flow.get(\"isLoadingValue\") === false && flow.get('PickRequest') === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Pick Enable\")\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 500,
        "wires": [
            [
                "cd101ddcc490fddd",
                "d5b6db52827ec9a3"
            ]
        ]
    },
    {
        "id": "af1f70c3c91e1b4a",
        "type": "subflow:4cc4a3bd7d66d150",
        "z": "56e18617ca26db7a",
        "name": "",
        "env": [
            {
                "name": "OPC_Item",
                "value": "ns=3;s=\"AMR_Comm\".\"PR_ID_01\"",
                "type": "str"
            }
        ],
        "x": 720,
        "y": 420,
        "wires": [
            [
                "158c01e22c5521ae"
            ]
        ]
    },
    {
        "id": "158c01e22c5521ae",
        "type": "link out",
        "z": "56e18617ca26db7a",
        "name": "link out 15",
        "mode": "link",
        "links": [
            "20f3b1b189a355ab"
        ],
        "x": 865,
        "y": 420,
        "wires": []
    },
    {
        "id": "12d58ade3b30024f",
        "type": "function",
        "z": "afa7c47f281fbb7a",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 280,
        "wires": [
            [
                "d13d7028497a426d"
            ]
        ]
    },
    {
        "id": "d13d7028497a426d",
        "type": "http response",
        "z": "afa7c47f281fbb7a",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1320,
        "y": 280,
        "wires": []
    },
    {
        "id": "6224a41aaea455dd",
        "type": "comment",
        "z": "afa7c47f281fbb7a",
        "name": "open door request http://sim-les.quicktron.eu:1880/door/command/open",
        "info": "{\n  \"requestId\": \"\", // uuid\n  \"doorCode\": \"\",  // 设备编码\n  \"command\": \"\"    // 暂时用不上 开门接口会传入OPEN，关门接口会传入CLOSE\n}",
        "x": 670,
        "y": 300,
        "wires": []
    },
    {
        "id": "b8ed4d02449f7532",
        "type": "function",
        "z": "afa7c47f281fbb7a",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nnode.log(msg);\n\nflow.set('isLoadingValue', null);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 840,
        "wires": [
            [
                "605b07e665e7e6f5"
            ]
        ]
    },
    {
        "id": "605b07e665e7e6f5",
        "type": "http response",
        "z": "afa7c47f281fbb7a",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1140,
        "y": 840,
        "wires": []
    },
    {
        "id": "f3201c13dd058ebd",
        "type": "function",
        "z": "afa7c47f281fbb7a",
        "name": "save close door arg",
        "func": "msg.parameter=msg.payload\nflow.set(\"closeArg\",msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 840,
        "wires": [
            [
                "b8ed4d02449f7532"
            ]
        ]
    },
    {
        "id": "ee4833e54b4ca8a2",
        "type": "function",
        "z": "afa7c47f281fbb7a",
        "name": "save request arg (c)",
        "func": "\nvar response=msg.payload\nresponse.actionCode='OPEN'\nnode.warn(response)\n//151 IP\nif (response.doorCode != undefined){\n    flow.set(\"openArg\", response)\n    return [msg,null,null,null,null,null,null,null,null]\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "d6f7f7be78fd4f4c",
        "type": "function",
        "z": "afa7c47f281fbb7a",
        "name": "save close door args",
        "func": "\nmsg.parameter = msg.payload\nnode.warn(\"close door request\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 940,
        "wires": [
            [
                "f3201c13dd058ebd",
                "0f646743868bb6d1",
                "501dcc3b126ce5ee"
            ]
        ]
    },
    {
        "id": "788911ba8acdc814",
        "type": "function",
        "z": "afa7c47f281fbb7a",
        "name": "save open door args",
        "func": "msg.parameter = msg.payload\n//node.warn(\"receive open door args\");\n//node.warn(msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 340,
        "wires": [
            [
                "ee4833e54b4ca8a2",
                "12d58ade3b30024f"
            ]
        ]
    },
    {
        "id": "b6bf33e98dfb0c3c",
        "type": "inject",
        "z": "afa7c47f281fbb7a",
        "name": "Manual Overrite Pick/DropEnable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 550,
        "y": 600,
        "wires": [
            [
                "5c6cb949ced5adc2"
            ]
        ]
    },
    {
        "id": "aaa93c3d94b3d99e",
        "type": "http request",
        "z": "afa7c47f281fbb7a",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/door/command-finish",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1270,
        "y": 580,
        "wires": [
            [
                "92a7873dcede9983"
            ]
        ]
    },
    {
        "id": "5c6cb949ced5adc2",
        "type": "function",
        "z": "afa7c47f281fbb7a",
        "name": "get saved request arg",
        "func": "//读取modbus的值,只有读到了1,并且有当前请求开门的参数的时候该流程继续往下走\nvar readData=msg.payload\nreadData=[true]\nvar requestArg=flow.get(\"openArg\")\n\nif (requestArg != undefined && requestArg != null && requestArg.requestId!=undefined)\n{\n    //表明当前门开了\n    if (readData && readData != undefined && readData[0] == true) \n    {\n        //构造请求的参数\n        msg.payload=requestArg\n        flow.set(\"openArg\", null)\n        return msg\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 580,
        "wires": [
            [
                "aaa93c3d94b3d99e"
            ]
        ]
    },
    {
        "id": "92a7873dcede9983",
        "type": "function",
        "z": "afa7c47f281fbb7a",
        "name": "rcs response",
        "func": "var response=msg.payload\n\n\nnode.warn(response)\nif(response!=undefined && response!=null && response.success==true){\n    global.set(\"openArg\",null)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "ca035a10a05c4e77",
        "type": "function",
        "z": "afa7c47f281fbb7a",
        "name": "AutoOut (c)",
        "func": "// recieve openArg\nvar requestArg = flow.get(\"openArg\")\n// array of location codes\nvar staticValues = ['0354'];\n// Parsed location of all AMRs\nvar pointCodes = global.get(\"pointCodes\") || [];\n\n// chceck if there is data in openArg\nif (requestArg != undefined && requestArg != null && requestArg.requestId != undefined) {\n    // compare if any amr is in location\n    if (staticValues.some(value => pointCodes.includes(value))) {\n        // send command for ato out of location\n        msg.payload = requestArg;\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 700,
        "wires": [
            [
                "5c6cb949ced5adc2"
            ]
        ]
    },
    {
        "id": "12f88360e54c44f7",
        "type": "inject",
        "z": "afa7c47f281fbb7a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 430,
        "y": 700,
        "wires": [
            [
                "ca035a10a05c4e77"
            ]
        ]
    },
    {
        "id": "52875f9474780cd1",
        "type": "comment",
        "z": "afa7c47f281fbb7a",
        "name": "Auto out",
        "info": "",
        "x": 420,
        "y": 660,
        "wires": []
    },
    {
        "id": "bc599320686fe12f",
        "type": "function",
        "z": "afa7c47f281fbb7a",
        "name": "Reset Flow Values",
        "func": "//flow.set(\"PickBusy\", true)\nflow.set(\"PickRequest\", false)\nflow.set(\"DropRequest\", false)\nflow.set('isLoadingValue', null);\nnode.warn('reset values')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "9f243718c73c363d",
        "type": "comment",
        "z": "afa7c47f281fbb7a",
        "name": "Send Pick/Drop Request",
        "info": "",
        "x": 1530,
        "y": 180,
        "wires": []
    },
    {
        "id": "6bb6577e81e17277",
        "type": "comment",
        "z": "afa7c47f281fbb7a",
        "name": "Reset Pick/Drop Request",
        "info": "",
        "x": 1050,
        "y": 900,
        "wires": []
    },
    {
        "id": "3e8b5226826f9dec",
        "type": "link in",
        "z": "afa7c47f281fbb7a",
        "name": "Open_Stand_6",
        "links": [
            "cd26ebd578d204df"
        ],
        "x": 645,
        "y": 340,
        "wires": [
            [
                "788911ba8acdc814"
            ]
        ]
    },
    {
        "id": "544e7612e81d89fd",
        "type": "link in",
        "z": "afa7c47f281fbb7a",
        "name": "Close_Stand_6",
        "links": [
            "e25b817fabfcdff0"
        ],
        "x": 255,
        "y": 940,
        "wires": [
            [
                "d6f7f7be78fd4f4c"
            ]
        ]
    },
    {
        "id": "4c77b4b6ddb2232f",
        "type": "function",
        "z": "afa7c47f281fbb7a",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 140,
        "wires": [
            [
                "a45016f2e0116f00",
                "043ca174c1bc9ae2"
            ]
        ]
    },
    {
        "id": "a45016f2e0116f00",
        "type": "http response",
        "z": "afa7c47f281fbb7a",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1480,
        "y": 140,
        "wires": []
    },
    {
        "id": "df54ca027c51ecba",
        "type": "function",
        "z": "afa7c47f281fbb7a",
        "name": "Check and save loaded status",
        "func": "// Extract isLoading value from the command property in the payload\nvar isLoadingValue = msg.payload.isLoading;\n\n// Save the isLoading value in a flow variable\nflow.set('isLoadingValue', isLoadingValue);\n\n// Pass the original message to the next node\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 140,
        "wires": [
            [
                "4c77b4b6ddb2232f"
            ]
        ]
    },
    {
        "id": "552f2a4598a12eb4",
        "type": "function",
        "z": "afa7c47f281fbb7a",
        "name": "Set DropBusy",
        "func": "flow.set(\"DropBusy\", true)\nnode.warn(\"DropBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 500,
        "wires": [
            [
                "bbcb277d2281cb7c"
            ]
        ]
    },
    {
        "id": "c8fb1499285f02e2",
        "type": "function",
        "z": "afa7c47f281fbb7a",
        "name": "Set PickBusy",
        "func": "flow.set(\"PickBusy\", true)\nnode.warn(\"PickBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 540,
        "wires": [
            [
                "537cdcde7b59ee1b"
            ]
        ]
    },
    {
        "id": "70825df07774218d",
        "type": "http request",
        "z": "afa7c47f281fbb7a",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/rcs/equipment/feedback",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 890,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "e9f531fc9de5fac3",
        "type": "link in",
        "z": "afa7c47f281fbb7a",
        "name": "link in 22",
        "links": [
            "74099a34f84506e1"
        ],
        "x": 645,
        "y": 140,
        "wires": [
            [
                "70825df07774218d",
                "df54ca027c51ecba"
            ]
        ]
    },
    {
        "id": "537cdcde7b59ee1b",
        "type": "function",
        "z": "afa7c47f281fbb7a",
        "name": "OPC msg PickBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "7495c8460d22b5c1",
        "type": "function",
        "z": "afa7c47f281fbb7a",
        "name": "Reset Pick Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "9e37199a7e07efbf",
        "type": "function",
        "z": "afa7c47f281fbb7a",
        "name": "Reset Pick Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "0f646743868bb6d1",
        "type": "function",
        "z": "afa7c47f281fbb7a",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") != null) \n{\n    // If true, send only the first value to the next node\n    node.warn('reset pick/drop')\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 940,
        "wires": [
            [
                "bc599320686fe12f",
                "7495c8460d22b5c1",
                "d7c5369ab04e8884"
            ]
        ]
    },
    {
        "id": "501dcc3b126ce5ee",
        "type": "function",
        "z": "afa7c47f281fbb7a",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") === null) \n{\n    // If true, send only the first value to the next node\n    flow.set(\"PickBusy\", false);\n    flow.set(\"DropBusy\", false);\n    node.warn(\"Reset Pick/Drop Busy\");\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1080,
        "wires": [
            [
                "9e37199a7e07efbf",
                "6494b7b8e733236a"
            ]
        ]
    },
    {
        "id": "bbcb277d2281cb7c",
        "type": "function",
        "z": "afa7c47f281fbb7a",
        "name": "OPC msg DropBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "6494b7b8e733236a",
        "type": "function",
        "z": "afa7c47f281fbb7a",
        "name": "Resset Drop Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "043ca174c1bc9ae2",
        "type": "function",
        "z": "afa7c47f281fbb7a",
        "name": "Pick/DropRequest (c)",
        "func": "if (flow.get(\"isLoadingValue\") === true) \n{\n    flow.set(\"DropRequest\", true)\n    node.warn(\"Drop Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"DropRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\nelse if (flow.get(\"isLoadingValue\") === false) {\n    flow.set(\"PickRequest\", true)\n    node.warn(\"Pick Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"PickRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "d7c5369ab04e8884",
        "type": "function",
        "z": "afa7c47f281fbb7a",
        "name": "Reset Drop Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "b8c4a3b474c1f009",
        "type": "modbus-read",
        "z": "afa7c47f281fbb7a",
        "name": "",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Input",
        "adr": "00001",
        "quantity": "1",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "43a0b4825a7b24f2",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 490,
        "y": 500,
        "wires": [
            [
                "e5cb30db67716da5",
                "118756e0ee784338",
                "9d60f43ac159e77c"
            ],
            []
        ]
    },
    {
        "id": "e5cb30db67716da5",
        "type": "function",
        "z": "afa7c47f281fbb7a",
        "name": "Check for DropEnable",
        "func": "// Assuming msg.payload is the array [ false, false, false, false, false, false, false, false ]\n\n// Extract the first value from the array\nvar firstValue = msg.payload[0];\n\n// Check if the first value is true\nif (firstValue === false && flow.get(\"isLoadingValue\") === true && flow.get(\"DropRequest\") === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Drop Enable\")\n    return msg;\n}\n else {\n    // If false, do nothing (no need to return anything)\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 500,
        "wires": [
            [
                "552f2a4598a12eb4",
                "5c6cb949ced5adc2"
            ]
        ]
    },
    {
        "id": "118756e0ee784338",
        "type": "function",
        "z": "afa7c47f281fbb7a",
        "name": "Check for PickEnable",
        "func": "var firstValue = msg.payload[0];\n\nif (firstValue === true && flow.get(\"isLoadingValue\") === false && flow.get('PickRequest') === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Pick Enable\")\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 540,
        "wires": [
            [
                "c8fb1499285f02e2",
                "5c6cb949ced5adc2"
            ]
        ]
    },
    {
        "id": "9d60f43ac159e77c",
        "type": "subflow:4cc4a3bd7d66d150",
        "z": "afa7c47f281fbb7a",
        "name": "",
        "env": [
            {
                "name": "OPC_Item",
                "value": "ns=3;s=\"AMR_Comm\".\"PR_ID_02\"",
                "type": "str"
            }
        ],
        "x": 700,
        "y": 460,
        "wires": [
            [
                "4160def829190743"
            ]
        ]
    },
    {
        "id": "4160def829190743",
        "type": "link out",
        "z": "afa7c47f281fbb7a",
        "name": "link out 16",
        "mode": "link",
        "links": [
            "20f3b1b189a355ab"
        ],
        "x": 845,
        "y": 460,
        "wires": []
    },
    {
        "id": "5f7f5045e06fc1ab",
        "type": "function",
        "z": "95bab59c27bec3b8",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 260,
        "wires": [
            [
                "e581c802f1169e7c"
            ]
        ]
    },
    {
        "id": "e581c802f1169e7c",
        "type": "http response",
        "z": "95bab59c27bec3b8",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1380,
        "y": 260,
        "wires": []
    },
    {
        "id": "b70ceaba467aaf94",
        "type": "comment",
        "z": "95bab59c27bec3b8",
        "name": "open door request http://sim-les.quicktron.eu:1880/door/command/open",
        "info": "{\n  \"requestId\": \"\", // uuid\n  \"doorCode\": \"\",  // 设备编码\n  \"command\": \"\"    // 暂时用不上 开门接口会传入OPEN，关门接口会传入CLOSE\n}",
        "x": 730,
        "y": 280,
        "wires": []
    },
    {
        "id": "f1cdea030cd92704",
        "type": "function",
        "z": "95bab59c27bec3b8",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nnode.log(msg);\n\nflow.set('isLoadingValue', null);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 820,
        "wires": [
            [
                "432a6ba8b22abbc1"
            ]
        ]
    },
    {
        "id": "432a6ba8b22abbc1",
        "type": "http response",
        "z": "95bab59c27bec3b8",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1200,
        "y": 820,
        "wires": []
    },
    {
        "id": "5e79da1f4252b616",
        "type": "function",
        "z": "95bab59c27bec3b8",
        "name": "save close door arg",
        "func": "msg.parameter=msg.payload\nflow.set(\"closeArg\",msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 820,
        "wires": [
            [
                "f1cdea030cd92704"
            ]
        ]
    },
    {
        "id": "875c0db11800cbed",
        "type": "function",
        "z": "95bab59c27bec3b8",
        "name": "save request arg (c)",
        "func": "\nvar response=msg.payload\nresponse.actionCode='OPEN'\nnode.warn(response)\n//151 IP\nif (response.doorCode != undefined){\n    flow.set(\"openArg\", response)\n    return [msg,null,null,null,null,null,null,null,null]\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "8b1dc05ffec9e30e",
        "type": "function",
        "z": "95bab59c27bec3b8",
        "name": "save close door args",
        "func": "\nmsg.parameter = msg.payload\nnode.warn(\"close door request\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 920,
        "wires": [
            [
                "5e79da1f4252b616",
                "c43d1b1c18f90094",
                "2c8c87044bc0a078"
            ]
        ]
    },
    {
        "id": "d49683a7fa1d0474",
        "type": "function",
        "z": "95bab59c27bec3b8",
        "name": "save open door args",
        "func": "msg.parameter = msg.payload\n//node.warn(\"receive open door args\");\n//node.warn(msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 320,
        "wires": [
            [
                "875c0db11800cbed",
                "5f7f5045e06fc1ab"
            ]
        ]
    },
    {
        "id": "8d9300f0e0318fc8",
        "type": "inject",
        "z": "95bab59c27bec3b8",
        "name": "Manual Overrite Pick/DropEnable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 610,
        "y": 580,
        "wires": [
            [
                "6e057f56ce911f6a"
            ]
        ]
    },
    {
        "id": "14681a26f8a6cbae",
        "type": "http request",
        "z": "95bab59c27bec3b8",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/door/command-finish",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1330,
        "y": 560,
        "wires": [
            [
                "06b9fc64f00d3193"
            ]
        ]
    },
    {
        "id": "6e057f56ce911f6a",
        "type": "function",
        "z": "95bab59c27bec3b8",
        "name": "get saved request arg",
        "func": "//读取modbus的值,只有读到了1,并且有当前请求开门的参数的时候该流程继续往下走\nvar readData=msg.payload\nreadData=[true]\nvar requestArg=flow.get(\"openArg\")\n\nif (requestArg != undefined && requestArg != null && requestArg.requestId!=undefined)\n{\n    //表明当前门开了\n    if (readData && readData != undefined && readData[0] == true) \n    {\n        //构造请求的参数\n        msg.payload=requestArg\n        flow.set(\"openArg\", null)\n        return msg\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 560,
        "wires": [
            [
                "14681a26f8a6cbae"
            ]
        ]
    },
    {
        "id": "06b9fc64f00d3193",
        "type": "function",
        "z": "95bab59c27bec3b8",
        "name": "rcs response",
        "func": "var response=msg.payload\n\n\nnode.warn(response)\nif(response!=undefined && response!=null && response.success==true){\n    global.set(\"openArg\",null)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "3fba5984d567e923",
        "type": "function",
        "z": "95bab59c27bec3b8",
        "name": "AutoOut (c)",
        "func": "// recieve openArg\nvar requestArg = flow.get(\"openArg\")\n// array of location codes\nvar staticValues = ['0357'];\n// Parsed location of all AMRs\nvar pointCodes = global.get(\"pointCodes\") || [];\n\n// chceck if there is data in openArg\nif (requestArg != undefined && requestArg != null && requestArg.requestId != undefined) {\n    // compare if any amr is in location\n    if (staticValues.some(value => pointCodes.includes(value))) {\n        // send command for ato out of location\n        msg.payload = requestArg;\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 680,
        "wires": [
            [
                "6e057f56ce911f6a"
            ]
        ]
    },
    {
        "id": "f145c738a1167ef9",
        "type": "inject",
        "z": "95bab59c27bec3b8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 490,
        "y": 680,
        "wires": [
            [
                "3fba5984d567e923"
            ]
        ]
    },
    {
        "id": "863533e5876461f4",
        "type": "comment",
        "z": "95bab59c27bec3b8",
        "name": "Auto out",
        "info": "",
        "x": 480,
        "y": 640,
        "wires": []
    },
    {
        "id": "43d723bf27b83c5a",
        "type": "function",
        "z": "95bab59c27bec3b8",
        "name": "Reset Flow Values",
        "func": "//flow.set(\"PickBusy\", true)\nflow.set(\"PickRequest\", false)\nflow.set(\"DropRequest\", false)\nflow.set('isLoadingValue', null);\nnode.warn('reset values')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "a678b1e7276613d5",
        "type": "comment",
        "z": "95bab59c27bec3b8",
        "name": "Send Pick/Drop Request",
        "info": "",
        "x": 1590,
        "y": 160,
        "wires": []
    },
    {
        "id": "0ab126d7f13c93be",
        "type": "comment",
        "z": "95bab59c27bec3b8",
        "name": "Reset Pick/Drop Request",
        "info": "",
        "x": 1110,
        "y": 880,
        "wires": []
    },
    {
        "id": "6bdef08ec90dfc45",
        "type": "link in",
        "z": "95bab59c27bec3b8",
        "name": "Open_Stand_6",
        "links": [
            "238e642fbb4b8b41"
        ],
        "x": 705,
        "y": 320,
        "wires": [
            [
                "d49683a7fa1d0474"
            ]
        ]
    },
    {
        "id": "7490f8d6089352b4",
        "type": "link in",
        "z": "95bab59c27bec3b8",
        "name": "Close_Stand_6",
        "links": [
            "059e76d7aef82473"
        ],
        "x": 315,
        "y": 920,
        "wires": [
            [
                "8b1dc05ffec9e30e"
            ]
        ]
    },
    {
        "id": "2f327f77691fd9d6",
        "type": "function",
        "z": "95bab59c27bec3b8",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 120,
        "wires": [
            [
                "7c391bee635f32c5",
                "88bbdaeea4e879f0"
            ]
        ]
    },
    {
        "id": "7c391bee635f32c5",
        "type": "http response",
        "z": "95bab59c27bec3b8",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1540,
        "y": 120,
        "wires": []
    },
    {
        "id": "a44f7604fcb3632e",
        "type": "function",
        "z": "95bab59c27bec3b8",
        "name": "Check and save loaded status",
        "func": "// Extract isLoading value from the command property in the payload\nvar isLoadingValue = msg.payload.isLoading;\n\n// Save the isLoading value in a flow variable\nflow.set('isLoadingValue', isLoadingValue);\n\n// Pass the original message to the next node\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 120,
        "wires": [
            [
                "2f327f77691fd9d6"
            ]
        ]
    },
    {
        "id": "17d86285b7bbed40",
        "type": "function",
        "z": "95bab59c27bec3b8",
        "name": "Set DropBusy",
        "func": "flow.set(\"DropBusy\", true)\nnode.warn(\"DropBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 480,
        "wires": [
            [
                "c095ddf03b7e0abe"
            ]
        ]
    },
    {
        "id": "0ddb6644f779b6f0",
        "type": "function",
        "z": "95bab59c27bec3b8",
        "name": "Set PickBusy",
        "func": "flow.set(\"PickBusy\", true)\nnode.warn(\"PickBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 520,
        "wires": [
            [
                "02425cc9bdec13a8"
            ]
        ]
    },
    {
        "id": "c5105a78ca8be1ff",
        "type": "http request",
        "z": "95bab59c27bec3b8",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/rcs/equipment/feedback",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 950,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "da2f2aa58b51030d",
        "type": "link in",
        "z": "95bab59c27bec3b8",
        "name": "link in 23",
        "links": [
            "9c0708f34a2d72da"
        ],
        "x": 705,
        "y": 120,
        "wires": [
            [
                "c5105a78ca8be1ff",
                "a44f7604fcb3632e"
            ]
        ]
    },
    {
        "id": "02425cc9bdec13a8",
        "type": "function",
        "z": "95bab59c27bec3b8",
        "name": "OPC msg PickBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "8790d8369cadc186",
        "type": "function",
        "z": "95bab59c27bec3b8",
        "name": "Reset Pick Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "92e6927948b09979",
        "type": "function",
        "z": "95bab59c27bec3b8",
        "name": "Reset Pick Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "c43d1b1c18f90094",
        "type": "function",
        "z": "95bab59c27bec3b8",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") != null) \n{\n    // If true, send only the first value to the next node\n    node.warn('reset pick/drop')\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 920,
        "wires": [
            [
                "43d723bf27b83c5a",
                "8790d8369cadc186",
                "5868cda75184a34d"
            ]
        ]
    },
    {
        "id": "2c8c87044bc0a078",
        "type": "function",
        "z": "95bab59c27bec3b8",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") === null) \n{\n    // If true, send only the first value to the next node\n    flow.set(\"PickBusy\", false);\n    flow.set(\"DropBusy\", false);\n    node.warn(\"Reset Pick/Drop Busy\");\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1060,
        "wires": [
            [
                "92e6927948b09979",
                "1c9a5ca0a3150254"
            ]
        ]
    },
    {
        "id": "c095ddf03b7e0abe",
        "type": "function",
        "z": "95bab59c27bec3b8",
        "name": "OPC msg DropBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "1c9a5ca0a3150254",
        "type": "function",
        "z": "95bab59c27bec3b8",
        "name": "Resset Drop Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "88bbdaeea4e879f0",
        "type": "function",
        "z": "95bab59c27bec3b8",
        "name": "Pick/DropRequest (c)",
        "func": "if (flow.get(\"isLoadingValue\") === true) \n{\n    flow.set(\"DropRequest\", true)\n    node.warn(\"Drop Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"DropRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\nelse if (flow.get(\"isLoadingValue\") === false) {\n    flow.set(\"PickRequest\", true)\n    node.warn(\"Pick Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"PickRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "5868cda75184a34d",
        "type": "function",
        "z": "95bab59c27bec3b8",
        "name": "Reset Drop Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "fe543596330d766c",
        "type": "modbus-read",
        "z": "95bab59c27bec3b8",
        "name": "",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Input",
        "adr": "00002",
        "quantity": "1",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "43a0b4825a7b24f2",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 550,
        "y": 480,
        "wires": [
            [
                "104a043bead84ad0",
                "42566d2070665283",
                "8652310483bc7d3f"
            ],
            []
        ]
    },
    {
        "id": "104a043bead84ad0",
        "type": "function",
        "z": "95bab59c27bec3b8",
        "name": "Check for DropEnable",
        "func": "// Assuming msg.payload is the array [ false, false, false, false, false, false, false, false ]\n\n// Extract the first value from the array\nvar firstValue = msg.payload[0];\n\n// Check if the first value is true\nif (firstValue === false && flow.get(\"isLoadingValue\") === true && flow.get(\"DropRequest\") === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Drop Enable\")\n    return msg;\n}\n else {\n    // If false, do nothing (no need to return anything)\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 480,
        "wires": [
            [
                "17d86285b7bbed40",
                "6e057f56ce911f6a"
            ]
        ]
    },
    {
        "id": "42566d2070665283",
        "type": "function",
        "z": "95bab59c27bec3b8",
        "name": "Check for PickEnable",
        "func": "var firstValue = msg.payload[0];\n\nif (firstValue === true && flow.get(\"isLoadingValue\") === false && flow.get('PickRequest') === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Pick Enable\")\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 520,
        "wires": [
            [
                "0ddb6644f779b6f0",
                "6e057f56ce911f6a"
            ]
        ]
    },
    {
        "id": "8652310483bc7d3f",
        "type": "subflow:4cc4a3bd7d66d150",
        "z": "95bab59c27bec3b8",
        "name": "",
        "env": [
            {
                "name": "OPC_Item",
                "value": "ns=3;s=\"AMR_Comm\".\"PR_ID_03\"",
                "type": "str"
            }
        ],
        "x": 760,
        "y": 440,
        "wires": [
            [
                "e0ecbd7a85946402"
            ]
        ]
    },
    {
        "id": "e0ecbd7a85946402",
        "type": "link out",
        "z": "95bab59c27bec3b8",
        "name": "link out 17",
        "mode": "link",
        "links": [
            "20f3b1b189a355ab"
        ],
        "x": 905,
        "y": 440,
        "wires": []
    },
    {
        "id": "c1ede4656e58c47e",
        "type": "function",
        "z": "eecba73489ce6eee",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 260,
        "wires": [
            [
                "05f780ccc43e62d7"
            ]
        ]
    },
    {
        "id": "05f780ccc43e62d7",
        "type": "http response",
        "z": "eecba73489ce6eee",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1340,
        "y": 260,
        "wires": []
    },
    {
        "id": "08bfef25e98e1e2b",
        "type": "comment",
        "z": "eecba73489ce6eee",
        "name": "open door request http://sim-les.quicktron.eu:1880/door/command/open",
        "info": "{\n  \"requestId\": \"\", // uuid\n  \"doorCode\": \"\",  // 设备编码\n  \"command\": \"\"    // 暂时用不上 开门接口会传入OPEN，关门接口会传入CLOSE\n}",
        "x": 690,
        "y": 280,
        "wires": []
    },
    {
        "id": "efa5b719ee2c3e2c",
        "type": "function",
        "z": "eecba73489ce6eee",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nnode.log(msg);\n\nflow.set('isLoadingValue', null);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 820,
        "wires": [
            [
                "5f98c41ec1a4b413"
            ]
        ]
    },
    {
        "id": "5f98c41ec1a4b413",
        "type": "http response",
        "z": "eecba73489ce6eee",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1160,
        "y": 820,
        "wires": []
    },
    {
        "id": "89c62184deae5755",
        "type": "function",
        "z": "eecba73489ce6eee",
        "name": "save close door arg",
        "func": "msg.parameter=msg.payload\nflow.set(\"closeArg\",msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 820,
        "wires": [
            [
                "efa5b719ee2c3e2c"
            ]
        ]
    },
    {
        "id": "57db74228d91aa06",
        "type": "function",
        "z": "eecba73489ce6eee",
        "name": "save request arg (c)",
        "func": "\nvar response=msg.payload\nresponse.actionCode='OPEN'\nnode.warn(response)\n//151 IP\nif (response.doorCode != undefined){\n    flow.set(\"openArg\", response)\n    return [msg,null,null,null,null,null,null,null,null]\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "99193dcf9f039660",
        "type": "function",
        "z": "eecba73489ce6eee",
        "name": "save close door args",
        "func": "\nmsg.parameter = msg.payload\nnode.warn(\"close door request\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 920,
        "wires": [
            [
                "89c62184deae5755",
                "d7b60e232ed7d705",
                "d7a6b409e31c98da"
            ]
        ]
    },
    {
        "id": "3d61f82e38411ec5",
        "type": "function",
        "z": "eecba73489ce6eee",
        "name": "save open door args",
        "func": "msg.parameter = msg.payload\n//node.warn(\"receive open door args\");\n//node.warn(msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 320,
        "wires": [
            [
                "57db74228d91aa06",
                "c1ede4656e58c47e"
            ]
        ]
    },
    {
        "id": "da03ad00e49f7042",
        "type": "inject",
        "z": "eecba73489ce6eee",
        "name": "Manual Overrite Pick/DropEnable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 570,
        "y": 580,
        "wires": [
            [
                "172e9e41aff98566"
            ]
        ]
    },
    {
        "id": "c91e63e3868dcd39",
        "type": "http request",
        "z": "eecba73489ce6eee",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/door/command-finish",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1290,
        "y": 560,
        "wires": [
            [
                "33933758fc7f0bfc"
            ]
        ]
    },
    {
        "id": "172e9e41aff98566",
        "type": "function",
        "z": "eecba73489ce6eee",
        "name": "get saved request arg",
        "func": "//读取modbus的值,只有读到了1,并且有当前请求开门的参数的时候该流程继续往下走\nvar readData=msg.payload\nreadData=[true]\nvar requestArg=flow.get(\"openArg\")\n\nif (requestArg != undefined && requestArg != null && requestArg.requestId!=undefined)\n{\n    //表明当前门开了\n    if (readData && readData != undefined && readData[0] == true) \n    {\n        //构造请求的参数\n        msg.payload=requestArg\n        flow.set(\"openArg\", null)\n        return msg\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 560,
        "wires": [
            [
                "c91e63e3868dcd39"
            ]
        ]
    },
    {
        "id": "33933758fc7f0bfc",
        "type": "function",
        "z": "eecba73489ce6eee",
        "name": "rcs response",
        "func": "var response=msg.payload\n\n\nnode.warn(response)\nif(response!=undefined && response!=null && response.success==true){\n    global.set(\"openArg\",null)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "236ca186ba978132",
        "type": "function",
        "z": "eecba73489ce6eee",
        "name": "AutoOut (c)",
        "func": "// recieve openArg\nvar requestArg = flow.get(\"openArg\")\n// array of location codes\nvar staticValues = ['0271'];\n// Parsed location of all AMRs\nvar pointCodes = global.get(\"pointCodes\") || [];\n\n// chceck if there is data in openArg\nif (requestArg != undefined && requestArg != null && requestArg.requestId != undefined) {\n    // compare if any amr is in location\n    if (staticValues.some(value => pointCodes.includes(value))) {\n        // send command for ato out of location\n        msg.payload = requestArg;\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 680,
        "wires": [
            [
                "172e9e41aff98566"
            ]
        ]
    },
    {
        "id": "dca732b9b96a2054",
        "type": "inject",
        "z": "eecba73489ce6eee",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 450,
        "y": 680,
        "wires": [
            [
                "236ca186ba978132"
            ]
        ]
    },
    {
        "id": "80d20096eb463876",
        "type": "comment",
        "z": "eecba73489ce6eee",
        "name": "Auto out",
        "info": "",
        "x": 440,
        "y": 640,
        "wires": []
    },
    {
        "id": "92124229427a70fa",
        "type": "function",
        "z": "eecba73489ce6eee",
        "name": "Reset Flow Values",
        "func": "//flow.set(\"PickBusy\", true)\nflow.set(\"PickRequest\", false)\nflow.set(\"DropRequest\", false)\nflow.set('isLoadingValue', null);\nnode.warn('reset values')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "3b69337b6ad3379b",
        "type": "comment",
        "z": "eecba73489ce6eee",
        "name": "Send Pick/Drop Request",
        "info": "",
        "x": 1550,
        "y": 160,
        "wires": []
    },
    {
        "id": "e7849399db7b4676",
        "type": "comment",
        "z": "eecba73489ce6eee",
        "name": "Reset Pick/Drop Request",
        "info": "",
        "x": 1070,
        "y": 880,
        "wires": []
    },
    {
        "id": "9080e758da681dbb",
        "type": "link in",
        "z": "eecba73489ce6eee",
        "name": "Open_Stand_6",
        "links": [
            "5c1757fe31c10863"
        ],
        "x": 665,
        "y": 320,
        "wires": [
            [
                "3d61f82e38411ec5"
            ]
        ]
    },
    {
        "id": "a12a2e6a6bf5835b",
        "type": "link in",
        "z": "eecba73489ce6eee",
        "name": "Close_Stand_6",
        "links": [
            "d11ccad0f092fdd3"
        ],
        "x": 275,
        "y": 920,
        "wires": [
            [
                "99193dcf9f039660"
            ]
        ]
    },
    {
        "id": "a177e2da2dd46a8c",
        "type": "function",
        "z": "eecba73489ce6eee",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 120,
        "wires": [
            [
                "97b1f6192f1a6b69",
                "5aaf5cb58ea84c81"
            ]
        ]
    },
    {
        "id": "97b1f6192f1a6b69",
        "type": "http response",
        "z": "eecba73489ce6eee",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1500,
        "y": 120,
        "wires": []
    },
    {
        "id": "26a8d501eded477b",
        "type": "function",
        "z": "eecba73489ce6eee",
        "name": "Check and save loaded status",
        "func": "// Extract isLoading value from the command property in the payload\nvar isLoadingValue = msg.payload.isLoading;\n\n// Save the isLoading value in a flow variable\nflow.set('isLoadingValue', isLoadingValue);\n\n// Pass the original message to the next node\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 120,
        "wires": [
            [
                "a177e2da2dd46a8c"
            ]
        ]
    },
    {
        "id": "31b8aca2d2838ac7",
        "type": "function",
        "z": "eecba73489ce6eee",
        "name": "Set DropBusy",
        "func": "flow.set(\"DropBusy\", true)\nnode.warn(\"DropBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 480,
        "wires": [
            [
                "af239f33cb64a74c"
            ]
        ]
    },
    {
        "id": "67abd19131419da2",
        "type": "function",
        "z": "eecba73489ce6eee",
        "name": "Set PickBusy",
        "func": "flow.set(\"PickBusy\", true)\nnode.warn(\"PickBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 520,
        "wires": [
            [
                "d2d6d711949f48fc"
            ]
        ]
    },
    {
        "id": "d5a8818e2f878a07",
        "type": "http request",
        "z": "eecba73489ce6eee",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/rcs/equipment/feedback",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 910,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "7c2c7209d6e1ee6b",
        "type": "link in",
        "z": "eecba73489ce6eee",
        "name": "link in 27",
        "links": [
            "f209e03839314e99"
        ],
        "x": 665,
        "y": 120,
        "wires": [
            [
                "d5a8818e2f878a07",
                "26a8d501eded477b"
            ]
        ]
    },
    {
        "id": "d2d6d711949f48fc",
        "type": "function",
        "z": "eecba73489ce6eee",
        "name": "OPC msg PickBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "bf3cf1628a047bba",
        "type": "function",
        "z": "eecba73489ce6eee",
        "name": "Reset Pick Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "10047b1408c18bf2",
        "type": "function",
        "z": "eecba73489ce6eee",
        "name": "Reset Pick Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "d7b60e232ed7d705",
        "type": "function",
        "z": "eecba73489ce6eee",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") != null) \n{\n    // If true, send only the first value to the next node\n    node.warn('reset pick/drop')\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 920,
        "wires": [
            [
                "92124229427a70fa",
                "bf3cf1628a047bba",
                "11b9dcef04107675"
            ]
        ]
    },
    {
        "id": "d7a6b409e31c98da",
        "type": "function",
        "z": "eecba73489ce6eee",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") === null) \n{\n    // If true, send only the first value to the next node\n    flow.set(\"PickBusy\", false);\n    flow.set(\"DropBusy\", false);\n    node.warn(\"Reset Pick/Drop Busy\");\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 1060,
        "wires": [
            [
                "10047b1408c18bf2",
                "54fbb29165f4bced"
            ]
        ]
    },
    {
        "id": "af239f33cb64a74c",
        "type": "function",
        "z": "eecba73489ce6eee",
        "name": "OPC msg DropBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "54fbb29165f4bced",
        "type": "function",
        "z": "eecba73489ce6eee",
        "name": "Resset Drop Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "5aaf5cb58ea84c81",
        "type": "function",
        "z": "eecba73489ce6eee",
        "name": "Pick/DropRequest (c)",
        "func": "if (flow.get(\"isLoadingValue\") === true) \n{\n    flow.set(\"DropRequest\", true)\n    node.warn(\"Drop Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"DropRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\nelse if (flow.get(\"isLoadingValue\") === false) {\n    flow.set(\"PickRequest\", true)\n    node.warn(\"Pick Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"PickRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "11b9dcef04107675",
        "type": "function",
        "z": "eecba73489ce6eee",
        "name": "Reset Drop Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "db78239e939fcf32",
        "type": "modbus-read",
        "z": "eecba73489ce6eee",
        "name": "",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Input",
        "adr": "00001",
        "quantity": "1",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "8553a2f3.f365b8",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 470,
        "y": 480,
        "wires": [
            [
                "64700f34ba3a8979",
                "1caac97b1e8c7010",
                "4feda1171adc2c2f"
            ],
            []
        ]
    },
    {
        "id": "64700f34ba3a8979",
        "type": "function",
        "z": "eecba73489ce6eee",
        "name": "Check for DropEnable",
        "func": "// Assuming msg.payload is the array [ false, false, false, false, false, false, false, false ]\n\n// Extract the first value from the array\nvar firstValue = msg.payload[0];\n\n// Check if the first value is true\nif (firstValue === false && flow.get(\"isLoadingValue\") === true && flow.get(\"DropRequest\") === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Drop Enable\")\n    return msg;\n}\n else {\n    // If false, do nothing (no need to return anything)\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 480,
        "wires": [
            [
                "31b8aca2d2838ac7",
                "172e9e41aff98566"
            ]
        ]
    },
    {
        "id": "1caac97b1e8c7010",
        "type": "function",
        "z": "eecba73489ce6eee",
        "name": "Check for PickEnable",
        "func": "var firstValue = msg.payload[0];\n\nif (firstValue === true && flow.get(\"isLoadingValue\") === false && flow.get('PickRequest') === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Pick Enable\")\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 520,
        "wires": [
            [
                "67abd19131419da2",
                "172e9e41aff98566"
            ]
        ]
    },
    {
        "id": "4feda1171adc2c2f",
        "type": "subflow:4cc4a3bd7d66d150",
        "z": "eecba73489ce6eee",
        "name": "",
        "env": [
            {
                "name": "OPC_Item",
                "value": "ns=3;s=\"AMR_Comm\".\"PR_OU_01\"",
                "type": "str"
            }
        ],
        "x": 720,
        "y": 440,
        "wires": [
            [
                "2b80a171d5b834f8",
                "d895f5412661d5d8"
            ]
        ]
    },
    {
        "id": "2b80a171d5b834f8",
        "type": "link out",
        "z": "eecba73489ce6eee",
        "name": "link out 21",
        "mode": "link",
        "links": [
            "20f3b1b189a355ab"
        ],
        "x": 865,
        "y": 360,
        "wires": []
    },
    {
        "id": "03a236592dfbe254",
        "type": "debug",
        "z": "eecba73489ce6eee",
        "name": "debug 83",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 440,
        "wires": []
    },
    {
        "id": "d895f5412661d5d8",
        "type": "function",
        "z": "eecba73489ce6eee",
        "name": "Set GlobalVar",
        "func": "// Get the topic and payload from the incoming message\nvar topic = msg.topic;\nvar payload = msg.payload;\n\n// Save the values into a global variable\nglobal.set(\"value1\", { topic: topic, payload: payload });\n\n// Pass the message to the next node\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 440,
        "wires": [
            [
                "03a236592dfbe254"
            ]
        ]
    },
    {
        "id": "0e7dcb55d4272e98",
        "type": "function",
        "z": "a6b2d1089103afac",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 280,
        "wires": [
            [
                "b8af96b721fe1509"
            ]
        ]
    },
    {
        "id": "b8af96b721fe1509",
        "type": "http response",
        "z": "a6b2d1089103afac",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1320,
        "y": 280,
        "wires": []
    },
    {
        "id": "d0385d923f604a47",
        "type": "comment",
        "z": "a6b2d1089103afac",
        "name": "open door request http://sim-les.quicktron.eu:1880/door/command/open",
        "info": "{\n  \"requestId\": \"\", // uuid\n  \"doorCode\": \"\",  // 设备编码\n  \"command\": \"\"    // 暂时用不上 开门接口会传入OPEN，关门接口会传入CLOSE\n}",
        "x": 670,
        "y": 300,
        "wires": []
    },
    {
        "id": "d7acc9a0d128366c",
        "type": "function",
        "z": "a6b2d1089103afac",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nnode.log(msg);\n\nflow.set('isLoadingValue', null);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 840,
        "wires": [
            [
                "83dfd17e55a8e579"
            ]
        ]
    },
    {
        "id": "83dfd17e55a8e579",
        "type": "http response",
        "z": "a6b2d1089103afac",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1140,
        "y": 840,
        "wires": []
    },
    {
        "id": "82b8d5eed5c73614",
        "type": "function",
        "z": "a6b2d1089103afac",
        "name": "save close door arg",
        "func": "msg.parameter=msg.payload\nflow.set(\"closeArg\",msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 840,
        "wires": [
            [
                "d7acc9a0d128366c"
            ]
        ]
    },
    {
        "id": "e20bbe1ed922e1ec",
        "type": "function",
        "z": "a6b2d1089103afac",
        "name": "save request arg (c)",
        "func": "\nvar response=msg.payload\nresponse.actionCode='OPEN'\nnode.warn(response)\n//151 IP\nif (response.doorCode != undefined){\n    flow.set(\"openArg\", response)\n    return [msg,null,null,null,null,null,null,null,null]\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "720183a3df5de37e",
        "type": "function",
        "z": "a6b2d1089103afac",
        "name": "save close door args",
        "func": "\nmsg.parameter = msg.payload\nnode.warn(\"close door request\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 940,
        "wires": [
            [
                "82b8d5eed5c73614",
                "12f14fe7c36a84f1",
                "c3c5332212502efa"
            ]
        ]
    },
    {
        "id": "ac60598f72a7e447",
        "type": "function",
        "z": "a6b2d1089103afac",
        "name": "save open door args",
        "func": "msg.parameter = msg.payload\n//node.warn(\"receive open door args\");\n//node.warn(msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 340,
        "wires": [
            [
                "e20bbe1ed922e1ec",
                "0e7dcb55d4272e98"
            ]
        ]
    },
    {
        "id": "17eab6b0f5854af5",
        "type": "inject",
        "z": "a6b2d1089103afac",
        "name": "Manual Overrite Pick/DropEnable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 550,
        "y": 600,
        "wires": [
            [
                "b7a2eb631d9b3e59"
            ]
        ]
    },
    {
        "id": "c7ae45278c90b2c8",
        "type": "http request",
        "z": "a6b2d1089103afac",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/door/command-finish",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1270,
        "y": 580,
        "wires": [
            [
                "923e20ee7b4bd4b3"
            ]
        ]
    },
    {
        "id": "b7a2eb631d9b3e59",
        "type": "function",
        "z": "a6b2d1089103afac",
        "name": "get saved request arg",
        "func": "//读取modbus的值,只有读到了1,并且有当前请求开门的参数的时候该流程继续往下走\nvar readData=msg.payload\nreadData=[true]\nvar requestArg=flow.get(\"openArg\")\n\nif (requestArg != undefined && requestArg != null && requestArg.requestId!=undefined)\n{\n    //表明当前门开了\n    if (readData && readData != undefined && readData[0] == true) \n    {\n        //构造请求的参数\n        msg.payload=requestArg\n        flow.set(\"openArg\", null)\n        return msg\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 580,
        "wires": [
            [
                "c7ae45278c90b2c8"
            ]
        ]
    },
    {
        "id": "923e20ee7b4bd4b3",
        "type": "function",
        "z": "a6b2d1089103afac",
        "name": "rcs response",
        "func": "var response=msg.payload\n\n\nnode.warn(response)\nif(response!=undefined && response!=null && response.success==true){\n    global.set(\"openArg\",null)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "843a6216ce5f9dbf",
        "type": "function",
        "z": "a6b2d1089103afac",
        "name": "AutoOut (c)",
        "func": "// recieve openArg\nvar requestArg = flow.get(\"openArg\")\n// array of location codes\nvar staticValues = ['0273'];\n// Parsed location of all AMRs\nvar pointCodes = global.get(\"pointCodes\") || [];\n\n// chceck if there is data in openArg\nif (requestArg != undefined && requestArg != null && requestArg.requestId != undefined) {\n    // compare if any amr is in location\n    if (staticValues.some(value => pointCodes.includes(value))) {\n        // send command for ato out of location\n        msg.payload = requestArg;\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 700,
        "wires": [
            [
                "b7a2eb631d9b3e59"
            ]
        ]
    },
    {
        "id": "1ff7a2fb6ee76888",
        "type": "inject",
        "z": "a6b2d1089103afac",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 430,
        "y": 700,
        "wires": [
            [
                "843a6216ce5f9dbf"
            ]
        ]
    },
    {
        "id": "a2106508bc3eb1c2",
        "type": "comment",
        "z": "a6b2d1089103afac",
        "name": "Auto out",
        "info": "",
        "x": 420,
        "y": 660,
        "wires": []
    },
    {
        "id": "05d84b027ff19656",
        "type": "function",
        "z": "a6b2d1089103afac",
        "name": "Reset Flow Values",
        "func": "//flow.set(\"PickBusy\", true)\nflow.set(\"PickRequest\", false)\nflow.set(\"DropRequest\", false)\nflow.set('isLoadingValue', null);\nnode.warn('reset values')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "5fc26d1fdbdea985",
        "type": "comment",
        "z": "a6b2d1089103afac",
        "name": "Send Pick/Drop Request",
        "info": "",
        "x": 1530,
        "y": 180,
        "wires": []
    },
    {
        "id": "95853a342d9db428",
        "type": "comment",
        "z": "a6b2d1089103afac",
        "name": "Reset Pick/Drop Request",
        "info": "",
        "x": 1050,
        "y": 900,
        "wires": []
    },
    {
        "id": "18935fc7bc1dd2e5",
        "type": "link in",
        "z": "a6b2d1089103afac",
        "name": "Open_Stand_6",
        "links": [
            "83dd0c15a8e2ca9d"
        ],
        "x": 645,
        "y": 340,
        "wires": [
            [
                "ac60598f72a7e447"
            ]
        ]
    },
    {
        "id": "502ad896fc60c2fc",
        "type": "link in",
        "z": "a6b2d1089103afac",
        "name": "Close_Stand_6",
        "links": [
            "e41b47f8cb338b43"
        ],
        "x": 255,
        "y": 940,
        "wires": [
            [
                "720183a3df5de37e"
            ]
        ]
    },
    {
        "id": "6d3fa45aa812007e",
        "type": "function",
        "z": "a6b2d1089103afac",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 140,
        "wires": [
            [
                "887bccdf34196c6b",
                "6b2c593b481a3610"
            ]
        ]
    },
    {
        "id": "887bccdf34196c6b",
        "type": "http response",
        "z": "a6b2d1089103afac",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1480,
        "y": 140,
        "wires": []
    },
    {
        "id": "a8f4acc6f9777f46",
        "type": "function",
        "z": "a6b2d1089103afac",
        "name": "Check and save loaded status",
        "func": "// Extract isLoading value from the command property in the payload\nvar isLoadingValue = msg.payload.isLoading;\n\n// Save the isLoading value in a flow variable\nflow.set('isLoadingValue', isLoadingValue);\n\n// Pass the original message to the next node\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 140,
        "wires": [
            [
                "6d3fa45aa812007e"
            ]
        ]
    },
    {
        "id": "bced6202c80cb01e",
        "type": "function",
        "z": "a6b2d1089103afac",
        "name": "Set DropBusy",
        "func": "flow.set(\"DropBusy\", true)\nnode.warn(\"DropBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 500,
        "wires": [
            [
                "56628950d77661d2"
            ]
        ]
    },
    {
        "id": "ee61e03ffae10641",
        "type": "function",
        "z": "a6b2d1089103afac",
        "name": "Set PickBusy",
        "func": "flow.set(\"PickBusy\", true)\nnode.warn(\"PickBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 540,
        "wires": [
            [
                "bd742b1dee7fe67d"
            ]
        ]
    },
    {
        "id": "7e5a4a784d643830",
        "type": "http request",
        "z": "a6b2d1089103afac",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/rcs/equipment/feedback",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 890,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "89211ee433f3bef5",
        "type": "link in",
        "z": "a6b2d1089103afac",
        "name": "link in 28",
        "links": [
            "82d6c7157e0775ea"
        ],
        "x": 645,
        "y": 140,
        "wires": [
            [
                "7e5a4a784d643830",
                "a8f4acc6f9777f46"
            ]
        ]
    },
    {
        "id": "bd742b1dee7fe67d",
        "type": "function",
        "z": "a6b2d1089103afac",
        "name": "OPC msg PickBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "87a16a3f01e70dcf",
        "type": "function",
        "z": "a6b2d1089103afac",
        "name": "Reset Pick Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "5a324c7f84dab801",
        "type": "function",
        "z": "a6b2d1089103afac",
        "name": "Reset Pick Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "12f14fe7c36a84f1",
        "type": "function",
        "z": "a6b2d1089103afac",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") != null) \n{\n    // If true, send only the first value to the next node\n    node.warn('reset pick/drop')\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 940,
        "wires": [
            [
                "05d84b027ff19656",
                "87a16a3f01e70dcf",
                "61f97e0b8b1a8d0c"
            ]
        ]
    },
    {
        "id": "c3c5332212502efa",
        "type": "function",
        "z": "a6b2d1089103afac",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") === null) \n{\n    // If true, send only the first value to the next node\n    flow.set(\"PickBusy\", false);\n    flow.set(\"DropBusy\", false);\n    node.warn(\"Reset Pick/Drop Busy\");\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1080,
        "wires": [
            [
                "5a324c7f84dab801",
                "a30ec55312236b3c"
            ]
        ]
    },
    {
        "id": "56628950d77661d2",
        "type": "function",
        "z": "a6b2d1089103afac",
        "name": "OPC msg DropBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "a30ec55312236b3c",
        "type": "function",
        "z": "a6b2d1089103afac",
        "name": "Resset Drop Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "6b2c593b481a3610",
        "type": "function",
        "z": "a6b2d1089103afac",
        "name": "Pick/DropRequest (c)",
        "func": "if (flow.get(\"isLoadingValue\") === true) \n{\n    flow.set(\"DropRequest\", true)\n    node.warn(\"Drop Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"DropRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\nelse if (flow.get(\"isLoadingValue\") === false) {\n    flow.set(\"PickRequest\", true)\n    node.warn(\"Pick Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"PickRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "61f97e0b8b1a8d0c",
        "type": "function",
        "z": "a6b2d1089103afac",
        "name": "Reset Drop Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "8937c830c313ad66",
        "type": "modbus-read",
        "z": "a6b2d1089103afac",
        "name": "",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Input",
        "adr": "00002",
        "quantity": "1",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "8553a2f3.f365b8",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 490,
        "y": 500,
        "wires": [
            [
                "6acb2c449b49415a",
                "d6d0a4ba041264de",
                "7d306b85cf88b61a"
            ],
            []
        ]
    },
    {
        "id": "6acb2c449b49415a",
        "type": "function",
        "z": "a6b2d1089103afac",
        "name": "Check for DropEnable",
        "func": "// Assuming msg.payload is the array [ false, false, false, false, false, false, false, false ]\n\n// Extract the first value from the array\nvar firstValue = msg.payload[0];\n\n// Check if the first value is true\nif (firstValue === false && flow.get(\"isLoadingValue\") === true && flow.get(\"DropRequest\") === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Drop Enable\")\n    return msg;\n}\n else {\n    // If false, do nothing (no need to return anything)\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 500,
        "wires": [
            [
                "bced6202c80cb01e",
                "b7a2eb631d9b3e59"
            ]
        ]
    },
    {
        "id": "d6d0a4ba041264de",
        "type": "function",
        "z": "a6b2d1089103afac",
        "name": "Check for PickEnable",
        "func": "var firstValue = msg.payload[0];\n\nif (firstValue === true && flow.get(\"isLoadingValue\") === false && flow.get('PickRequest') === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Pick Enable\")\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 540,
        "wires": [
            [
                "ee61e03ffae10641",
                "b7a2eb631d9b3e59"
            ]
        ]
    },
    {
        "id": "7d306b85cf88b61a",
        "type": "subflow:4cc4a3bd7d66d150",
        "z": "a6b2d1089103afac",
        "name": "",
        "env": [
            {
                "name": "OPC_Item",
                "value": "ns=3;s=\"AMR_Comm\".\"PR_OU_02\"",
                "type": "str"
            }
        ],
        "x": 700,
        "y": 460,
        "wires": [
            [
                "7f4193af251158f5",
                "fa8aa6fdfc7f261d"
            ]
        ]
    },
    {
        "id": "7f4193af251158f5",
        "type": "link out",
        "z": "a6b2d1089103afac",
        "name": "link out 22",
        "mode": "link",
        "links": [
            "20f3b1b189a355ab"
        ],
        "x": 845,
        "y": 400,
        "wires": []
    },
    {
        "id": "fa8aa6fdfc7f261d",
        "type": "function",
        "z": "a6b2d1089103afac",
        "name": "Set GlobalVar",
        "func": "// Get the topic and payload from the incoming message\nvar topic = msg.topic;\nvar payload = msg.payload;\n\n// Save the values into a global variable\nglobal.set(\"value2\", { topic: topic, payload: payload });\n\n// Pass the message to the next node\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "a9bf9c13858be90f",
        "type": "function",
        "z": "0d66e8354a03cb9a",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 280,
        "wires": [
            [
                "b14bf5ed37de9d6b"
            ]
        ]
    },
    {
        "id": "b14bf5ed37de9d6b",
        "type": "http response",
        "z": "0d66e8354a03cb9a",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1280,
        "y": 280,
        "wires": []
    },
    {
        "id": "999eed400b24c0f9",
        "type": "comment",
        "z": "0d66e8354a03cb9a",
        "name": "open door request http://sim-les.quicktron.eu:1880/door/command/open",
        "info": "{\n  \"requestId\": \"\", // uuid\n  \"doorCode\": \"\",  // 设备编码\n  \"command\": \"\"    // 暂时用不上 开门接口会传入OPEN，关门接口会传入CLOSE\n}",
        "x": 630,
        "y": 300,
        "wires": []
    },
    {
        "id": "32d962e8e4661a6c",
        "type": "function",
        "z": "0d66e8354a03cb9a",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nnode.log(msg);\n\nflow.set('isLoadingValue', null);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 840,
        "wires": [
            [
                "6a5b3359dda9536e"
            ]
        ]
    },
    {
        "id": "6a5b3359dda9536e",
        "type": "http response",
        "z": "0d66e8354a03cb9a",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1100,
        "y": 840,
        "wires": []
    },
    {
        "id": "3d249ddd914a434b",
        "type": "function",
        "z": "0d66e8354a03cb9a",
        "name": "save close door arg",
        "func": "msg.parameter=msg.payload\nflow.set(\"closeArg\",msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 840,
        "wires": [
            [
                "32d962e8e4661a6c"
            ]
        ]
    },
    {
        "id": "b12891bc65481125",
        "type": "function",
        "z": "0d66e8354a03cb9a",
        "name": "save request arg (c)",
        "func": "\nvar response=msg.payload\nresponse.actionCode='OPEN'\nnode.warn(response)\n//151 IP\nif (response.doorCode != undefined){\n    flow.set(\"openArg\", response)\n    return [msg,null,null,null,null,null,null,null,null]\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "1b050b985c63b32e",
        "type": "function",
        "z": "0d66e8354a03cb9a",
        "name": "save close door args",
        "func": "\nmsg.parameter = msg.payload\nnode.warn(\"close door request\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 940,
        "wires": [
            [
                "3d249ddd914a434b",
                "689451224b9ce9c7",
                "8a6cf2e33c65ab65"
            ]
        ]
    },
    {
        "id": "5b31884eef8a5729",
        "type": "function",
        "z": "0d66e8354a03cb9a",
        "name": "save open door args",
        "func": "msg.parameter = msg.payload\n//node.warn(\"receive open door args\");\n//node.warn(msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 340,
        "wires": [
            [
                "b12891bc65481125",
                "a9bf9c13858be90f"
            ]
        ]
    },
    {
        "id": "ef44c6227886fb28",
        "type": "inject",
        "z": "0d66e8354a03cb9a",
        "name": "Manual Overrite Pick/DropEnable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 510,
        "y": 600,
        "wires": [
            [
                "f3c1045773f6c09b"
            ]
        ]
    },
    {
        "id": "05acafc22cbb566c",
        "type": "http request",
        "z": "0d66e8354a03cb9a",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/door/command-finish",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1230,
        "y": 580,
        "wires": [
            [
                "ce86a765cbd9ab26"
            ]
        ]
    },
    {
        "id": "f3c1045773f6c09b",
        "type": "function",
        "z": "0d66e8354a03cb9a",
        "name": "get saved request arg",
        "func": "//读取modbus的值,只有读到了1,并且有当前请求开门的参数的时候该流程继续往下走\nvar readData=msg.payload\nreadData=[true]\nvar requestArg=flow.get(\"openArg\")\n\nif (requestArg != undefined && requestArg != null && requestArg.requestId!=undefined)\n{\n    //表明当前门开了\n    if (readData && readData != undefined && readData[0] == true) \n    {\n        //构造请求的参数\n        msg.payload=requestArg\n        flow.set(\"openArg\", null)\n        return msg\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 580,
        "wires": [
            [
                "05acafc22cbb566c"
            ]
        ]
    },
    {
        "id": "ce86a765cbd9ab26",
        "type": "function",
        "z": "0d66e8354a03cb9a",
        "name": "rcs response",
        "func": "var response=msg.payload\n\n\nnode.warn(response)\nif(response!=undefined && response!=null && response.success==true){\n    global.set(\"openArg\",null)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "02b7ed26c36043e7",
        "type": "function",
        "z": "0d66e8354a03cb9a",
        "name": "AutoOut (c)",
        "func": "// recieve openArg\nvar requestArg = flow.get(\"openArg\")\n// array of location codes\nvar staticValues = ['0544'];\n// Parsed location of all AMRs\nvar pointCodes = global.get(\"pointCodes\") || [];\n\n// chceck if there is data in openArg\nif (requestArg != undefined && requestArg != null && requestArg.requestId != undefined) {\n    // compare if any amr is in location\n    if (staticValues.some(value => pointCodes.includes(value))) {\n        // send command for ato out of location\n        msg.payload = requestArg;\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 700,
        "wires": [
            [
                "f3c1045773f6c09b"
            ]
        ]
    },
    {
        "id": "e6a830461c949d16",
        "type": "inject",
        "z": "0d66e8354a03cb9a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 390,
        "y": 700,
        "wires": [
            [
                "02b7ed26c36043e7"
            ]
        ]
    },
    {
        "id": "3eb763e6c77f2523",
        "type": "comment",
        "z": "0d66e8354a03cb9a",
        "name": "Auto out",
        "info": "",
        "x": 380,
        "y": 660,
        "wires": []
    },
    {
        "id": "f09e1cd81966875c",
        "type": "function",
        "z": "0d66e8354a03cb9a",
        "name": "Reset Flow Values",
        "func": "//flow.set(\"PickBusy\", true)\nflow.set(\"PickRequest\", false)\nflow.set(\"DropRequest\", false)\nflow.set('isLoadingValue', null);\nnode.warn('reset values')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "b990d5d1729a64a1",
        "type": "comment",
        "z": "0d66e8354a03cb9a",
        "name": "Send Pick/Drop Request",
        "info": "",
        "x": 1490,
        "y": 180,
        "wires": []
    },
    {
        "id": "e668e177da13e9ea",
        "type": "comment",
        "z": "0d66e8354a03cb9a",
        "name": "Reset Pick/Drop Request",
        "info": "",
        "x": 1010,
        "y": 900,
        "wires": []
    },
    {
        "id": "4ae7c811192bdf0f",
        "type": "link in",
        "z": "0d66e8354a03cb9a",
        "name": "Open_Stand_6",
        "links": [
            "4e4488af87518de5"
        ],
        "x": 605,
        "y": 340,
        "wires": [
            [
                "5b31884eef8a5729"
            ]
        ]
    },
    {
        "id": "2ae41c6ab9f14a30",
        "type": "link in",
        "z": "0d66e8354a03cb9a",
        "name": "Close_Stand_6",
        "links": [
            "c598c19f5f1c2844"
        ],
        "x": 215,
        "y": 940,
        "wires": [
            [
                "1b050b985c63b32e"
            ]
        ]
    },
    {
        "id": "c367d776f587fbee",
        "type": "function",
        "z": "0d66e8354a03cb9a",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 140,
        "wires": [
            [
                "8b13b4f630beb8d0",
                "ed2e59dd8519f29e"
            ]
        ]
    },
    {
        "id": "8b13b4f630beb8d0",
        "type": "http response",
        "z": "0d66e8354a03cb9a",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1440,
        "y": 140,
        "wires": []
    },
    {
        "id": "1b6f3dafc4d18457",
        "type": "function",
        "z": "0d66e8354a03cb9a",
        "name": "Check and save loaded status",
        "func": "// Extract isLoading value from the command property in the payload\nvar isLoadingValue = msg.payload.isLoading;\n\n// Save the isLoading value in a flow variable\nflow.set('isLoadingValue', isLoadingValue);\n\n// Pass the original message to the next node\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 140,
        "wires": [
            [
                "c367d776f587fbee"
            ]
        ]
    },
    {
        "id": "cf1b0b9b645ceb54",
        "type": "function",
        "z": "0d66e8354a03cb9a",
        "name": "Set DropBusy",
        "func": "flow.set(\"DropBusy\", true)\nnode.warn(\"DropBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 500,
        "wires": [
            [
                "750fbd3d1388ce52"
            ]
        ]
    },
    {
        "id": "68dfb914733ad1c2",
        "type": "function",
        "z": "0d66e8354a03cb9a",
        "name": "Set PickBusy",
        "func": "flow.set(\"PickBusy\", true)\nnode.warn(\"PickBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 540,
        "wires": [
            [
                "ef3fa1b2fcf0c9d0"
            ]
        ]
    },
    {
        "id": "9b31407c9e280bca",
        "type": "http request",
        "z": "0d66e8354a03cb9a",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/rcs/equipment/feedback",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 850,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "6dca57d87718579c",
        "type": "link in",
        "z": "0d66e8354a03cb9a",
        "name": "link in 29",
        "links": [
            "d09d9a7851d0a265"
        ],
        "x": 605,
        "y": 140,
        "wires": [
            [
                "9b31407c9e280bca",
                "1b6f3dafc4d18457"
            ]
        ]
    },
    {
        "id": "ef3fa1b2fcf0c9d0",
        "type": "function",
        "z": "0d66e8354a03cb9a",
        "name": "OPC msg PickBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "ce919cea2808c9ab",
        "type": "function",
        "z": "0d66e8354a03cb9a",
        "name": "Reset Pick Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "1867ad4323919a88",
        "type": "function",
        "z": "0d66e8354a03cb9a",
        "name": "Reset Pick Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "689451224b9ce9c7",
        "type": "function",
        "z": "0d66e8354a03cb9a",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") != null) \n{\n    // If true, send only the first value to the next node\n    node.warn('reset pick/drop')\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 940,
        "wires": [
            [
                "f09e1cd81966875c",
                "ce919cea2808c9ab",
                "e4cb7246453342be"
            ]
        ]
    },
    {
        "id": "8a6cf2e33c65ab65",
        "type": "function",
        "z": "0d66e8354a03cb9a",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") === null) \n{\n    // If true, send only the first value to the next node\n    flow.set(\"PickBusy\", false);\n    flow.set(\"DropBusy\", false);\n    node.warn(\"Reset Pick/Drop Busy\");\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1080,
        "wires": [
            [
                "1867ad4323919a88",
                "522dbbd13befcd95"
            ]
        ]
    },
    {
        "id": "750fbd3d1388ce52",
        "type": "function",
        "z": "0d66e8354a03cb9a",
        "name": "OPC msg DropBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "522dbbd13befcd95",
        "type": "function",
        "z": "0d66e8354a03cb9a",
        "name": "Resset Drop Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "ed2e59dd8519f29e",
        "type": "function",
        "z": "0d66e8354a03cb9a",
        "name": "Pick/DropRequest (c)",
        "func": "if (flow.get(\"isLoadingValue\") === true) \n{\n    flow.set(\"DropRequest\", true)\n    node.warn(\"Drop Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"DropRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\nelse if (flow.get(\"isLoadingValue\") === false) {\n    flow.set(\"PickRequest\", true)\n    node.warn(\"Pick Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"PickRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "e4cb7246453342be",
        "type": "function",
        "z": "0d66e8354a03cb9a",
        "name": "Reset Drop Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "31bf797b9e8f3fc2",
        "type": "modbus-read",
        "z": "0d66e8354a03cb9a",
        "name": "",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Input",
        "adr": "00003",
        "quantity": "1",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "8553a2f3.f365b8",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 450,
        "y": 500,
        "wires": [
            [
                "ad7670098198e739",
                "d068661c3aaeb3d2",
                "a9a20e08397c4755"
            ],
            []
        ]
    },
    {
        "id": "ad7670098198e739",
        "type": "function",
        "z": "0d66e8354a03cb9a",
        "name": "Check for DropEnable",
        "func": "// Assuming msg.payload is the array [ false, false, false, false, false, false, false, false ]\n\n// Extract the first value from the array\nvar firstValue = msg.payload[0];\n\n// Check if the first value is true\nif (firstValue === false && flow.get(\"isLoadingValue\") === true && flow.get(\"DropRequest\") === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Drop Enable\")\n    return msg;\n}\n else {\n    // If false, do nothing (no need to return anything)\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 500,
        "wires": [
            [
                "cf1b0b9b645ceb54",
                "f3c1045773f6c09b"
            ]
        ]
    },
    {
        "id": "d068661c3aaeb3d2",
        "type": "function",
        "z": "0d66e8354a03cb9a",
        "name": "Check for PickEnable",
        "func": "var firstValue = msg.payload[0];\n\nif (firstValue === true && flow.get(\"isLoadingValue\") === false && flow.get('PickRequest') === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Pick Enable\")\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 540,
        "wires": [
            [
                "68dfb914733ad1c2",
                "f3c1045773f6c09b"
            ]
        ]
    },
    {
        "id": "a9a20e08397c4755",
        "type": "subflow:4cc4a3bd7d66d150",
        "z": "0d66e8354a03cb9a",
        "name": "",
        "env": [
            {
                "name": "OPC_Item",
                "value": "ns=3;s=\"AMR_Comm\".\"PR_OU_03\"",
                "type": "str"
            }
        ],
        "x": 660,
        "y": 460,
        "wires": [
            [
                "62cd50181f28c939",
                "a1b75c5407034c81"
            ]
        ]
    },
    {
        "id": "62cd50181f28c939",
        "type": "link out",
        "z": "0d66e8354a03cb9a",
        "name": "link out 23",
        "mode": "link",
        "links": [
            "20f3b1b189a355ab"
        ],
        "x": 805,
        "y": 400,
        "wires": []
    },
    {
        "id": "a1b75c5407034c81",
        "type": "function",
        "z": "0d66e8354a03cb9a",
        "name": "Set GlobalVar",
        "func": "// Get the topic and payload from the incoming message\nvar topic = msg.topic;\nvar payload = msg.payload;\n\n// Save the values into a global variable\nglobal.set(\"value3\", { topic: topic, payload: payload });\n\n// Pass the message to the next node\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "019d04330f8e97c6",
        "type": "function",
        "z": "0645cb67f3ada93f",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 260,
        "wires": [
            [
                "fbb2397d03538ef1"
            ]
        ]
    },
    {
        "id": "fbb2397d03538ef1",
        "type": "http response",
        "z": "0645cb67f3ada93f",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1340,
        "y": 260,
        "wires": []
    },
    {
        "id": "23b004711f6ed189",
        "type": "comment",
        "z": "0645cb67f3ada93f",
        "name": "open door request http://sim-les.quicktron.eu:1880/door/command/open",
        "info": "{\n  \"requestId\": \"\", // uuid\n  \"doorCode\": \"\",  // 设备编码\n  \"command\": \"\"    // 暂时用不上 开门接口会传入OPEN，关门接口会传入CLOSE\n}",
        "x": 690,
        "y": 280,
        "wires": []
    },
    {
        "id": "331e7babb7d66322",
        "type": "function",
        "z": "0645cb67f3ada93f",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nnode.log(msg);\n\nflow.set('isLoadingValue', null);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 820,
        "wires": [
            [
                "5a296d5b743c3276"
            ]
        ]
    },
    {
        "id": "5a296d5b743c3276",
        "type": "http response",
        "z": "0645cb67f3ada93f",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1160,
        "y": 820,
        "wires": []
    },
    {
        "id": "1e5d22095970c0ab",
        "type": "function",
        "z": "0645cb67f3ada93f",
        "name": "save close door arg",
        "func": "msg.parameter=msg.payload\nflow.set(\"closeArg\",msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 820,
        "wires": [
            [
                "331e7babb7d66322"
            ]
        ]
    },
    {
        "id": "ef85e664804e6d4d",
        "type": "function",
        "z": "0645cb67f3ada93f",
        "name": "save request arg (c)",
        "func": "\nvar response=msg.payload\nresponse.actionCode='OPEN'\nnode.warn(response)\n//151 IP\nif (response.doorCode != undefined){\n    flow.set(\"openArg\", response)\n    return [msg,null,null,null,null,null,null,null,null]\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "8fbd783269be3654",
        "type": "function",
        "z": "0645cb67f3ada93f",
        "name": "save close door args",
        "func": "\nmsg.parameter = msg.payload\nnode.warn(\"close door request\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 920,
        "wires": [
            [
                "1e5d22095970c0ab",
                "b682ec0bfc287ad9",
                "20edcabc061dda7f"
            ]
        ]
    },
    {
        "id": "f671892e4b7f5bc4",
        "type": "function",
        "z": "0645cb67f3ada93f",
        "name": "save open door args",
        "func": "msg.parameter = msg.payload\n//node.warn(\"receive open door args\");\n//node.warn(msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 320,
        "wires": [
            [
                "ef85e664804e6d4d",
                "019d04330f8e97c6"
            ]
        ]
    },
    {
        "id": "c01914fb2606e3c2",
        "type": "inject",
        "z": "0645cb67f3ada93f",
        "name": "Manual Overrite Pick/DropEnable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 570,
        "y": 580,
        "wires": [
            [
                "90e7f9b448767887"
            ]
        ]
    },
    {
        "id": "f2e1279aeaea87dc",
        "type": "http request",
        "z": "0645cb67f3ada93f",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/door/command-finish",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1290,
        "y": 560,
        "wires": [
            [
                "a51f95d71f1c4c34"
            ]
        ]
    },
    {
        "id": "90e7f9b448767887",
        "type": "function",
        "z": "0645cb67f3ada93f",
        "name": "get saved request arg",
        "func": "//读取modbus的值,只有读到了1,并且有当前请求开门的参数的时候该流程继续往下走\nvar readData=msg.payload\nreadData=[true]\nvar requestArg=flow.get(\"openArg\")\n\nif (requestArg != undefined && requestArg != null && requestArg.requestId!=undefined)\n{\n    //表明当前门开了\n    if (readData && readData != undefined && readData[0] == true) \n    {\n        //构造请求的参数\n        msg.payload=requestArg\n        flow.set(\"openArg\", null)\n        return msg\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 560,
        "wires": [
            [
                "f2e1279aeaea87dc"
            ]
        ]
    },
    {
        "id": "a51f95d71f1c4c34",
        "type": "function",
        "z": "0645cb67f3ada93f",
        "name": "rcs response",
        "func": "var response=msg.payload\n\n\nnode.warn(response)\nif(response!=undefined && response!=null && response.success==true){\n    global.set(\"openArg\",null)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "3e61a7f1f183234d",
        "type": "function",
        "z": "0645cb67f3ada93f",
        "name": "AutoOut (c)",
        "func": "// recieve openArg\nvar requestArg = flow.get(\"openArg\")\n// array of location codes\nvar staticValues = ['0180'];\n// Parsed location of all AMRs\nvar pointCodes = global.get(\"pointCodes\") || [];\n\n// chceck if there is data in openArg\nif (requestArg != undefined && requestArg != null && requestArg.requestId != undefined) {\n    // compare if any amr is in location\n    if (staticValues.some(value => pointCodes.includes(value))) {\n        // send command for ato out of location\n        msg.payload = requestArg;\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 680,
        "wires": [
            [
                "90e7f9b448767887"
            ]
        ]
    },
    {
        "id": "f6e18494e10a0521",
        "type": "inject",
        "z": "0645cb67f3ada93f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 450,
        "y": 680,
        "wires": [
            [
                "3e61a7f1f183234d"
            ]
        ]
    },
    {
        "id": "72a6274b11a79726",
        "type": "comment",
        "z": "0645cb67f3ada93f",
        "name": "Auto out",
        "info": "",
        "x": 440,
        "y": 640,
        "wires": []
    },
    {
        "id": "a0726fcd1d692d47",
        "type": "function",
        "z": "0645cb67f3ada93f",
        "name": "Reset Flow Values",
        "func": "//flow.set(\"PickBusy\", true)\nflow.set(\"PickRequest\", false)\nflow.set(\"DropRequest\", false)\nflow.set('isLoadingValue', null);\nnode.warn('reset values')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "c76806d1fd7fa019",
        "type": "comment",
        "z": "0645cb67f3ada93f",
        "name": "Send Pick/Drop Request",
        "info": "",
        "x": 1550,
        "y": 160,
        "wires": []
    },
    {
        "id": "3d2f76f0b0cf362f",
        "type": "comment",
        "z": "0645cb67f3ada93f",
        "name": "Reset Pick/Drop Request",
        "info": "",
        "x": 1070,
        "y": 880,
        "wires": []
    },
    {
        "id": "18bc0bba38f4c443",
        "type": "link in",
        "z": "0645cb67f3ada93f",
        "name": "Open_Stand_6",
        "links": [
            "12df99ba217134be"
        ],
        "x": 665,
        "y": 320,
        "wires": [
            [
                "f671892e4b7f5bc4"
            ]
        ]
    },
    {
        "id": "b6cfa3b16d4f4ed1",
        "type": "link in",
        "z": "0645cb67f3ada93f",
        "name": "Close_Stand_6",
        "links": [
            "5def93fd2fc274ed"
        ],
        "x": 275,
        "y": 920,
        "wires": [
            [
                "8fbd783269be3654"
            ]
        ]
    },
    {
        "id": "45b3efe1afcb1954",
        "type": "function",
        "z": "0645cb67f3ada93f",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 120,
        "wires": [
            [
                "08129299112c3974",
                "cefe1c05b920e2d6"
            ]
        ]
    },
    {
        "id": "08129299112c3974",
        "type": "http response",
        "z": "0645cb67f3ada93f",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1500,
        "y": 120,
        "wires": []
    },
    {
        "id": "fac80d9317537c05",
        "type": "function",
        "z": "0645cb67f3ada93f",
        "name": "Check and save loaded status",
        "func": "// Extract isLoading value from the command property in the payload\nvar isLoadingValue = msg.payload.isLoading;\n\n// Save the isLoading value in a flow variable\nflow.set('isLoadingValue', isLoadingValue);\n\n// Pass the original message to the next node\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 120,
        "wires": [
            [
                "45b3efe1afcb1954"
            ]
        ]
    },
    {
        "id": "329b3994fd8716d7",
        "type": "function",
        "z": "0645cb67f3ada93f",
        "name": "Set DropBusy",
        "func": "flow.set(\"DropBusy\", true)\nnode.warn(\"DropBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 480,
        "wires": [
            [
                "29c17950f722b044"
            ]
        ]
    },
    {
        "id": "846c0fa495a42344",
        "type": "function",
        "z": "0645cb67f3ada93f",
        "name": "Set PickBusy",
        "func": "flow.set(\"PickBusy\", true)\nnode.warn(\"PickBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 520,
        "wires": [
            [
                "fe20bd9a5526408d"
            ]
        ]
    },
    {
        "id": "789faa4478761355",
        "type": "http request",
        "z": "0645cb67f3ada93f",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/rcs/equipment/feedback",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 910,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "8662eba879c85ed0",
        "type": "link in",
        "z": "0645cb67f3ada93f",
        "name": "link in 24",
        "links": [
            "e25590265f99786d"
        ],
        "x": 665,
        "y": 120,
        "wires": [
            [
                "789faa4478761355",
                "fac80d9317537c05"
            ]
        ]
    },
    {
        "id": "fe20bd9a5526408d",
        "type": "function",
        "z": "0645cb67f3ada93f",
        "name": "OPC msg PickBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "3049c29bac0b0ed3",
        "type": "function",
        "z": "0645cb67f3ada93f",
        "name": "Reset Pick Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "06054dd1f0915689",
        "type": "function",
        "z": "0645cb67f3ada93f",
        "name": "Reset Pick Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "b682ec0bfc287ad9",
        "type": "function",
        "z": "0645cb67f3ada93f",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") != null) \n{\n    // If true, send only the first value to the next node\n    node.warn('reset pick/drop')\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 920,
        "wires": [
            [
                "a0726fcd1d692d47",
                "3049c29bac0b0ed3",
                "43459fa0dfed0932"
            ]
        ]
    },
    {
        "id": "20edcabc061dda7f",
        "type": "function",
        "z": "0645cb67f3ada93f",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") === null) \n{\n    // If true, send only the first value to the next node\n    flow.set(\"PickBusy\", false);\n    flow.set(\"DropBusy\", false);\n    node.warn(\"Reset Pick/Drop Busy\");\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 1060,
        "wires": [
            [
                "06054dd1f0915689",
                "9a02204e43191d60"
            ]
        ]
    },
    {
        "id": "29c17950f722b044",
        "type": "function",
        "z": "0645cb67f3ada93f",
        "name": "OPC msg DropBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "9a02204e43191d60",
        "type": "function",
        "z": "0645cb67f3ada93f",
        "name": "Resset Drop Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "cefe1c05b920e2d6",
        "type": "function",
        "z": "0645cb67f3ada93f",
        "name": "Pick/DropRequest (c)",
        "func": "if (flow.get(\"isLoadingValue\") === true) \n{\n    flow.set(\"DropRequest\", true)\n    node.warn(\"Drop Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"DropRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\nelse if (flow.get(\"isLoadingValue\") === false) {\n    flow.set(\"PickRequest\", true)\n    node.warn(\"Pick Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"PickRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "43459fa0dfed0932",
        "type": "function",
        "z": "0645cb67f3ada93f",
        "name": "Reset Drop Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "ca1b1cab4c315d07",
        "type": "modbus-read",
        "z": "0645cb67f3ada93f",
        "name": "",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Input",
        "adr": "00005",
        "quantity": "1",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "43a0b4825a7b24f2",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 510,
        "y": 480,
        "wires": [
            [
                "0b70316eb10de208",
                "b2e1a0f7f682e181",
                "2a0c444bd57297ee"
            ],
            []
        ]
    },
    {
        "id": "0b70316eb10de208",
        "type": "function",
        "z": "0645cb67f3ada93f",
        "name": "Check for DropEnable",
        "func": "// Assuming msg.payload is the array [ false, false, false, false, false, false, false, false ]\n\n// Extract the first value from the array\nvar firstValue = msg.payload[0];\n\n// Check if the first value is true\nif (firstValue === false && flow.get(\"isLoadingValue\") === true && flow.get(\"DropRequest\") === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Drop Enable\")\n    return msg;\n}\n else {\n    // If false, do nothing (no need to return anything)\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 480,
        "wires": [
            [
                "329b3994fd8716d7",
                "90e7f9b448767887"
            ]
        ]
    },
    {
        "id": "b2e1a0f7f682e181",
        "type": "function",
        "z": "0645cb67f3ada93f",
        "name": "Check for PickEnable",
        "func": "var firstValue = msg.payload[0];\n\nif (firstValue === true && flow.get(\"isLoadingValue\") === false && flow.get('PickRequest') === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Pick Enable\")\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 520,
        "wires": [
            [
                "846c0fa495a42344",
                "90e7f9b448767887"
            ]
        ]
    },
    {
        "id": "2a0c444bd57297ee",
        "type": "subflow:4cc4a3bd7d66d150",
        "z": "0645cb67f3ada93f",
        "name": "",
        "env": [
            {
                "name": "OPC_Item",
                "value": "ns=3;s=\"AMR_Comm\".\"PR_ID_04\"",
                "type": "str"
            }
        ],
        "x": 720,
        "y": 440,
        "wires": [
            [
                "69650111cded0969"
            ]
        ]
    },
    {
        "id": "69650111cded0969",
        "type": "link out",
        "z": "0645cb67f3ada93f",
        "name": "link out 18",
        "mode": "link",
        "links": [
            "20f3b1b189a355ab"
        ],
        "x": 865,
        "y": 440,
        "wires": []
    },
    {
        "id": "ca09e6cebdc13e50",
        "type": "function",
        "z": "6b820bbb857ae99f",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 280,
        "wires": [
            [
                "0983a08106e5fea0"
            ]
        ]
    },
    {
        "id": "0983a08106e5fea0",
        "type": "http response",
        "z": "6b820bbb857ae99f",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1380,
        "y": 280,
        "wires": []
    },
    {
        "id": "698cde0aa425271f",
        "type": "comment",
        "z": "6b820bbb857ae99f",
        "name": "open door request http://sim-les.quicktron.eu:1880/door/command/open",
        "info": "{\n  \"requestId\": \"\", // uuid\n  \"doorCode\": \"\",  // 设备编码\n  \"command\": \"\"    // 暂时用不上 开门接口会传入OPEN，关门接口会传入CLOSE\n}",
        "x": 730,
        "y": 300,
        "wires": []
    },
    {
        "id": "33032e0dae8d7c6e",
        "type": "function",
        "z": "6b820bbb857ae99f",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nnode.log(msg);\n\nflow.set('isLoadingValue', null);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 840,
        "wires": [
            [
                "9cc3f0578363049d"
            ]
        ]
    },
    {
        "id": "9cc3f0578363049d",
        "type": "http response",
        "z": "6b820bbb857ae99f",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1200,
        "y": 840,
        "wires": []
    },
    {
        "id": "086f6333916d3f34",
        "type": "function",
        "z": "6b820bbb857ae99f",
        "name": "save close door arg",
        "func": "msg.parameter=msg.payload\nflow.set(\"closeArg\",msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 840,
        "wires": [
            [
                "33032e0dae8d7c6e"
            ]
        ]
    },
    {
        "id": "b2243aa7d4b8a2b9",
        "type": "function",
        "z": "6b820bbb857ae99f",
        "name": "save request arg (c)",
        "func": "\nvar response=msg.payload\nresponse.actionCode='OPEN'\nnode.warn(response)\n//151 IP\nif (response.doorCode != undefined){\n    flow.set(\"openArg\", response)\n    return [msg,null,null,null,null,null,null,null,null]\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "e375e8d2b33236d5",
        "type": "function",
        "z": "6b820bbb857ae99f",
        "name": "save close door args",
        "func": "\nmsg.parameter = msg.payload\nnode.warn(\"close door request\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 940,
        "wires": [
            [
                "086f6333916d3f34",
                "b70bd4c0f159d468",
                "5e88e438d9f6803c"
            ]
        ]
    },
    {
        "id": "96d63ec054abee4b",
        "type": "function",
        "z": "6b820bbb857ae99f",
        "name": "save open door args",
        "func": "msg.parameter = msg.payload\n//node.warn(\"receive open door args\");\n//node.warn(msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 340,
        "wires": [
            [
                "b2243aa7d4b8a2b9",
                "ca09e6cebdc13e50"
            ]
        ]
    },
    {
        "id": "fbefa15f0cca2f76",
        "type": "inject",
        "z": "6b820bbb857ae99f",
        "name": "Manual Overrite Pick/DropEnable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 610,
        "y": 600,
        "wires": [
            [
                "1d5b161048ea9f74"
            ]
        ]
    },
    {
        "id": "77b97b98a0043f58",
        "type": "http request",
        "z": "6b820bbb857ae99f",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/door/command-finish",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1330,
        "y": 580,
        "wires": [
            [
                "7fcbbcb00e31b10a"
            ]
        ]
    },
    {
        "id": "1d5b161048ea9f74",
        "type": "function",
        "z": "6b820bbb857ae99f",
        "name": "get saved request arg",
        "func": "//读取modbus的值,只有读到了1,并且有当前请求开门的参数的时候该流程继续往下走\nvar readData=msg.payload\nreadData=[true]\nvar requestArg=flow.get(\"openArg\")\n\nif (requestArg != undefined && requestArg != null && requestArg.requestId!=undefined)\n{\n    //表明当前门开了\n    if (readData && readData != undefined && readData[0] == true) \n    {\n        //构造请求的参数\n        msg.payload=requestArg\n        flow.set(\"openArg\", null)\n        return msg\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 580,
        "wires": [
            [
                "77b97b98a0043f58"
            ]
        ]
    },
    {
        "id": "7fcbbcb00e31b10a",
        "type": "function",
        "z": "6b820bbb857ae99f",
        "name": "rcs response",
        "func": "var response=msg.payload\n\n\nnode.warn(response)\nif(response!=undefined && response!=null && response.success==true){\n    global.set(\"openArg\",null)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "36c86b08b850def2",
        "type": "function",
        "z": "6b820bbb857ae99f",
        "name": "AutoOut (c)",
        "func": "// recieve openArg\nvar requestArg = flow.get(\"openArg\")\n// array of location codes\nvar staticValues = ['0178'];\n// Parsed location of all AMRs\nvar pointCodes = global.get(\"pointCodes\") || [];\n\n// chceck if there is data in openArg\nif (requestArg != undefined && requestArg != null && requestArg.requestId != undefined) {\n    // compare if any amr is in location\n    if (staticValues.some(value => pointCodes.includes(value))) {\n        // send command for ato out of location\n        msg.payload = requestArg;\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 700,
        "wires": [
            [
                "1d5b161048ea9f74"
            ]
        ]
    },
    {
        "id": "34da22bf67509963",
        "type": "inject",
        "z": "6b820bbb857ae99f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 490,
        "y": 700,
        "wires": [
            [
                "36c86b08b850def2"
            ]
        ]
    },
    {
        "id": "14f52a672577bea6",
        "type": "comment",
        "z": "6b820bbb857ae99f",
        "name": "Auto out",
        "info": "",
        "x": 480,
        "y": 660,
        "wires": []
    },
    {
        "id": "86f6eee442d23897",
        "type": "function",
        "z": "6b820bbb857ae99f",
        "name": "Reset Flow Values",
        "func": "//flow.set(\"PickBusy\", true)\nflow.set(\"PickRequest\", false)\nflow.set(\"DropRequest\", false)\nflow.set('isLoadingValue', null);\nnode.warn('reset values')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "c1e646d5091926c4",
        "type": "comment",
        "z": "6b820bbb857ae99f",
        "name": "Send Pick/Drop Request",
        "info": "",
        "x": 1590,
        "y": 180,
        "wires": []
    },
    {
        "id": "80e6e19a77b0c285",
        "type": "comment",
        "z": "6b820bbb857ae99f",
        "name": "Reset Pick/Drop Request",
        "info": "",
        "x": 1110,
        "y": 900,
        "wires": []
    },
    {
        "id": "c51d5601ae853d5a",
        "type": "link in",
        "z": "6b820bbb857ae99f",
        "name": "Open_Stand_6",
        "links": [
            "73ea489b022df65b"
        ],
        "x": 705,
        "y": 340,
        "wires": [
            [
                "96d63ec054abee4b"
            ]
        ]
    },
    {
        "id": "add0a97a9f537182",
        "type": "link in",
        "z": "6b820bbb857ae99f",
        "name": "Close_Stand_6",
        "links": [
            "09827e1cd1ba3a89"
        ],
        "x": 315,
        "y": 940,
        "wires": [
            [
                "e375e8d2b33236d5"
            ]
        ]
    },
    {
        "id": "056abe5043f9bed0",
        "type": "function",
        "z": "6b820bbb857ae99f",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 140,
        "wires": [
            [
                "dfc56c24d328900a",
                "c93f3781fb0c72bf"
            ]
        ]
    },
    {
        "id": "dfc56c24d328900a",
        "type": "http response",
        "z": "6b820bbb857ae99f",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1540,
        "y": 140,
        "wires": []
    },
    {
        "id": "920ea38457e9c8db",
        "type": "function",
        "z": "6b820bbb857ae99f",
        "name": "Check and save loaded status",
        "func": "// Extract isLoading value from the command property in the payload\nvar isLoadingValue = msg.payload.isLoading;\n\n// Save the isLoading value in a flow variable\nflow.set('isLoadingValue', isLoadingValue);\n\n// Pass the original message to the next node\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 140,
        "wires": [
            [
                "056abe5043f9bed0"
            ]
        ]
    },
    {
        "id": "c988b2a3b65c7ad1",
        "type": "function",
        "z": "6b820bbb857ae99f",
        "name": "Set DropBusy",
        "func": "flow.set(\"DropBusy\", true)\nnode.warn(\"DropBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 500,
        "wires": [
            [
                "bbf1d7d79a3823d9"
            ]
        ]
    },
    {
        "id": "00b7a01ba39fe32c",
        "type": "function",
        "z": "6b820bbb857ae99f",
        "name": "Set PickBusy",
        "func": "flow.set(\"PickBusy\", true)\nnode.warn(\"PickBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 540,
        "wires": [
            [
                "9f9a14fef6053d9b"
            ]
        ]
    },
    {
        "id": "dd05d1746b97e9b1",
        "type": "http request",
        "z": "6b820bbb857ae99f",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/rcs/equipment/feedback",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 950,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "7d6360d49b55d7a9",
        "type": "link in",
        "z": "6b820bbb857ae99f",
        "name": "link in 25",
        "links": [
            "6a23fceb7010dd81"
        ],
        "x": 705,
        "y": 140,
        "wires": [
            [
                "dd05d1746b97e9b1",
                "920ea38457e9c8db"
            ]
        ]
    },
    {
        "id": "9f9a14fef6053d9b",
        "type": "function",
        "z": "6b820bbb857ae99f",
        "name": "OPC msg PickBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "6a1b3dedadce51e3",
        "type": "function",
        "z": "6b820bbb857ae99f",
        "name": "Reset Pick Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "36b483b34b1e412e",
        "type": "function",
        "z": "6b820bbb857ae99f",
        "name": "Reset Pick Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "b70bd4c0f159d468",
        "type": "function",
        "z": "6b820bbb857ae99f",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") != null) \n{\n    // If true, send only the first value to the next node\n    node.warn('reset pick/drop')\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 940,
        "wires": [
            [
                "86f6eee442d23897",
                "6a1b3dedadce51e3",
                "73f2db16aaf90546"
            ]
        ]
    },
    {
        "id": "5e88e438d9f6803c",
        "type": "function",
        "z": "6b820bbb857ae99f",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") === null) \n{\n    // If true, send only the first value to the next node\n    flow.set(\"PickBusy\", false);\n    flow.set(\"DropBusy\", false);\n    node.warn(\"Reset Pick/Drop Busy\");\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1080,
        "wires": [
            [
                "36b483b34b1e412e",
                "4c03c2528a686f32"
            ]
        ]
    },
    {
        "id": "bbf1d7d79a3823d9",
        "type": "function",
        "z": "6b820bbb857ae99f",
        "name": "OPC msg DropBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "4c03c2528a686f32",
        "type": "function",
        "z": "6b820bbb857ae99f",
        "name": "Resset Drop Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "c93f3781fb0c72bf",
        "type": "function",
        "z": "6b820bbb857ae99f",
        "name": "Pick/DropRequest (c)",
        "func": "if (flow.get(\"isLoadingValue\") === true) \n{\n    flow.set(\"DropRequest\", true)\n    node.warn(\"Drop Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"DropRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\nelse if (flow.get(\"isLoadingValue\") === false) {\n    flow.set(\"PickRequest\", true)\n    node.warn(\"Pick Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"PickRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "73f2db16aaf90546",
        "type": "function",
        "z": "6b820bbb857ae99f",
        "name": "Reset Drop Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "37ec8f7f91e634cc",
        "type": "modbus-read",
        "z": "6b820bbb857ae99f",
        "name": "",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Input",
        "adr": "00004",
        "quantity": "1",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "43a0b4825a7b24f2",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 550,
        "y": 500,
        "wires": [
            [
                "7658aec06e985717",
                "12d445e0033e9a7c",
                "378fc7be4e00a28a"
            ],
            []
        ]
    },
    {
        "id": "7658aec06e985717",
        "type": "function",
        "z": "6b820bbb857ae99f",
        "name": "Check for DropEnable",
        "func": "// Assuming msg.payload is the array [ false, false, false, false, false, false, false, false ]\n\n// Extract the first value from the array\nvar firstValue = msg.payload[0];\n\n// Check if the first value is true\nif (firstValue === false && flow.get(\"isLoadingValue\") === true && flow.get(\"DropRequest\") === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Drop Enable\")\n    return msg;\n}\n else {\n    // If false, do nothing (no need to return anything)\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 500,
        "wires": [
            [
                "c988b2a3b65c7ad1",
                "1d5b161048ea9f74"
            ]
        ]
    },
    {
        "id": "12d445e0033e9a7c",
        "type": "function",
        "z": "6b820bbb857ae99f",
        "name": "Check for PickEnable",
        "func": "var firstValue = msg.payload[0];\n\nif (firstValue === true && flow.get(\"isLoadingValue\") === false && flow.get('PickRequest') === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Pick Enable\")\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 540,
        "wires": [
            [
                "00b7a01ba39fe32c",
                "1d5b161048ea9f74"
            ]
        ]
    },
    {
        "id": "378fc7be4e00a28a",
        "type": "subflow:4cc4a3bd7d66d150",
        "z": "6b820bbb857ae99f",
        "name": "",
        "env": [
            {
                "name": "OPC_Item",
                "value": "ns=3;s=\"AMR_Comm\".\"PR_ID_05\"",
                "type": "str"
            }
        ],
        "x": 760,
        "y": 460,
        "wires": [
            [
                "4819c0ce9cad0d91"
            ]
        ]
    },
    {
        "id": "4819c0ce9cad0d91",
        "type": "link out",
        "z": "6b820bbb857ae99f",
        "name": "link out 19",
        "mode": "link",
        "links": [
            "20f3b1b189a355ab"
        ],
        "x": 905,
        "y": 460,
        "wires": []
    },
    {
        "id": "c05bc27f97922e69",
        "type": "function",
        "z": "426fd7d4581043d6",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 280,
        "wires": [
            [
                "95c9681f3386b81b"
            ]
        ]
    },
    {
        "id": "95c9681f3386b81b",
        "type": "http response",
        "z": "426fd7d4581043d6",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1400,
        "y": 280,
        "wires": []
    },
    {
        "id": "886626e752f6dabd",
        "type": "comment",
        "z": "426fd7d4581043d6",
        "name": "open door request http://sim-les.quicktron.eu:1880/door/command/open",
        "info": "{\n  \"requestId\": \"\", // uuid\n  \"doorCode\": \"\",  // 设备编码\n  \"command\": \"\"    // 暂时用不上 开门接口会传入OPEN，关门接口会传入CLOSE\n}",
        "x": 750,
        "y": 300,
        "wires": []
    },
    {
        "id": "92d75b02f619b8cc",
        "type": "function",
        "z": "426fd7d4581043d6",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nnode.log(msg);\n\nflow.set('isLoadingValue', null);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 840,
        "wires": [
            [
                "633f0403747feb5a"
            ]
        ]
    },
    {
        "id": "633f0403747feb5a",
        "type": "http response",
        "z": "426fd7d4581043d6",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1220,
        "y": 840,
        "wires": []
    },
    {
        "id": "dd7fade38e2944c9",
        "type": "function",
        "z": "426fd7d4581043d6",
        "name": "save close door arg",
        "func": "msg.parameter=msg.payload\nflow.set(\"closeArg\",msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 840,
        "wires": [
            [
                "92d75b02f619b8cc"
            ]
        ]
    },
    {
        "id": "78c29595596f0fb7",
        "type": "function",
        "z": "426fd7d4581043d6",
        "name": "save request arg (c)",
        "func": "\nvar response=msg.payload\nresponse.actionCode='OPEN'\nnode.warn(response)\n//151 IP\nif (response.doorCode != undefined){\n    flow.set(\"openArg\", response)\n    return [msg,null,null,null,null,null,null,null,null]\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "1fec3c0d3b0a4ba0",
        "type": "function",
        "z": "426fd7d4581043d6",
        "name": "save close door args",
        "func": "\nmsg.parameter = msg.payload\nnode.warn(\"close door request\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 940,
        "wires": [
            [
                "dd7fade38e2944c9",
                "173e4e76b592431b",
                "942c09cf6449d884"
            ]
        ]
    },
    {
        "id": "e6394cc0557a27bb",
        "type": "function",
        "z": "426fd7d4581043d6",
        "name": "save open door args",
        "func": "msg.parameter = msg.payload\n//node.warn(\"receive open door args\");\n//node.warn(msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 340,
        "wires": [
            [
                "78c29595596f0fb7",
                "c05bc27f97922e69"
            ]
        ]
    },
    {
        "id": "59b070bad95fd9a2",
        "type": "inject",
        "z": "426fd7d4581043d6",
        "name": "Manual Overrite Pick/DropEnable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 630,
        "y": 600,
        "wires": [
            [
                "78db0c359daf54bb"
            ]
        ]
    },
    {
        "id": "dcc84d4ae5504bef",
        "type": "http request",
        "z": "426fd7d4581043d6",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/door/command-finish",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1350,
        "y": 580,
        "wires": [
            [
                "610539fd03b35295",
                "519130e8f864ed1a"
            ]
        ]
    },
    {
        "id": "78db0c359daf54bb",
        "type": "function",
        "z": "426fd7d4581043d6",
        "name": "get saved request arg",
        "func": "//读取modbus的值,只有读到了1,并且有当前请求开门的参数的时候该流程继续往下走\nvar readData=msg.payload\nreadData=[true]\nvar requestArg=flow.get(\"openArg\")\n\nif (requestArg != undefined && requestArg != null && requestArg.requestId!=undefined)\n{\n    //表明当前门开了\n    if (readData && readData != undefined && readData[0] == true) \n    {\n        //构造请求的参数\n        msg.payload=requestArg\n        flow.set(\"openArg\", null)\n        return msg\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 580,
        "wires": [
            [
                "dcc84d4ae5504bef"
            ]
        ]
    },
    {
        "id": "610539fd03b35295",
        "type": "function",
        "z": "426fd7d4581043d6",
        "name": "rcs response",
        "func": "var response=msg.payload\n\n\nnode.warn(response)\nif(response!=undefined && response!=null && response.success==true){\n    global.set(\"openArg\",null)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "7364174be572b2c9",
        "type": "function",
        "z": "426fd7d4581043d6",
        "name": "AutoOut (c)",
        "func": "// recieve openArg\nvar requestArg = flow.get(\"openArg\")\n// array of location codes\nvar staticValues = ['0176'];\n// Parsed location of all AMRs\nvar pointCodes = global.get(\"pointCodes\") || [];\n\n// chceck if there is data in openArg\nif (requestArg != undefined && requestArg != null && requestArg.requestId != undefined) {\n    // compare if any amr is in location\n    if (staticValues.some(value => pointCodes.includes(value))) {\n        // send command for ato out of location\n        msg.payload = requestArg;\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 700,
        "wires": [
            [
                "78db0c359daf54bb"
            ]
        ]
    },
    {
        "id": "bde7c6dc0858d212",
        "type": "inject",
        "z": "426fd7d4581043d6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 510,
        "y": 700,
        "wires": [
            [
                "7364174be572b2c9"
            ]
        ]
    },
    {
        "id": "dd9df09d5bd4ca9b",
        "type": "comment",
        "z": "426fd7d4581043d6",
        "name": "Auto out",
        "info": "",
        "x": 500,
        "y": 660,
        "wires": []
    },
    {
        "id": "443821f9ccbe294e",
        "type": "function",
        "z": "426fd7d4581043d6",
        "name": "Reset Flow Values",
        "func": "//flow.set(\"PickBusy\", true)\nflow.set(\"PickRequest\", false)\nflow.set(\"DropRequest\", false)\nflow.set('isLoadingValue', null);\nnode.warn('reset values')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "569fe15715d20293",
        "type": "comment",
        "z": "426fd7d4581043d6",
        "name": "Send Pick/Drop Request",
        "info": "",
        "x": 1610,
        "y": 180,
        "wires": []
    },
    {
        "id": "97c884b0b0a1f183",
        "type": "comment",
        "z": "426fd7d4581043d6",
        "name": "Reset Pick/Drop Request",
        "info": "",
        "x": 1130,
        "y": 900,
        "wires": []
    },
    {
        "id": "b0e61f0a1ae8ce68",
        "type": "link in",
        "z": "426fd7d4581043d6",
        "name": "Open_Stand_6",
        "links": [
            "9eaf25c73dfa5b47"
        ],
        "x": 725,
        "y": 340,
        "wires": [
            [
                "e6394cc0557a27bb"
            ]
        ]
    },
    {
        "id": "564e0ca65e431867",
        "type": "link in",
        "z": "426fd7d4581043d6",
        "name": "Close_Stand_6",
        "links": [
            "c18a6e5f58f8e44b"
        ],
        "x": 335,
        "y": 940,
        "wires": [
            [
                "1fec3c0d3b0a4ba0"
            ]
        ]
    },
    {
        "id": "54324a732b76777d",
        "type": "function",
        "z": "426fd7d4581043d6",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 140,
        "wires": [
            [
                "c9428e90884047f5",
                "d5ed89a46e03c338"
            ]
        ]
    },
    {
        "id": "c9428e90884047f5",
        "type": "http response",
        "z": "426fd7d4581043d6",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1560,
        "y": 140,
        "wires": []
    },
    {
        "id": "228f79848ffdfad9",
        "type": "function",
        "z": "426fd7d4581043d6",
        "name": "Check and save loaded status",
        "func": "// Extract isLoading value from the command property in the payload\nvar isLoadingValue = msg.payload.isLoading;\n\n// Save the isLoading value in a flow variable\nflow.set('isLoadingValue', isLoadingValue);\n\n// Pass the original message to the next node\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 140,
        "wires": [
            [
                "54324a732b76777d"
            ]
        ]
    },
    {
        "id": "74dd78da95ee7ef8",
        "type": "function",
        "z": "426fd7d4581043d6",
        "name": "Set DropBusy",
        "func": "flow.set(\"DropBusy\", true)\nnode.warn(\"DropBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 500,
        "wires": [
            [
                "dfa74fe18a51b130"
            ]
        ]
    },
    {
        "id": "b33a55f152a6e124",
        "type": "function",
        "z": "426fd7d4581043d6",
        "name": "Set PickBusy",
        "func": "flow.set(\"PickBusy\", true)\nnode.warn(\"PickBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 540,
        "wires": [
            [
                "ba8ae5552ab0ccec"
            ]
        ]
    },
    {
        "id": "157b1118af53dcc9",
        "type": "http request",
        "z": "426fd7d4581043d6",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/rcs/equipment/feedback",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 970,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "ed164111d17189ea",
        "type": "link in",
        "z": "426fd7d4581043d6",
        "name": "link in 26",
        "links": [
            "c46983e77e9b1726"
        ],
        "x": 725,
        "y": 140,
        "wires": [
            [
                "157b1118af53dcc9",
                "228f79848ffdfad9"
            ]
        ]
    },
    {
        "id": "ba8ae5552ab0ccec",
        "type": "function",
        "z": "426fd7d4581043d6",
        "name": "OPC msg PickBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "aa4ff39fbc3d9e1f",
        "type": "function",
        "z": "426fd7d4581043d6",
        "name": "Reset Pick Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "3d2d22a77df8a837",
        "type": "function",
        "z": "426fd7d4581043d6",
        "name": "Reset Pick Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "173e4e76b592431b",
        "type": "function",
        "z": "426fd7d4581043d6",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") != null) \n{\n    // If true, send only the first value to the next node\n    node.warn('reset pick/drop')\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 940,
        "wires": [
            [
                "443821f9ccbe294e",
                "aa4ff39fbc3d9e1f",
                "f9f0e9e20bc6876c"
            ]
        ]
    },
    {
        "id": "942c09cf6449d884",
        "type": "function",
        "z": "426fd7d4581043d6",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") === null) \n{\n    // If true, send only the first value to the next node\n    flow.set(\"PickBusy\", false);\n    flow.set(\"DropBusy\", false);\n    node.warn(\"Reset Pick/Drop Busy\");\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1080,
        "wires": [
            [
                "3d2d22a77df8a837",
                "b4fe00f6b16554c4"
            ]
        ]
    },
    {
        "id": "dfa74fe18a51b130",
        "type": "function",
        "z": "426fd7d4581043d6",
        "name": "OPC msg DropBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "b4fe00f6b16554c4",
        "type": "function",
        "z": "426fd7d4581043d6",
        "name": "Resset Drop Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "d5ed89a46e03c338",
        "type": "function",
        "z": "426fd7d4581043d6",
        "name": "Pick/DropRequest (c)",
        "func": "if (flow.get(\"isLoadingValue\") === true) \n{\n    flow.set(\"DropRequest\", true)\n    node.warn(\"Drop Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"DropRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\nelse if (flow.get(\"isLoadingValue\") === false) {\n    flow.set(\"PickRequest\", true)\n    node.warn(\"Pick Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"PickRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "f9f0e9e20bc6876c",
        "type": "function",
        "z": "426fd7d4581043d6",
        "name": "Reset Drop Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "ce3e1a0924b0916e",
        "type": "modbus-read",
        "z": "426fd7d4581043d6",
        "name": "",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Input",
        "adr": "00003",
        "quantity": "1",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "43a0b4825a7b24f2",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 550,
        "y": 500,
        "wires": [
            [
                "53b3a389c26289dd",
                "ef2f32f79a23b9da",
                "68a42254ef515d89"
            ],
            []
        ]
    },
    {
        "id": "53b3a389c26289dd",
        "type": "function",
        "z": "426fd7d4581043d6",
        "name": "Check for DropEnable",
        "func": "// Assuming msg.payload is the array [ false, false, false, false, false, false, false, false ]\n\n// Extract the first value from the array\nvar firstValue = msg.payload[0];\n\n// Check if the first value is true\nif (firstValue === false && flow.get(\"isLoadingValue\") === true && flow.get(\"DropRequest\") === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Drop Enable\")\n    return msg;\n}\n else {\n    // If false, do nothing (no need to return anything)\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 500,
        "wires": [
            [
                "74dd78da95ee7ef8",
                "78db0c359daf54bb"
            ]
        ]
    },
    {
        "id": "ef2f32f79a23b9da",
        "type": "function",
        "z": "426fd7d4581043d6",
        "name": "Check for PickEnable",
        "func": "var firstValue = msg.payload[0];\n\nif (firstValue === true && flow.get(\"isLoadingValue\") === false && flow.get('PickRequest') === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Pick Enable\")\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 540,
        "wires": [
            [
                "b33a55f152a6e124",
                "78db0c359daf54bb"
            ]
        ]
    },
    {
        "id": "68a42254ef515d89",
        "type": "subflow:4cc4a3bd7d66d150",
        "z": "426fd7d4581043d6",
        "name": "",
        "env": [
            {
                "name": "OPC_Item",
                "value": "ns=3;s=\"AMR_Comm\".\"PR_ID_06\"",
                "type": "str"
            }
        ],
        "x": 780,
        "y": 460,
        "wires": [
            [
                "8b3f81d8e60c4d0a"
            ]
        ]
    },
    {
        "id": "8b3f81d8e60c4d0a",
        "type": "link out",
        "z": "426fd7d4581043d6",
        "name": "link out 20",
        "mode": "link",
        "links": [
            "20f3b1b189a355ab"
        ],
        "x": 925,
        "y": 460,
        "wires": []
    },
    {
        "id": "519130e8f864ed1a",
        "type": "debug",
        "z": "426fd7d4581043d6",
        "name": "debug 84",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "counter",
        "x": 1560,
        "y": 640,
        "wires": []
    },
    {
        "id": "1bace85e308bd511",
        "type": "function",
        "z": "518e595be799e7b3",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 260,
        "wires": [
            [
                "a8b2c6c9d8d41746"
            ]
        ]
    },
    {
        "id": "a8b2c6c9d8d41746",
        "type": "http response",
        "z": "518e595be799e7b3",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1380,
        "y": 260,
        "wires": []
    },
    {
        "id": "20c96abb4c2a5ccb",
        "type": "comment",
        "z": "518e595be799e7b3",
        "name": "open door request http://sim-les.quicktron.eu:1880/door/command/open",
        "info": "{\n  \"requestId\": \"\", // uuid\n  \"doorCode\": \"\",  // 设备编码\n  \"command\": \"\"    // 暂时用不上 开门接口会传入OPEN，关门接口会传入CLOSE\n}",
        "x": 730,
        "y": 280,
        "wires": []
    },
    {
        "id": "57db0364238aed87",
        "type": "function",
        "z": "518e595be799e7b3",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nnode.log(msg);\n\nflow.set('isLoadingValue', null);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 820,
        "wires": [
            [
                "c57560e4f3845f2c"
            ]
        ]
    },
    {
        "id": "c57560e4f3845f2c",
        "type": "http response",
        "z": "518e595be799e7b3",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1200,
        "y": 820,
        "wires": []
    },
    {
        "id": "6676868e59b15f67",
        "type": "function",
        "z": "518e595be799e7b3",
        "name": "save close door arg",
        "func": "msg.parameter=msg.payload\nflow.set(\"closeArg\",msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 820,
        "wires": [
            [
                "57db0364238aed87"
            ]
        ]
    },
    {
        "id": "3feff349f17a2624",
        "type": "function",
        "z": "518e595be799e7b3",
        "name": "save request arg (c)",
        "func": "\nvar response=msg.payload\nresponse.actionCode='OPEN'\nnode.warn(response)\n//151 IP\nif (response.doorCode != undefined){\n    flow.set(\"openArg\", response)\n    return [msg,null,null,null,null,null,null,null,null]\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "02706318ab592664",
        "type": "function",
        "z": "518e595be799e7b3",
        "name": "save close door args",
        "func": "\nmsg.parameter = msg.payload\nnode.warn(\"close door request\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 920,
        "wires": [
            [
                "6676868e59b15f67",
                "088dedc29e84976e",
                "6873e55271b387e8"
            ]
        ]
    },
    {
        "id": "20f5c1bd745858f9",
        "type": "function",
        "z": "518e595be799e7b3",
        "name": "save open door args",
        "func": "msg.parameter = msg.payload\n//node.warn(\"receive open door args\");\n//node.warn(msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 320,
        "wires": [
            [
                "3feff349f17a2624",
                "1bace85e308bd511"
            ]
        ]
    },
    {
        "id": "4f7cd098d020fb25",
        "type": "inject",
        "z": "518e595be799e7b3",
        "name": "Manual Overrite Pick/DropEnable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 610,
        "y": 580,
        "wires": [
            [
                "0ca25e97e8e0edcc"
            ]
        ]
    },
    {
        "id": "c7b4e5e569c2a6e4",
        "type": "http request",
        "z": "518e595be799e7b3",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/door/command-finish",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1330,
        "y": 560,
        "wires": [
            [
                "f1155adb7261cfe2"
            ]
        ]
    },
    {
        "id": "0ca25e97e8e0edcc",
        "type": "function",
        "z": "518e595be799e7b3",
        "name": "get saved request arg",
        "func": "//读取modbus的值,只有读到了1,并且有当前请求开门的参数的时候该流程继续往下走\nvar readData=msg.payload\nreadData=[true]\nvar requestArg=flow.get(\"openArg\")\n\nif (requestArg != undefined && requestArg != null && requestArg.requestId!=undefined)\n{\n    //表明当前门开了\n    if (readData && readData != undefined && readData[0] == true) \n    {\n        //构造请求的参数\n        msg.payload=requestArg\n        flow.set(\"openArg\", null)\n        return msg\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 560,
        "wires": [
            [
                "c7b4e5e569c2a6e4"
            ]
        ]
    },
    {
        "id": "f1155adb7261cfe2",
        "type": "function",
        "z": "518e595be799e7b3",
        "name": "rcs response",
        "func": "var response=msg.payload\n\n\nnode.warn(response)\nif(response!=undefined && response!=null && response.success==true){\n    global.set(\"openArg\",null)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "9fdc642e4aa050ab",
        "type": "function",
        "z": "518e595be799e7b3",
        "name": "AutoOut (c)",
        "func": "// recieve openArg\nvar requestArg = flow.get(\"openArg\")\n// array of location codes\nvar staticValues = ['0358'];\n// Parsed location of all AMRs\nvar pointCodes = global.get(\"pointCodes\") || [];\n\n// chceck if there is data in openArg\nif (requestArg != undefined && requestArg != null && requestArg.requestId != undefined) {\n    // compare if any amr is in location\n    if (staticValues.some(value => pointCodes.includes(value))) {\n        // send command for ato out of location\n        msg.payload = requestArg;\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 680,
        "wires": [
            [
                "0ca25e97e8e0edcc"
            ]
        ]
    },
    {
        "id": "b3060eb7c8db3a70",
        "type": "inject",
        "z": "518e595be799e7b3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 490,
        "y": 680,
        "wires": [
            [
                "9fdc642e4aa050ab"
            ]
        ]
    },
    {
        "id": "bd78e3b5548e6cc6",
        "type": "comment",
        "z": "518e595be799e7b3",
        "name": "Auto out",
        "info": "",
        "x": 480,
        "y": 640,
        "wires": []
    },
    {
        "id": "700c0bebbce04bed",
        "type": "function",
        "z": "518e595be799e7b3",
        "name": "Reset Flow Values",
        "func": "//flow.set(\"PickBusy\", true)\nflow.set(\"PickRequest\", false)\nflow.set(\"DropRequest\", false)\nflow.set('isLoadingValue', null);\nnode.warn('reset values')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "15ab917395aaf30a",
        "type": "comment",
        "z": "518e595be799e7b3",
        "name": "Send Pick/Drop Request",
        "info": "",
        "x": 1590,
        "y": 160,
        "wires": []
    },
    {
        "id": "27ba9abacf39dc37",
        "type": "comment",
        "z": "518e595be799e7b3",
        "name": "Reset Pick/Drop Request",
        "info": "",
        "x": 1110,
        "y": 880,
        "wires": []
    },
    {
        "id": "f20b828cd5f5f444",
        "type": "link in",
        "z": "518e595be799e7b3",
        "name": "Open_Stand_6",
        "links": [
            "a79fe197a1eeb27d"
        ],
        "x": 705,
        "y": 320,
        "wires": [
            [
                "20f5c1bd745858f9"
            ]
        ]
    },
    {
        "id": "5e0f0db5fdfc88ab",
        "type": "link in",
        "z": "518e595be799e7b3",
        "name": "Close_Stand_6",
        "links": [
            "99819e818a82f254"
        ],
        "x": 315,
        "y": 920,
        "wires": [
            [
                "02706318ab592664"
            ]
        ]
    },
    {
        "id": "ce0c637f8dcf5688",
        "type": "function",
        "z": "518e595be799e7b3",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 120,
        "wires": [
            [
                "31085f91af0f6589",
                "5c1cf6a32c1d86c6"
            ]
        ]
    },
    {
        "id": "31085f91af0f6589",
        "type": "http response",
        "z": "518e595be799e7b3",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1540,
        "y": 120,
        "wires": []
    },
    {
        "id": "fd3f125b3db17277",
        "type": "function",
        "z": "518e595be799e7b3",
        "name": "Check and save loaded status",
        "func": "// Extract isLoading value from the command property in the payload\nvar isLoadingValue = msg.payload.isLoading;\n\n// Save the isLoading value in a flow variable\nflow.set('isLoadingValue', isLoadingValue);\n\n// Pass the original message to the next node\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 120,
        "wires": [
            [
                "ce0c637f8dcf5688"
            ]
        ]
    },
    {
        "id": "518ada3f3dfde3b9",
        "type": "function",
        "z": "518e595be799e7b3",
        "name": "Set DropBusy",
        "func": "flow.set(\"DropBusy\", true)\nnode.warn(\"DropBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 480,
        "wires": [
            [
                "c3df25446c51e7ec"
            ]
        ]
    },
    {
        "id": "0bd03730794f94c2",
        "type": "function",
        "z": "518e595be799e7b3",
        "name": "Set PickBusy",
        "func": "flow.set(\"PickBusy\", true)\nnode.warn(\"PickBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 520,
        "wires": [
            [
                "bd3eae729cbef90b"
            ]
        ]
    },
    {
        "id": "26a597128fe3077a",
        "type": "http request",
        "z": "518e595be799e7b3",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/rcs/equipment/feedback",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 950,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "5b0251445efa8dfc",
        "type": "link in",
        "z": "518e595be799e7b3",
        "name": "link in 30",
        "links": [
            "204a5f5241a3a451"
        ],
        "x": 705,
        "y": 120,
        "wires": [
            [
                "26a597128fe3077a",
                "fd3f125b3db17277"
            ]
        ]
    },
    {
        "id": "bd3eae729cbef90b",
        "type": "function",
        "z": "518e595be799e7b3",
        "name": "OPC msg PickBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "69c1cb8839e62e95",
        "type": "function",
        "z": "518e595be799e7b3",
        "name": "Reset Pick Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "3c3ec6bf9839112f",
        "type": "function",
        "z": "518e595be799e7b3",
        "name": "Reset Pick Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "088dedc29e84976e",
        "type": "function",
        "z": "518e595be799e7b3",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") != null) \n{\n    // If true, send only the first value to the next node\n    node.warn('reset pick/drop')\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 920,
        "wires": [
            [
                "700c0bebbce04bed",
                "69c1cb8839e62e95",
                "9747f0a245560d8a"
            ]
        ]
    },
    {
        "id": "6873e55271b387e8",
        "type": "function",
        "z": "518e595be799e7b3",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") === null) \n{\n    // If true, send only the first value to the next node\n    flow.set(\"PickBusy\", false);\n    flow.set(\"DropBusy\", false);\n    node.warn(\"Reset Pick/Drop Busy\");\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1060,
        "wires": [
            [
                "3c3ec6bf9839112f",
                "292afd538cdf79bc"
            ]
        ]
    },
    {
        "id": "c3df25446c51e7ec",
        "type": "function",
        "z": "518e595be799e7b3",
        "name": "OPC msg DropBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "292afd538cdf79bc",
        "type": "function",
        "z": "518e595be799e7b3",
        "name": "Resset Drop Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "5c1cf6a32c1d86c6",
        "type": "function",
        "z": "518e595be799e7b3",
        "name": "Pick/DropRequest (c)",
        "func": "if (flow.get(\"isLoadingValue\") === true) \n{\n    flow.set(\"DropRequest\", true)\n    node.warn(\"Drop Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"DropRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\nelse if (flow.get(\"isLoadingValue\") === false) {\n    flow.set(\"PickRequest\", true)\n    node.warn(\"Pick Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"PickRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "9747f0a245560d8a",
        "type": "function",
        "z": "518e595be799e7b3",
        "name": "Reset Drop Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "349a96e46cc99695",
        "type": "modbus-read",
        "z": "518e595be799e7b3",
        "name": "",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Input",
        "adr": "00000",
        "quantity": "1",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "b35ac684c5e83861",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 550,
        "y": 480,
        "wires": [
            [
                "29a453854634337d",
                "15a4b4d84ee260c6",
                "321cd47070bc3376"
            ],
            []
        ]
    },
    {
        "id": "29a453854634337d",
        "type": "function",
        "z": "518e595be799e7b3",
        "name": "Check for DropEnable",
        "func": "// Assuming msg.payload is the array [ false, false, false, false, false, false, false, false ]\n\n// Extract the first value from the array\nvar firstValue = msg.payload[0];\n\n// Check if the first value is true\nif (firstValue === false && flow.get(\"isLoadingValue\") === true && flow.get(\"DropRequest\") === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Drop Enable\")\n    return msg;\n}\n else {\n    // If false, do nothing (no need to return anything)\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 480,
        "wires": [
            [
                "518ada3f3dfde3b9",
                "0ca25e97e8e0edcc"
            ]
        ]
    },
    {
        "id": "15a4b4d84ee260c6",
        "type": "function",
        "z": "518e595be799e7b3",
        "name": "Check for PickEnable",
        "func": "var firstValue = msg.payload[0];\n\nif (firstValue === true && flow.get(\"isLoadingValue\") === false && flow.get('PickRequest') === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Pick Enable\")\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 520,
        "wires": [
            [
                "0bd03730794f94c2",
                "0ca25e97e8e0edcc"
            ]
        ]
    },
    {
        "id": "321cd47070bc3376",
        "type": "subflow:4cc4a3bd7d66d150",
        "z": "518e595be799e7b3",
        "name": "",
        "env": [
            {
                "name": "OPC_Item",
                "value": "ns=3;s=\"AMR_Comm\".\"DE_RJ_01\"",
                "type": "str"
            }
        ],
        "x": 760,
        "y": 440,
        "wires": [
            [
                "f85145c984e8dedc",
                "5a9a93f55738ad85"
            ]
        ]
    },
    {
        "id": "f85145c984e8dedc",
        "type": "link out",
        "z": "518e595be799e7b3",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "20f3b1b189a355ab"
        ],
        "x": 905,
        "y": 380,
        "wires": []
    },
    {
        "id": "5a9a93f55738ad85",
        "type": "function",
        "z": "518e595be799e7b3",
        "name": "Set GlobalVar",
        "func": "// Get the topic and payload from the incoming message\nvar topic = msg.topic;\nvar payload = msg.payload;\n\n// Save the values into a global variable\nglobal.set(\"value4\", { topic: topic, payload: payload });\n\n// Pass the message to the next node\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "bd0fa67e1cd4cded",
        "type": "function",
        "z": "f5a695f692b3b5bf",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 280,
        "wires": [
            [
                "65d8a80ec4d5f148"
            ]
        ]
    },
    {
        "id": "65d8a80ec4d5f148",
        "type": "http response",
        "z": "f5a695f692b3b5bf",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1460,
        "y": 280,
        "wires": []
    },
    {
        "id": "d9f44fcfcf8c8a7a",
        "type": "comment",
        "z": "f5a695f692b3b5bf",
        "name": "open door request http://sim-les.quicktron.eu:1880/door/command/open",
        "info": "{\n  \"requestId\": \"\", // uuid\n  \"doorCode\": \"\",  // 设备编码\n  \"command\": \"\"    // 暂时用不上 开门接口会传入OPEN，关门接口会传入CLOSE\n}",
        "x": 810,
        "y": 300,
        "wires": []
    },
    {
        "id": "54f0f5021e090796",
        "type": "function",
        "z": "f5a695f692b3b5bf",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nnode.log(msg);\n\nflow.set('isLoadingValue', null);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 840,
        "wires": [
            [
                "afbe201beefde77b"
            ]
        ]
    },
    {
        "id": "afbe201beefde77b",
        "type": "http response",
        "z": "f5a695f692b3b5bf",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1280,
        "y": 840,
        "wires": []
    },
    {
        "id": "358ac1b4b27fa322",
        "type": "function",
        "z": "f5a695f692b3b5bf",
        "name": "save close door arg",
        "func": "msg.parameter=msg.payload\nflow.set(\"closeArg\",msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 840,
        "wires": [
            [
                "54f0f5021e090796"
            ]
        ]
    },
    {
        "id": "099095510eb64d99",
        "type": "function",
        "z": "f5a695f692b3b5bf",
        "name": "save request arg (c)",
        "func": "\nvar response=msg.payload\nresponse.actionCode='OPEN'\nnode.warn(response)\n//151 IP\nif (response.doorCode != undefined){\n    flow.set(\"openArg\", response)\n    return [msg,null,null,null,null,null,null,null,null]\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "eb1d2b265b9929fb",
        "type": "function",
        "z": "f5a695f692b3b5bf",
        "name": "save close door args",
        "func": "\nmsg.parameter = msg.payload\nnode.warn(\"close door request\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 940,
        "wires": [
            [
                "358ac1b4b27fa322",
                "74210e93e17d7a98",
                "99f62ed1b32b9c96"
            ]
        ]
    },
    {
        "id": "c0904bbc2dd44200",
        "type": "function",
        "z": "f5a695f692b3b5bf",
        "name": "save open door args",
        "func": "msg.parameter = msg.payload\n//node.warn(\"receive open door args\");\n//node.warn(msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 340,
        "wires": [
            [
                "099095510eb64d99",
                "bd0fa67e1cd4cded"
            ]
        ]
    },
    {
        "id": "3ad98c2063b31aef",
        "type": "inject",
        "z": "f5a695f692b3b5bf",
        "name": "Manual Overrite Pick/DropEnable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 690,
        "y": 600,
        "wires": [
            [
                "aa180639c6b63cb1"
            ]
        ]
    },
    {
        "id": "abb61a133fc8285a",
        "type": "http request",
        "z": "f5a695f692b3b5bf",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/door/command-finish",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1410,
        "y": 580,
        "wires": [
            [
                "79114032d641f777"
            ]
        ]
    },
    {
        "id": "aa180639c6b63cb1",
        "type": "function",
        "z": "f5a695f692b3b5bf",
        "name": "get saved request arg",
        "func": "//读取modbus的值,只有读到了1,并且有当前请求开门的参数的时候该流程继续往下走\nvar readData=msg.payload\nreadData=[true]\nvar requestArg=flow.get(\"openArg\")\n\nif (requestArg != undefined && requestArg != null && requestArg.requestId!=undefined)\n{\n    //表明当前门开了\n    if (readData && readData != undefined && readData[0] == true) \n    {\n        //构造请求的参数\n        msg.payload=requestArg\n        flow.set(\"openArg\", null)\n        return msg\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 580,
        "wires": [
            [
                "abb61a133fc8285a"
            ]
        ]
    },
    {
        "id": "79114032d641f777",
        "type": "function",
        "z": "f5a695f692b3b5bf",
        "name": "rcs response",
        "func": "var response=msg.payload\n\n\nnode.warn(response)\nif(response!=undefined && response!=null && response.success==true){\n    global.set(\"openArg\",null)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "51537004fa811466",
        "type": "function",
        "z": "f5a695f692b3b5bf",
        "name": "AutoOut (c)",
        "func": "// recieve openArg\nvar requestArg = flow.get(\"openArg\")\n// array of location codes\nvar staticValues = ['0359'];\n// Parsed location of all AMRs\nvar pointCodes = global.get(\"pointCodes\") || [];\n\n// chceck if there is data in openArg\nif (requestArg != undefined && requestArg != null && requestArg.requestId != undefined) {\n    // compare if any amr is in location\n    if (staticValues.some(value => pointCodes.includes(value))) {\n        // send command for ato out of location\n        msg.payload = requestArg;\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 700,
        "wires": [
            [
                "aa180639c6b63cb1"
            ]
        ]
    },
    {
        "id": "b72f82c89cab6527",
        "type": "inject",
        "z": "f5a695f692b3b5bf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 570,
        "y": 700,
        "wires": [
            [
                "51537004fa811466"
            ]
        ]
    },
    {
        "id": "1fe884059de33dbd",
        "type": "comment",
        "z": "f5a695f692b3b5bf",
        "name": "Auto out",
        "info": "",
        "x": 560,
        "y": 660,
        "wires": []
    },
    {
        "id": "9a032091399670a3",
        "type": "function",
        "z": "f5a695f692b3b5bf",
        "name": "Reset Flow Values",
        "func": "//flow.set(\"PickBusy\", true)\nflow.set(\"PickRequest\", false)\nflow.set(\"DropRequest\", false)\nflow.set('isLoadingValue', null);\nnode.warn('reset values')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "05d6dfd2ad475bdf",
        "type": "comment",
        "z": "f5a695f692b3b5bf",
        "name": "Send Pick/Drop Request",
        "info": "",
        "x": 1670,
        "y": 180,
        "wires": []
    },
    {
        "id": "0db717aa4a4712b9",
        "type": "comment",
        "z": "f5a695f692b3b5bf",
        "name": "Reset Pick/Drop Request",
        "info": "",
        "x": 1190,
        "y": 900,
        "wires": []
    },
    {
        "id": "38f46be90c5fda19",
        "type": "link in",
        "z": "f5a695f692b3b5bf",
        "name": "Open_Stand_6",
        "links": [
            "84883caa62607aef"
        ],
        "x": 785,
        "y": 340,
        "wires": [
            [
                "c0904bbc2dd44200"
            ]
        ]
    },
    {
        "id": "5d31e9e69889e08a",
        "type": "link in",
        "z": "f5a695f692b3b5bf",
        "name": "Close_Stand_6",
        "links": [
            "a52397a577ed414d"
        ],
        "x": 395,
        "y": 940,
        "wires": [
            [
                "eb1d2b265b9929fb"
            ]
        ]
    },
    {
        "id": "e12b52d8175aba57",
        "type": "function",
        "z": "f5a695f692b3b5bf",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 140,
        "wires": [
            [
                "a30e4b34b3342ae6",
                "d22d851827fd5e5b"
            ]
        ]
    },
    {
        "id": "a30e4b34b3342ae6",
        "type": "http response",
        "z": "f5a695f692b3b5bf",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1620,
        "y": 140,
        "wires": []
    },
    {
        "id": "484ea3914d2e7e29",
        "type": "function",
        "z": "f5a695f692b3b5bf",
        "name": "Check and save loaded status",
        "func": "// Extract isLoading value from the command property in the payload\nvar isLoadingValue = msg.payload.isLoading;\n\n// Save the isLoading value in a flow variable\nflow.set('isLoadingValue', isLoadingValue);\n\n// Pass the original message to the next node\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 140,
        "wires": [
            [
                "e12b52d8175aba57"
            ]
        ]
    },
    {
        "id": "40449fa676fd3312",
        "type": "function",
        "z": "f5a695f692b3b5bf",
        "name": "Set DropBusy",
        "func": "flow.set(\"DropBusy\", true)\nnode.warn(\"DropBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 500,
        "wires": [
            [
                "b731f2b380ee8947"
            ]
        ]
    },
    {
        "id": "2bdd7e838da7c517",
        "type": "function",
        "z": "f5a695f692b3b5bf",
        "name": "Set PickBusy",
        "func": "flow.set(\"PickBusy\", true)\nnode.warn(\"PickBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 540,
        "wires": [
            [
                "5318de4419afb146"
            ]
        ]
    },
    {
        "id": "b937e90ba48ba169",
        "type": "http request",
        "z": "f5a695f692b3b5bf",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/rcs/equipment/feedback",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1030,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "ef3e43c42435da20",
        "type": "link in",
        "z": "f5a695f692b3b5bf",
        "name": "link in 31",
        "links": [
            "0f05a9f11fddf7e8"
        ],
        "x": 785,
        "y": 140,
        "wires": [
            [
                "b937e90ba48ba169",
                "484ea3914d2e7e29"
            ]
        ]
    },
    {
        "id": "5318de4419afb146",
        "type": "function",
        "z": "f5a695f692b3b5bf",
        "name": "OPC msg PickBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "b10f59ba312d4551",
        "type": "function",
        "z": "f5a695f692b3b5bf",
        "name": "Reset Pick Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "8956b29dc511af1c",
        "type": "function",
        "z": "f5a695f692b3b5bf",
        "name": "Reset Pick Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "74210e93e17d7a98",
        "type": "function",
        "z": "f5a695f692b3b5bf",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") != null) \n{\n    // If true, send only the first value to the next node\n    node.warn('reset pick/drop')\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 940,
        "wires": [
            [
                "9a032091399670a3",
                "b10f59ba312d4551",
                "9326e8d8541ed303"
            ]
        ]
    },
    {
        "id": "99f62ed1b32b9c96",
        "type": "function",
        "z": "f5a695f692b3b5bf",
        "name": "Check for PickEnable",
        "func": "\nif (flow.get(\"isLoadingValue\") === null) \n{\n    // If true, send only the first value to the next node\n    flow.set(\"PickBusy\", false);\n    flow.set(\"DropBusy\", false);\n    node.warn(\"Reset Pick/Drop Busy\");\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1080,
        "wires": [
            [
                "8956b29dc511af1c",
                "5b40cc5dce8fb11a"
            ]
        ]
    },
    {
        "id": "b731f2b380ee8947",
        "type": "function",
        "z": "f5a695f692b3b5bf",
        "name": "OPC msg DropBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "5b40cc5dce8fb11a",
        "type": "function",
        "z": "f5a695f692b3b5bf",
        "name": "Resset Drop Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "d22d851827fd5e5b",
        "type": "function",
        "z": "f5a695f692b3b5bf",
        "name": "Pick/DropRequest (c)",
        "func": "if (flow.get(\"isLoadingValue\") === true) \n{\n    flow.set(\"DropRequest\", true)\n    node.warn(\"Drop Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"DropRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\nelse if (flow.get(\"isLoadingValue\") === false) {\n    flow.set(\"PickRequest\", true)\n    node.warn(\"Pick Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"PickRequest22\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "9326e8d8541ed303",
        "type": "function",
        "z": "f5a695f692b3b5bf",
        "name": "Reset Drop Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"xxx\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "f89c15fcf7ab6189",
        "type": "modbus-read",
        "z": "f5a695f692b3b5bf",
        "name": "",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Input",
        "adr": "00001",
        "quantity": "1",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "b35ac684c5e83861",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 630,
        "y": 500,
        "wires": [
            [
                "9d0ab9db84f89e95",
                "2223dd865d7c9aa7",
                "4f39b96de4e97778"
            ],
            []
        ]
    },
    {
        "id": "9d0ab9db84f89e95",
        "type": "function",
        "z": "f5a695f692b3b5bf",
        "name": "Check for DropEnable",
        "func": "// Assuming msg.payload is the array [ false, false, false, false, false, false, false, false ]\n\n// Extract the first value from the array\nvar firstValue = msg.payload[0];\n\n// Check if the first value is true\nif (firstValue === false && flow.get(\"isLoadingValue\") === true && flow.get(\"DropRequest\") === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Drop Enable\")\n    return msg;\n}\n else {\n    // If false, do nothing (no need to return anything)\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 500,
        "wires": [
            [
                "40449fa676fd3312",
                "aa180639c6b63cb1"
            ]
        ]
    },
    {
        "id": "2223dd865d7c9aa7",
        "type": "function",
        "z": "f5a695f692b3b5bf",
        "name": "Check for PickEnable",
        "func": "var firstValue = msg.payload[0];\n\nif (firstValue === true && flow.get(\"isLoadingValue\") === false && flow.get('PickRequest') === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Pick Enable\")\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 540,
        "wires": [
            [
                "2bdd7e838da7c517",
                "aa180639c6b63cb1"
            ]
        ]
    },
    {
        "id": "4f39b96de4e97778",
        "type": "subflow:4cc4a3bd7d66d150",
        "z": "f5a695f692b3b5bf",
        "name": "",
        "env": [
            {
                "name": "OPC_Item",
                "value": "ns=3;s=\"AMR_Comm\".\"DE_RJ_02\"",
                "type": "str"
            }
        ],
        "x": 840,
        "y": 460,
        "wires": [
            [
                "c819459b05e3789a",
                "cd113e3fac833738"
            ]
        ]
    },
    {
        "id": "c819459b05e3789a",
        "type": "link out",
        "z": "f5a695f692b3b5bf",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "20f3b1b189a355ab"
        ],
        "x": 985,
        "y": 400,
        "wires": []
    },
    {
        "id": "cd113e3fac833738",
        "type": "function",
        "z": "f5a695f692b3b5bf",
        "name": "Set GlobalVar",
        "func": "// Get the topic and payload from the incoming message\nvar topic = msg.topic;\nvar payload = msg.payload;\n\n// Save the values into a global variable\nglobal.set(\"value5\", { topic: topic, payload: payload });\n\n// Pass the message to the next node\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "0f56c0e4269a1d9a",
        "type": "function",
        "z": "b4ab2a318db5acdb",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 280,
        "wires": [
            [
                "7ad7bd701c43c693"
            ]
        ]
    },
    {
        "id": "7ad7bd701c43c693",
        "type": "http response",
        "z": "b4ab2a318db5acdb",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1400,
        "y": 280,
        "wires": []
    },
    {
        "id": "f704d6fc8bf0dfa9",
        "type": "comment",
        "z": "b4ab2a318db5acdb",
        "name": "open door request http://sim-les.quicktron.eu:1880/door/command/open",
        "info": "{\n  \"requestId\": \"\", // uuid\n  \"doorCode\": \"\",  // 设备编码\n  \"command\": \"\"    // 暂时用不上 开门接口会传入OPEN，关门接口会传入CLOSE\n}",
        "x": 750,
        "y": 300,
        "wires": []
    },
    {
        "id": "d0cc2e73b8999ac3",
        "type": "function",
        "z": "b4ab2a318db5acdb",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nnode.log(msg);\n\nflow.set('isLoadingValue', null);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 840,
        "wires": [
            [
                "3519815f00fb7a66"
            ]
        ]
    },
    {
        "id": "3519815f00fb7a66",
        "type": "http response",
        "z": "b4ab2a318db5acdb",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1220,
        "y": 840,
        "wires": []
    },
    {
        "id": "c7cb7783114c284b",
        "type": "function",
        "z": "b4ab2a318db5acdb",
        "name": "save close door arg",
        "func": "msg.parameter=msg.payload\nflow.set(\"closeArg\",msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 840,
        "wires": [
            [
                "d0cc2e73b8999ac3"
            ]
        ]
    },
    {
        "id": "6902405db8416eaf",
        "type": "function",
        "z": "b4ab2a318db5acdb",
        "name": "save request arg (c)",
        "func": "\nvar response=msg.payload\nresponse.actionCode='OPEN'\nnode.warn(response)\n//151 IP\nif (response.doorCode != undefined && response.doorCode =='WH_Conveyor_Pick'){\n    flow.set(\"openArg\", response)\n    return [msg,null,null,null,null,null,null,null,null]\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "86fac759cc488990",
        "type": "function",
        "z": "b4ab2a318db5acdb",
        "name": "save close door args",
        "func": "\nmsg.parameter = msg.payload\nnode.warn(\"close door request\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 940,
        "wires": [
            [
                "c7cb7783114c284b"
            ]
        ]
    },
    {
        "id": "c97c62b8810c4259",
        "type": "function",
        "z": "b4ab2a318db5acdb",
        "name": "save open door args",
        "func": "msg.parameter = msg.payload\n//node.warn(\"receive open door args\");\n//node.warn(msg.parameter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 340,
        "wires": [
            [
                "6902405db8416eaf",
                "0f56c0e4269a1d9a"
            ]
        ]
    },
    {
        "id": "cc95196f83f46b5e",
        "type": "inject",
        "z": "b4ab2a318db5acdb",
        "name": "Manual Overrite Pick/DropEnable",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 630,
        "y": 600,
        "wires": [
            [
                "bd681e345fd76690"
            ]
        ]
    },
    {
        "id": "74d5f9c19ff45f48",
        "type": "http request",
        "z": "b4ab2a318db5acdb",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/door/command-finish",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1350,
        "y": 580,
        "wires": [
            [
                "c9f966f055f5d2cc"
            ]
        ]
    },
    {
        "id": "bd681e345fd76690",
        "type": "function",
        "z": "b4ab2a318db5acdb",
        "name": "get saved request arg",
        "func": "//读取modbus的值,只有读到了1,并且有当前请求开门的参数的时候该流程继续往下走\nvar readData=msg.payload\nreadData=[true]\nvar requestArg=flow.get(\"openArg\")\n\nif (requestArg != undefined && requestArg != null && requestArg.requestId!=undefined)\n{\n    //表明当前门开了\n    if (readData && readData != undefined && readData[0] == true) \n    {\n        //构造请求的参数\n        msg.payload=requestArg\n        flow.set(\"openArg\", null)\n        node.warn(\"go\");\n        return msg\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 580,
        "wires": [
            [
                "74d5f9c19ff45f48"
            ]
        ]
    },
    {
        "id": "c9f966f055f5d2cc",
        "type": "function",
        "z": "b4ab2a318db5acdb",
        "name": "rcs response",
        "func": "var response=msg.payload\n\n\nnode.warn(response)\nif(response!=undefined && response!=null && response.success==true){\n    global.set(\"openArg\",null)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "f8a03de7e98e31d6",
        "type": "function",
        "z": "b4ab2a318db5acdb",
        "name": "AutoOut (c)",
        "func": "// recieve openArg\nvar requestArg = flow.get(\"openArg\")\n// array of location codes\nvar staticValues = ['0369'];\n// Parsed location of all AMRs\nvar pointCodes = global.get(\"pointCodes\") || [];\n\n// chceck if there is data in openArg\nif (requestArg != undefined && requestArg != null && requestArg.requestId != undefined) {\n    // compare if any amr is in location\n    if (staticValues.some(value => pointCodes.includes(value))) {\n        // send command for ato out of location\n        msg.payload = requestArg;\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 700,
        "wires": [
            [
                "bd681e345fd76690"
            ]
        ]
    },
    {
        "id": "52f09d1e17fa5e2a",
        "type": "inject",
        "z": "b4ab2a318db5acdb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 510,
        "y": 700,
        "wires": [
            [
                "f8a03de7e98e31d6"
            ]
        ]
    },
    {
        "id": "5c7fbbd691907d05",
        "type": "comment",
        "z": "b4ab2a318db5acdb",
        "name": "Auto out",
        "info": "",
        "x": 500,
        "y": 660,
        "wires": []
    },
    {
        "id": "9581b7f320be7e70",
        "type": "function",
        "z": "b4ab2a318db5acdb",
        "name": "Reset Flow Values",
        "func": "//flow.set(\"PickBusy\", true)\nflow.set(\"PickRequest\", false)\nflow.set(\"DropRequest\", false)\nflow.set('isLoadingValue', null);\nnode.warn('reset values')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "3e79bb987a7c90e2",
        "type": "comment",
        "z": "b4ab2a318db5acdb",
        "name": "Send Pick/Drop Request",
        "info": "",
        "x": 1610,
        "y": 180,
        "wires": []
    },
    {
        "id": "52bcdb8029510e8d",
        "type": "comment",
        "z": "b4ab2a318db5acdb",
        "name": "Reset Pick/Drop Request",
        "info": "",
        "x": 1130,
        "y": 900,
        "wires": []
    },
    {
        "id": "742dec791e440a5b",
        "type": "link in",
        "z": "b4ab2a318db5acdb",
        "name": "Open_Stand_6",
        "links": [
            "d01311d450b8d201"
        ],
        "x": 725,
        "y": 340,
        "wires": [
            [
                "c97c62b8810c4259"
            ]
        ]
    },
    {
        "id": "83fdebec50fc386c",
        "type": "link in",
        "z": "b4ab2a318db5acdb",
        "name": "Close_Stand_6",
        "links": [
            "6e74856a0868cb9a"
        ],
        "x": 335,
        "y": 940,
        "wires": [
            [
                "86fac759cc488990"
            ]
        ]
    },
    {
        "id": "c934fe91a4383a60",
        "type": "function",
        "z": "b4ab2a318db5acdb",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 140,
        "wires": [
            [
                "080961a11d8331e6",
                "c2abe2efeaa5dc7e"
            ]
        ]
    },
    {
        "id": "080961a11d8331e6",
        "type": "http response",
        "z": "b4ab2a318db5acdb",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1560,
        "y": 140,
        "wires": []
    },
    {
        "id": "accdc79635a50490",
        "type": "function",
        "z": "b4ab2a318db5acdb",
        "name": "Check and save loaded status",
        "func": "// Extract isLoading value from the command property in the payload\nvar isLoadingValue = msg.payload.isLoading;\n\n// Save the isLoading value in a flow variable\nflow.set('isLoadingValue', isLoadingValue);\n\n// Pass the original message to the next node\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 140,
        "wires": [
            [
                "c934fe91a4383a60"
            ]
        ]
    },
    {
        "id": "6c7f0d8340cd092d",
        "type": "function",
        "z": "b4ab2a318db5acdb",
        "name": "Check for DropEnable",
        "func": "// Assuming msg.payload is the array [ false, false, false, false, false, false, false, false ]\n\n// Extract the first value from the array\nvar firstValue = msg.payload;\nvar requestArg = flow.get(\"openArg\")\n\n// Check if the first value is true\nif (firstValue === true && flow.get(\"isLoadingValue\") === true && flow.get(\"DropRequest\") === true && requestArg != undefined && requestArg != null && requestArg.requestId != undefined) {\n    // If true, send only the first value to the next node\n    msg.payload = true;\n    node.warn(\"Drop Enable\")\n    return msg;\n}\n else {\n    // If false, do nothing (no need to return anything)\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 500,
        "wires": [
            [
                "ce4b438d6f75cb61",
                "bd681e345fd76690"
            ]
        ]
    },
    {
        "id": "5877eb97f6c7b298",
        "type": "function",
        "z": "b4ab2a318db5acdb",
        "name": "Check for PickEnable",
        "func": "var firstValue = msg.payload;\nvar requestArg = flow.get(\"openArg\")\n\nif (firstValue === true && flow.get(\"isLoadingValue\") === false && flow.get('PickRequest') === true && requestArg != undefined && requestArg != null && requestArg.requestId != undefined) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    node.warn(\"Pick Enable\")\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 540,
        "wires": [
            [
                "bd681e345fd76690",
                "17f6a644048fa09a"
            ]
        ]
    },
    {
        "id": "ce4b438d6f75cb61",
        "type": "function",
        "z": "b4ab2a318db5acdb",
        "name": "Set DropBusy",
        "func": "flow.set(\"DropBusy\", true)\nnode.warn(\"DropBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 500,
        "wires": [
            [
                "f50282e5357e2bfe"
            ]
        ]
    },
    {
        "id": "17f6a644048fa09a",
        "type": "function",
        "z": "b4ab2a318db5acdb",
        "name": "Set PickBusy",
        "func": "flow.set(\"PickBusy\", true)\nnode.warn(\"PickBusy\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 540,
        "wires": [
            [
                "fc6506558097a2d0"
            ]
        ]
    },
    {
        "id": "ff35f1dd4f01b309",
        "type": "http request",
        "z": "b4ab2a318db5acdb",
        "name": "send args to rcs, robot can go",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/rcs/equipment/feedback",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 970,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "bb70e6b62f22dc3d",
        "type": "link in",
        "z": "b4ab2a318db5acdb",
        "name": "link in 32",
        "links": [
            "e06d446563299ca0"
        ],
        "x": 725,
        "y": 140,
        "wires": [
            [
                "ff35f1dd4f01b309",
                "accdc79635a50490"
            ]
        ]
    },
    {
        "id": "5ba6befe6e128b66",
        "type": "function",
        "z": "b4ab2a318db5acdb",
        "name": "Check for true",
        "func": "// Check if msg.payload is true\nif (msg.payload === true) {\n    // If true, return the message\n    return msg;\n}\n// If not true, do nothing (don't return anything)\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 500,
        "wires": [
            [
                "6c7f0d8340cd092d"
            ]
        ]
    },
    {
        "id": "fc6506558097a2d0",
        "type": "function",
        "z": "b4ab2a318db5acdb",
        "name": "OPC msg PickBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"AMR_Comm\".\"PickBusy11\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 540,
        "wires": [
            [
                "dafb1a3aef84b531"
            ]
        ]
    },
    {
        "id": "38bca267157e64e3",
        "type": "function",
        "z": "b4ab2a318db5acdb",
        "name": "Reset Pick Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"AMR_Comm\".\"PickRequest11\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 980,
        "wires": [
            [
                "dafb1a3aef84b531",
                "1a117dd5d0355cd4"
            ]
        ]
    },
    {
        "id": "5bd75e0f473ab494",
        "type": "function",
        "z": "b4ab2a318db5acdb",
        "name": "Reset Pick Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"AMR_Comm\".\"PickBusy11\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 1120,
        "wires": [
            [
                "dafb1a3aef84b531",
                "1b1e2e745db6b5c1"
            ]
        ]
    },
    {
        "id": "f50282e5357e2bfe",
        "type": "function",
        "z": "b4ab2a318db5acdb",
        "name": "OPC msg DropBusy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = true;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"AMR_Comm\".\"DropBusy11\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 500,
        "wires": [
            [
                "dafb1a3aef84b531"
            ]
        ]
    },
    {
        "id": "d280a2d3402e806b",
        "type": "function",
        "z": "b4ab2a318db5acdb",
        "name": "Resset Drop Busy (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"AMR_Comm\".\"DropBusy11\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 1160,
        "wires": [
            [
                "dafb1a3aef84b531"
            ]
        ]
    },
    {
        "id": "c2abe2efeaa5dc7e",
        "type": "function",
        "z": "b4ab2a318db5acdb",
        "name": "Pick/DropRequest (c)",
        "func": "if (flow.get(\"isLoadingValue\") === true) \n{\n    flow.set(\"DropRequest\", true)\n    node.warn(\"Drop Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"DropRequest11\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\nelse if (flow.get(\"isLoadingValue\") === false) {\n    flow.set(\"PickRequest\", true)\n    node.warn(\"Pick Request\");\n\n    // Set msg.payload to true\n    msg.payload = true;\n\n    // Set msg.topic and msg.datatype\n    msg.topic = 'ns=3;s=\"AMR_Comm\".\"PickRequest11\"';\n    msg.datatype = 'Boolean';\n\n    // Return the modified msg object\n    return msg;\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 220,
        "wires": [
            [
                "dafb1a3aef84b531"
            ]
        ]
    },
    {
        "id": "ce4d4a95d4008ed7",
        "type": "function",
        "z": "b4ab2a318db5acdb",
        "name": "Reset Drop Request (c)",
        "func": "// Set msg.payload to true\nmsg.payload = false;\n\n// Set msg.topic and msg.datatype\nmsg.topic = 'ns=3;s=\"AMR_Comm\".\"DropRequest11\"';\nmsg.datatype = 'Boolean';\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 1020,
        "wires": [
            [
                "dafb1a3aef84b531"
            ]
        ]
    },
    {
        "id": "f6ec88e728ea05cf",
        "type": "function",
        "z": "b4ab2a318db5acdb",
        "name": "Check for true",
        "func": "// Check if msg.payload is true\nif (msg.payload === true) {\n    // If true, return the message\n    return msg;\n}\n// If not true, do nothing (don't return anything)\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 540,
        "wires": [
            [
                "5877eb97f6c7b298"
            ]
        ]
    },
    {
        "id": "4a351f1999e402eb",
        "type": "link in",
        "z": "b4ab2a318db5acdb",
        "name": "link in 33",
        "links": [
            "05b75ecc93ba805f"
        ],
        "x": 335,
        "y": 500,
        "wires": [
            [
                "5ba6befe6e128b66"
            ]
        ]
    },
    {
        "id": "f8a1e8fc547920df",
        "type": "link in",
        "z": "b4ab2a318db5acdb",
        "name": "link in 34",
        "links": [
            "734aeb7d04a51dcf"
        ],
        "x": 335,
        "y": 540,
        "wires": [
            [
                "f6ec88e728ea05cf"
            ]
        ]
    },
    {
        "id": "dafb1a3aef84b531",
        "type": "link out",
        "z": "b4ab2a318db5acdb",
        "name": "WH Pick OPC Write",
        "mode": "link",
        "links": [
            "08636349ec88c0e0"
        ],
        "x": 1985,
        "y": 540,
        "wires": []
    },
    {
        "id": "9634358b76e121c5",
        "type": "inject",
        "z": "b4ab2a318db5acdb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 580,
        "y": 1320,
        "wires": [
            [
                "e283549daac11eeb"
            ]
        ]
    },
    {
        "id": "e283549daac11eeb",
        "type": "function",
        "z": "b4ab2a318db5acdb",
        "name": "function 119",
        "func": "// Get the values of the flow variables\nvar pickRequest = flow.get('PickRequest');\nvar dropRequest = flow.get('DropRequest');\nvar pickEnable = flow.get('PickEnable');\nvar dropEnable = flow.get('DropEnable');\nvar pickBusy = flow.get('PickBusy');\nvar dropBusy = flow.get('DropBusy');\nvar openArg = flow.get('openArg');\n\n// Log the values for debugging\nnode.warn('PickRequest: ' + pickRequest);\nnode.warn('DropRequest: ' + dropRequest);\nnode.warn('PickEnable: ' + pickEnable);\nnode.warn('DropEnable: ' + dropEnable);\nnode.warn('PickBusy: ' + pickBusy);\nnode.warn('DropBusy: ' + dropBusy);\nnode.warn('openArg: ' + openArg);\n\n// Add your logic to check the values\n// For example, you can check if PickEnable is true and PickBusy is false\nif (pickEnable && !pickBusy) {\n    // Your logic here\n    node.warn('Pick is enabled and not busy');\n}\n\n// Optionally, you can set the payload of the message to convey information to the next nodes\nmsg.payload = 'Values checked successfully';\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1320,
        "wires": [
            [
                "933459f9838bd17d"
            ]
        ]
    },
    {
        "id": "933459f9838bd17d",
        "type": "debug",
        "z": "b4ab2a318db5acdb",
        "name": "debug 75",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 1320,
        "wires": []
    },
    {
        "id": "1b1e2e745db6b5c1",
        "type": "debug",
        "z": "b4ab2a318db5acdb",
        "name": "debug 77",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 1240,
        "wires": []
    },
    {
        "id": "1a117dd5d0355cd4",
        "type": "debug",
        "z": "b4ab2a318db5acdb",
        "name": "debug 78",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 1280,
        "wires": []
    },
    {
        "id": "8c56a847252ef7c5",
        "type": "function",
        "z": "b4ab2a318db5acdb",
        "name": "Reset Flow Values",
        "func": "flow.set(\"PickBusy\", false);\nflow.set(\"DropBusy\", false);\nnode.warn(\"Reset Pick/Drop Busy\");\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "fcc191b8528ebb1e",
        "type": "http request",
        "z": "b4ab2a318db5acdb",
        "name": "Interaction Response",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/rcs/equipment/feedback",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 620,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "ca49e3f64f3d981b",
        "type": "link in",
        "z": "b4ab2a318db5acdb",
        "name": "link in 39",
        "links": [
            "5710cb20e272afb8"
        ],
        "x": 605,
        "y": 1060,
        "wires": [
            [
                "38bca267157e64e3",
                "ce4d4a95d4008ed7",
                "5bd75e0f473ab494",
                "d280a2d3402e806b",
                "8c56a847252ef7c5",
                "9581b7f320be7e70",
                "e12e89b413abbed1",
                "fcc191b8528ebb1e"
            ]
        ]
    },
    {
        "id": "e12e89b413abbed1",
        "type": "function",
        "z": "b4ab2a318db5acdb",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1200,
        "wires": [
            [
                "890c0c6b7d523ebb"
            ]
        ]
    },
    {
        "id": "890c0c6b7d523ebb",
        "type": "http response",
        "z": "b4ab2a318db5acdb",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 820,
        "y": 1200,
        "wires": []
    },
    {
        "id": "74acb2f8e18d013a",
        "type": "http in",
        "z": "36ead17ef1395222",
        "name": "job report",
        "url": "/jobreport",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 220,
        "y": 220,
        "wires": [
            [
                "777266ca95f91c5f",
                "27ccadf8689809a5"
            ]
        ]
    },
    {
        "id": "777266ca95f91c5f",
        "type": "debug",
        "z": "36ead17ef1395222",
        "name": "debug 33",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 280,
        "wires": []
    },
    {
        "id": "27ccadf8689809a5",
        "type": "function",
        "z": "36ead17ef1395222",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 180,
        "wires": [
            [
                "4ed0be38262e3350"
            ]
        ]
    },
    {
        "id": "4ed0be38262e3350",
        "type": "http response",
        "z": "36ead17ef1395222",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 820,
        "y": 180,
        "wires": []
    },
    {
        "id": "6ac39e1160a97986",
        "type": "http request",
        "z": "cd9916258df7b0e6",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/rcs/standardized.agv.avoid.submit",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 810,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "01706834e6537e63",
        "type": "http request",
        "z": "cd9916258df7b0e6",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://10.10.79.60:9003/api/quicktron/rcs/standardized.agv.avoid.cancel",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 810,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "fc357d55498145d2",
        "type": "function",
        "z": "cd9916258df7b0e6",
        "name": "Lock Area",
        "func": "msg.payload = { \"areaCode\": \"AvoidArea_579\" }\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 140,
        "wires": [
            [
                "6ac39e1160a97986"
            ]
        ]
    },
    {
        "id": "c3181c124bceb0c9",
        "type": "function",
        "z": "cd9916258df7b0e6",
        "name": "Unlock Area",
        "func": "msg.payload = { \"areaCode\": \"AvoidArea_579\" }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 240,
        "wires": [
            [
                "01706834e6537e63"
            ]
        ]
    },
    {
        "id": "974bba87289194e6",
        "type": "modbus-read",
        "z": "cd9916258df7b0e6",
        "name": "",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "",
        "dataType": "Input",
        "adr": "00000",
        "quantity": "1",
        "rate": "2",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "89a8d1f0ed1f4df2",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 190,
        "y": 180,
        "wires": [
            [
                "30c1af9f1b3c17ce",
                "37eaa4c3f2654178"
            ],
            []
        ]
    },
    {
        "id": "30c1af9f1b3c17ce",
        "type": "function",
        "z": "cd9916258df7b0e6",
        "name": "Check for True",
        "func": "// Assuming msg.payload is the array [ false, false, false, false, false, false, false, false ]\n\n// Extract the first value from the array\nvar firstValue = msg.payload[0];\n\n// Check if the first value is true\nif (firstValue === true) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    return msg;\n}\n else {\n    // If false, do nothing (no need to return anything)\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 180,
        "wires": [
            [
                "fc357d55498145d2"
            ]
        ]
    },
    {
        "id": "37eaa4c3f2654178",
        "type": "function",
        "z": "cd9916258df7b0e6",
        "name": "Check for False",
        "func": "var firstValue = msg.payload[0];\n\nif (firstValue === false) {\n    // If true, send only the first value to the next node\n    msg.payload = firstValue;\n    return msg;\n}\nelse {\n    // If false, do nothing (no need to return anything)\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 220,
        "wires": [
            [
                "c3181c124bceb0c9"
            ]
        ]
    },
    {
        "id": "1464991fee59b1ac",
        "type": "function",
        "z": "cd9916258df7b0e6",
        "name": "response to rcs",
        "func": "msg.payload={\n    success:true,\n    message:\"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 340,
        "wires": [
            [
                "e76fc84b75730662"
            ]
        ]
    },
    {
        "id": "e76fc84b75730662",
        "type": "http response",
        "z": "cd9916258df7b0e6",
        "name": "response",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 800,
        "y": 340,
        "wires": []
    },
    {
        "id": "0c82a81b05330e88",
        "type": "http in",
        "z": "cd9916258df7b0e6",
        "name": "",
        "url": "/avoidreport",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 340,
        "wires": [
            [
                "1464991fee59b1ac",
                "3c0efb2bbe3e2694"
            ]
        ]
    },
    {
        "id": "3c0efb2bbe3e2694",
        "type": "debug",
        "z": "cd9916258df7b0e6",
        "name": "debug 81",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 400,
        "wires": []
    }
]